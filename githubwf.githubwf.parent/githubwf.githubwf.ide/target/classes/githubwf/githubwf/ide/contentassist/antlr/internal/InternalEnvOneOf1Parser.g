/*
 * generated by Xtext 2.23.0
 */
parser grammar InternalEnvOneOf1Parser;

options {
	tokenVocab=InternalEnvOneOf1Lexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package githubwf.githubwf.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import githubwf.githubwf.services.EnvOneOf1GrammarAccess;

}
@members {
	private EnvOneOf1GrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
	}

	public void setGrammarAccess(EnvOneOf1GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleEnvOneOf1
entryRuleEnvOneOf1
:
{ before(grammarAccess.getEnvOneOf1Rule()); }
	 ruleEnvOneOf1
{ after(grammarAccess.getEnvOneOf1Rule()); } 
	 EOF 
;

// Rule EnvOneOf1
ruleEnvOneOf1 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnvOneOf1Access().getEnvAssignment()); }
		(rule__EnvOneOf1__EnvAssignment)
		{ after(grammarAccess.getEnvOneOf1Access().getEnvAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringContainingExpressionSyntax
entryRuleStringContainingExpressionSyntax
:
{ before(grammarAccess.getStringContainingExpressionSyntaxRule()); }
	 ruleStringContainingExpressionSyntax
{ after(grammarAccess.getStringContainingExpressionSyntaxRule()); } 
	 EOF 
;

// Rule StringContainingExpressionSyntax
ruleStringContainingExpressionSyntax 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringContainingExpressionSyntaxAccess().getStringContainingExpressionSyntaxAssignment()); }
		(rule__StringContainingExpressionSyntax__StringContainingExpressionSyntaxAssignment)
		{ after(grammarAccess.getStringContainingExpressionSyntaxAccess().getStringContainingExpressionSyntaxAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getVALID_STRINGParserRuleCall()); }
		ruleVALID_STRING
		{ after(grammarAccess.getEStringAccess().getVALID_STRINGParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVALID_STRING
entryRuleVALID_STRING
:
{ before(grammarAccess.getVALID_STRINGRule()); }
	 ruleVALID_STRING
{ after(grammarAccess.getVALID_STRINGRule()); } 
	 EOF 
;

// Rule VALID_STRING
ruleVALID_STRING 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVALID_STRINGAccess().getSTRINGTerminalRuleCall()); }
		RULE_STRING
		{ after(grammarAccess.getVALID_STRINGAccess().getSTRINGTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnvOneOf1__EnvAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnvOneOf1Access().getEnvStringContainingExpressionSyntaxParserRuleCall_0()); }
		ruleStringContainingExpressionSyntax
		{ after(grammarAccess.getEnvOneOf1Access().getEnvStringContainingExpressionSyntaxParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringContainingExpressionSyntax__StringContainingExpressionSyntaxAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringContainingExpressionSyntaxAccess().getStringContainingExpressionSyntaxEStringParserRuleCall_0()); }
		ruleEString
		{ after(grammarAccess.getStringContainingExpressionSyntaxAccess().getStringContainingExpressionSyntaxEStringParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
