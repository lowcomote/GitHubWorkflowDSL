/*
 * generated by Xtext 2.23.0
 */
package githubwf.githubwf.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import githubwf.githubwf.ide.contentassist.antlr.internal.InternalNormalJobEnvironmentOneOf1Parser;
import githubwf.githubwf.services.NormalJobEnvironmentOneOf1GrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class NormalJobEnvironmentOneOf1Parser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(NormalJobEnvironmentOneOf1GrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, NormalJobEnvironmentOneOf1GrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEnvironmentPropertiesAbstractAccess().getAlternatives(), "rule__EnvironmentPropertiesAbstract__Alternatives");
			builder.put(grammarAccess.getVALID_STRINGAccess().getAlternatives(), "rule__VALID_STRING__Alternatives");
			builder.put(grammarAccess.getKEYWORDAccess().getAlternatives(), "rule__KEYWORD__Alternatives");
			builder.put(grammarAccess.getNormalJobEnvironmentOneOf1Access().getGroup(), "rule__NormalJobEnvironmentOneOf1__Group__0");
			builder.put(grammarAccess.getEnvironmentAccess().getGroup(), "rule__Environment__Group__0");
			builder.put(grammarAccess.getEnvironmentAccess().getGroup_2(), "rule__Environment__Group_2__0");
			builder.put(grammarAccess.getEnvironmentAccess().getGroup_2_1(), "rule__Environment__Group_2_1__0");
			builder.put(grammarAccess.getEnvironmentNameAccess().getGroup(), "rule__EnvironmentName__Group__0");
			builder.put(grammarAccess.getEnvironmentUrlAccess().getGroup(), "rule__EnvironmentUrl__Group__0");
			builder.put(grammarAccess.getNormalJobEnvironmentOneOf1Access().getEnvironmentAssignment_2(), "rule__NormalJobEnvironmentOneOf1__EnvironmentAssignment_2");
			builder.put(grammarAccess.getEnvironmentAccess().getEnvironmentAssignment_2_0(), "rule__Environment__EnvironmentAssignment_2_0");
			builder.put(grammarAccess.getEnvironmentAccess().getEnvironmentAssignment_2_1_1(), "rule__Environment__EnvironmentAssignment_2_1_1");
			builder.put(grammarAccess.getEnvironmentNameAccess().getNameAssignment_3(), "rule__EnvironmentName__NameAssignment_3");
			builder.put(grammarAccess.getEnvironmentUrlAccess().getUrlAssignment_2(), "rule__EnvironmentUrl__UrlAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private NormalJobEnvironmentOneOf1GrammarAccess grammarAccess;

	@Override
	protected InternalNormalJobEnvironmentOneOf1Parser createParser() {
		InternalNormalJobEnvironmentOneOf1Parser result = new InternalNormalJobEnvironmentOneOf1Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public NormalJobEnvironmentOneOf1GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(NormalJobEnvironmentOneOf1GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
