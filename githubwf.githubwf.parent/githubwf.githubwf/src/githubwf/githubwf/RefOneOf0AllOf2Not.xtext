// automatically generated by Xtext JSON Grammar
grammar githubwf.githubwf.RefOneOf0AllOf2Not with org.eclipse.xtext.common.Terminals

import "http://jku.bise.at/githubwf" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://at.jku.bise/jsonMM" as jsonMM

//EClass RefOneOf0AllOf2Not
RefOneOf0AllOf2Not returns RefOneOf0AllOf2Not:
			//EReference is not a keyword
			ref=RefOneOf0AllOf2NotAbstract
	;

RefOneOf0AllOf2NotAbstract returns RefOneOf0AllOf2NotAbstract:
	=>RefOneOf0AllOf2NotTypeNumber | RefOneOf0AllOf2NotTypeString | RefOneOf0AllOf2NotTypeInteger | RefOneOf0AllOf2NotTypeBoolean | RefOneOf0AllOf2NotTypeObject | RefOneOf0AllOf2NotTypeArray | RefOneOf0AllOf2NotTypeNull;

RefOneOf0AllOf2NotPropertiesAbstract returns RefOneOf0AllOf2NotPropertiesAbstract:
	=>RefOneOf0AllOf2NotAdditionalProperties;




Value returns jsonMM::Value:
	StringValue | ArrayValue | NullValue | NumberValue | ObjectValue | BooleanValue;


//EClass RefOneOf0AllOf2NotTypeString
RefOneOf0AllOf2NotTypeString returns RefOneOf0AllOf2NotTypeString:
			ref=EString
	;

//EClass RefOneOf0AllOf2NotTypeInteger
RefOneOf0AllOf2NotTypeInteger returns RefOneOf0AllOf2NotTypeInteger:
			ref=EDoubleObject
	;

//EClass RefOneOf0AllOf2NotTypeNumber
RefOneOf0AllOf2NotTypeNumber returns RefOneOf0AllOf2NotTypeNumber:
			ref=EDoubleObject
	;

//EClass RefOneOf0AllOf2NotTypeBoolean
RefOneOf0AllOf2NotTypeBoolean returns RefOneOf0AllOf2NotTypeBoolean:
			ref=EBooleanObject
	;

//EClass RefOneOf0AllOf2NotTypeObject
RefOneOf0AllOf2NotTypeObject returns RefOneOf0AllOf2NotTypeObject:
	{RefOneOf0AllOf2NotTypeObject}
			//EReference is not a keyword
			'{'(ref+=RefOneOf0AllOf2NotPropertiesAbstract ( "," ref+=RefOneOf0AllOf2NotPropertiesAbstract)* )?'}'
	;

//EClass RefOneOf0AllOf2NotTypeArray
RefOneOf0AllOf2NotTypeArray returns RefOneOf0AllOf2NotTypeArray:
	{RefOneOf0AllOf2NotTypeArray}
			//EReference is not a keyword
			'['(ref+=RefOneOf0AllOf2NotItems ( "," ref+=RefOneOf0AllOf2NotItems)* )?']'
	;

//EClass RefOneOf0AllOf2NotTypeNull
RefOneOf0AllOf2NotTypeNull returns RefOneOf0AllOf2NotTypeNull:
			//EReference is not a keyword
			ref=NullValue
	;

EString returns ecore::EString:
	VALID_STRING;

EDoubleObject returns ecore::EDoubleObject:
	E_INT | E_DOUBLE;

EBooleanObject returns ecore::EBooleanObject:
	'true' | 'false';

//EClass RefOneOf0AllOf2NotAdditionalProperties
RefOneOf0AllOf2NotAdditionalProperties returns RefOneOf0AllOf2NotAdditionalProperties:
			//KeyValue
			key=EString
			':'
			//EReference is not a keyword
			additionalProperties=JsonDocument
	;

//EClass JsonDocument
JsonDocument returns jsonMM::JsonDocument:
			//EReference is not a keyword
			value=Value
	;

//EClass StringValue
StringValue returns jsonMM::StringValue:
			value=EString
	;

//EClass ArrayValue
ArrayValue returns jsonMM::ArrayValue:
	{jsonMM::ArrayValue}
			//EReference is not a keyword
			'['(value+=Value ( "," value+=Value)* )?']'
	;

//EClass NullValue
NullValue returns jsonMM::NullValue:
			value=NullEnum
	;

//EClass NumberValue
NumberValue returns jsonMM::NumberValue:
			value=EDouble
	;

//EClass ObjectValue
ObjectValue returns jsonMM::ObjectValue:
	{jsonMM::ObjectValue}
	'{'
			//EReference is not a keyword
			(keyvaluepair+=KeyValuePair ( "," keyvaluepair+=KeyValuePair)* )?
	'}';

//EClass BooleanValue
BooleanValue returns jsonMM::BooleanValue:
			value=EBoolean
	;

enum NullEnum returns jsonMM::NullEnum:
				null = 'null';

EDouble returns ecore::EDouble:
	E_INT | E_DOUBLE;

//EClass KeyValuePair
KeyValuePair returns jsonMM::KeyValuePair:
			//KeyValue
			key=EString
			':'
			//EReference is not a keyword
			value=Value
	;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

//EClass RefOneOf0AllOf2NotItems
RefOneOf0AllOf2NotItems returns RefOneOf0AllOf2NotItems:
			//EReference is not a keyword
			items=JsonDocument
	;

/**
 * In JSON the first digit of an integer can not be 0, unless it is 0 itself.
 */
@Override 
terminal INT returns ecore::EInt: 
	('0' |  (('1'..'9') ('0'..'9')*))
;

VALID_STRING: STRING  ;


/**
 * In JSON the single quote for String is not admitted
 */
@Override 
terminal STRING:
	'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"'
;	


terminal E_INT :
	'-'? INT;



terminal E_DOUBLE :
	'-'? INT ('.' INT+)? (('E'|'e') ('+'|'-')? INT)?
;


