/*
 * generated by Xtext 2.29.0
 */
parser grammar InternalConcurrencyCancel_45in_45progressOneOf0Parser;

options {
	tokenVocab=InternalConcurrencyCancel_45in_45progressOneOf0Lexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package githubwf.githubwf.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import githubwf.githubwf.services.ConcurrencyCancel_45in_45progressOneOf0GrammarAccess;

}

@members {

 	private ConcurrencyCancel_45in_45progressOneOf0GrammarAccess grammarAccess;

    public InternalConcurrencyCancel_45in_45progressOneOf0Parser(TokenStream input, ConcurrencyCancel_45in_45progressOneOf0GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ConcurrencyCancel_45in_45progressOneOf0";
   	}

   	@Override
   	protected ConcurrencyCancel_45in_45progressOneOf0GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleConcurrencyCancel_45in_45progressOneOf0
entryRuleConcurrencyCancel_45in_45progressOneOf0 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConcurrencyCancel_45in_45progressOneOf0Rule()); }
	iv_ruleConcurrencyCancel_45in_45progressOneOf0=ruleConcurrencyCancel_45in_45progressOneOf0
	{ $current=$iv_ruleConcurrencyCancel_45in_45progressOneOf0.current; }
	EOF;

// Rule ConcurrencyCancel_45in_45progressOneOf0
ruleConcurrencyCancel_45in_45progressOneOf0 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=CancelInProgress
		{
			newLeafNode(otherlv_0, grammarAccess.getConcurrencyCancel_45in_45progressOneOf0Access().getCancelInProgressKeyword_0());
		}
		otherlv_1=Colon
		{
			newLeafNode(otherlv_1, grammarAccess.getConcurrencyCancel_45in_45progressOneOf0Access().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConcurrencyCancel_45in_45progressOneOf0Access().getCancel_45in_45progressEBooleanObjectParserRuleCall_2_0());
				}
				lv_cancel_45in_45progress_2_0=ruleEBooleanObject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConcurrencyCancel_45in_45progressOneOf0Rule());
					}
					set(
						$current,
						"cancel_45in_45progress",
						lv_cancel_45in_45progress_2_0,
						"githubwf.githubwf.ConcurrencyCancel_45in_45progressOneOf0.EBooleanObject");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEBooleanObject
entryRuleEBooleanObject returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEBooleanObjectRule()); }
	iv_ruleEBooleanObject=ruleEBooleanObject
	{ $current=$iv_ruleEBooleanObject.current.getText(); }
	EOF;

// Rule EBooleanObject
ruleEBooleanObject returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=True
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanObjectAccess().getTrueKeyword_0());
		}
		    |
		kw=False
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanObjectAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleKEYWORD
entryRuleKEYWORD returns [String current=null]:
	{ newCompositeNode(grammarAccess.getKEYWORDRule()); }
	iv_ruleKEYWORD=ruleKEYWORD
	{ $current=$iv_ruleKEYWORD.current.getText(); }
	EOF;

// Rule KEYWORD
ruleKEYWORD returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=CancelInProgress
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getKEYWORDAccess().getCancelInProgressKeyword());
	}
;
