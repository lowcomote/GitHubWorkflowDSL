/**
 * generated by Xtext 2.23.0
 */
package githubwf.githubwf.formatting2;

import com.google.inject.Inject;
import githubwf.Configuration;
import githubwf.ConfigurationOneOf4;
import githubwf.ConfigurationOneOf4Items;
import githubwf.githubwf.services.ConfigurationOneOf4GrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class ConfigurationOneOf4Formatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private ConfigurationOneOf4GrammarAccess _configurationOneOf4GrammarAccess;
  
  protected void _format(final ConfigurationOneOf4 configurationOneOf4, @Extension final IFormattableDocument document) {
    EList<ConfigurationOneOf4Items> _configuration = configurationOneOf4.getConfiguration();
    for (final ConfigurationOneOf4Items configurationOneOf4Items : _configuration) {
      document.<ConfigurationOneOf4Items>format(configurationOneOf4Items);
    }
  }
  
  protected void _format(final ConfigurationOneOf4Items configurationOneOf4Items, @Extension final IFormattableDocument document) {
    document.<Configuration>format(configurationOneOf4Items.getItems());
  }
  
  public void format(final Object configurationOneOf4, final IFormattableDocument document) {
    if (configurationOneOf4 instanceof XtextResource) {
      _format((XtextResource)configurationOneOf4, document);
      return;
    } else if (configurationOneOf4 instanceof ConfigurationOneOf4) {
      _format((ConfigurationOneOf4)configurationOneOf4, document);
      return;
    } else if (configurationOneOf4 instanceof ConfigurationOneOf4Items) {
      _format((ConfigurationOneOf4Items)configurationOneOf4, document);
      return;
    } else if (configurationOneOf4 instanceof EObject) {
      _format((EObject)configurationOneOf4, document);
      return;
    } else if (configurationOneOf4 == null) {
      _format((Void)null, document);
      return;
    } else if (configurationOneOf4 != null) {
      _format(configurationOneOf4, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(configurationOneOf4, document).toString());
    }
  }
}
