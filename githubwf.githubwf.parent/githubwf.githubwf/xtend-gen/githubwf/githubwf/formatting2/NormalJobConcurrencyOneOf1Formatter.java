/**
 * generated by Xtext 2.29.0
 */
package githubwf.githubwf.formatting2;

import com.google.inject.Inject;
import githubwf.Concurrency;
import githubwf.ConcurrencyPropertiesAbstract;
import githubwf.NormalJobConcurrencyOneOf1;
import githubwf.githubwf.services.NormalJobConcurrencyOneOf1GrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class NormalJobConcurrencyOneOf1Formatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private NormalJobConcurrencyOneOf1GrammarAccess _normalJobConcurrencyOneOf1GrammarAccess;

  protected void _format(final NormalJobConcurrencyOneOf1 normalJobConcurrencyOneOf1, @Extension final IFormattableDocument document) {
    document.<Concurrency>format(normalJobConcurrencyOneOf1.getConcurrency());
  }

  protected void _format(final Concurrency concurrency, @Extension final IFormattableDocument document) {
    EList<ConcurrencyPropertiesAbstract> _concurrency = concurrency.getConcurrency();
    for (final ConcurrencyPropertiesAbstract concurrencyPropertiesAbstract : _concurrency) {
      document.<ConcurrencyPropertiesAbstract>format(concurrencyPropertiesAbstract);
    }
  }

  public void format(final Object concurrency, final IFormattableDocument document) {
    if (concurrency instanceof XtextResource) {
      _format((XtextResource)concurrency, document);
      return;
    } else if (concurrency instanceof Concurrency) {
      _format((Concurrency)concurrency, document);
      return;
    } else if (concurrency instanceof NormalJobConcurrencyOneOf1) {
      _format((NormalJobConcurrencyOneOf1)concurrency, document);
      return;
    } else if (concurrency instanceof EObject) {
      _format((EObject)concurrency, document);
      return;
    } else if (concurrency == null) {
      _format((Void)null, document);
      return;
    } else if (concurrency != null) {
      _format(concurrency, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(concurrency, document).toString());
    }
  }
}
