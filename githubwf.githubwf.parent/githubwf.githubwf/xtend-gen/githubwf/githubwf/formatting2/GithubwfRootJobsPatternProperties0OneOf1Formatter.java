/**
 * generated by Xtext 2.29.0
 */
package githubwf.githubwf.formatting2;

import com.google.inject.Inject;
import githubwf.GithubwfRootJobsPatternProperties0OneOf1;
import githubwf.ReusableWorkflowCallJob;
import githubwf.ReusableWorkflowCallJobPropertiesAbstract;
import githubwf.githubwf.services.GithubwfRootJobsPatternProperties0OneOf1GrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class GithubwfRootJobsPatternProperties0OneOf1Formatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private GithubwfRootJobsPatternProperties0OneOf1GrammarAccess _githubwfRootJobsPatternProperties0OneOf1GrammarAccess;

  protected void _format(final GithubwfRootJobsPatternProperties0OneOf1 githubwfRootJobsPatternProperties0OneOf1, @Extension final IFormattableDocument document) {
    document.<ReusableWorkflowCallJob>format(githubwfRootJobsPatternProperties0OneOf1.getPatternProperties0());
  }

  protected void _format(final ReusableWorkflowCallJob reusableWorkflowCallJob, @Extension final IFormattableDocument document) {
    EList<ReusableWorkflowCallJobPropertiesAbstract> _reusableWorkflowCallJob = reusableWorkflowCallJob.getReusableWorkflowCallJob();
    for (final ReusableWorkflowCallJobPropertiesAbstract reusableWorkflowCallJobPropertiesAbstract : _reusableWorkflowCallJob) {
      document.<ReusableWorkflowCallJobPropertiesAbstract>format(reusableWorkflowCallJobPropertiesAbstract);
    }
  }

  public void format(final Object githubwfRootJobsPatternProperties0OneOf1, final IFormattableDocument document) {
    if (githubwfRootJobsPatternProperties0OneOf1 instanceof XtextResource) {
      _format((XtextResource)githubwfRootJobsPatternProperties0OneOf1, document);
      return;
    } else if (githubwfRootJobsPatternProperties0OneOf1 instanceof GithubwfRootJobsPatternProperties0OneOf1) {
      _format((GithubwfRootJobsPatternProperties0OneOf1)githubwfRootJobsPatternProperties0OneOf1, document);
      return;
    } else if (githubwfRootJobsPatternProperties0OneOf1 instanceof ReusableWorkflowCallJob) {
      _format((ReusableWorkflowCallJob)githubwfRootJobsPatternProperties0OneOf1, document);
      return;
    } else if (githubwfRootJobsPatternProperties0OneOf1 instanceof EObject) {
      _format((EObject)githubwfRootJobsPatternProperties0OneOf1, document);
      return;
    } else if (githubwfRootJobsPatternProperties0OneOf1 == null) {
      _format((Void)null, document);
      return;
    } else if (githubwfRootJobsPatternProperties0OneOf1 != null) {
      _format(githubwfRootJobsPatternProperties0OneOf1, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(githubwfRootJobsPatternProperties0OneOf1, document).toString());
    }
  }
}
