/**
 * generated by Xtext 2.23.0
 */
package githubwf.githubwf.formatting2;

import com.google.inject.Inject;
import githubwf.PermissionsOneOf0;
import githubwf.githubwf.services.PermissionsOneOf0GrammarAccess;
import java.util.Arrays;
import jsonMM.JsonDocument;
import jsonMM.Value;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class PermissionsOneOf0Formatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private PermissionsOneOf0GrammarAccess _permissionsOneOf0GrammarAccess;
  
  protected void _format(final PermissionsOneOf0 permissionsOneOf0, @Extension final IFormattableDocument document) {
    document.<JsonDocument>format(permissionsOneOf0.getPermissions());
  }
  
  protected void _format(final JsonDocument jsonDocument, @Extension final IFormattableDocument document) {
    document.<Value>format(jsonDocument.getValue());
  }
  
  public void format(final Object permissionsOneOf0, final IFormattableDocument document) {
    if (permissionsOneOf0 instanceof XtextResource) {
      _format((XtextResource)permissionsOneOf0, document);
      return;
    } else if (permissionsOneOf0 instanceof PermissionsOneOf0) {
      _format((PermissionsOneOf0)permissionsOneOf0, document);
      return;
    } else if (permissionsOneOf0 instanceof JsonDocument) {
      _format((JsonDocument)permissionsOneOf0, document);
      return;
    } else if (permissionsOneOf0 instanceof EObject) {
      _format((EObject)permissionsOneOf0, document);
      return;
    } else if (permissionsOneOf0 == null) {
      _format((Void)null, document);
      return;
    } else if (permissionsOneOf0 != null) {
      _format(permissionsOneOf0, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(permissionsOneOf0, document).toString());
    }
  }
}
