/**
 * generated by Xtext 2.23.0
 */
package githubwf.githubwf.formatting2;

import com.google.inject.Inject;
import githubwf.Container;
import githubwf.ContainerPropertiesAbstract;
import githubwf.NormalJobContainerOneOf1;
import githubwf.githubwf.services.NormalJobContainerOneOf1GrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class NormalJobContainerOneOf1Formatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private NormalJobContainerOneOf1GrammarAccess _normalJobContainerOneOf1GrammarAccess;
  
  protected void _format(final NormalJobContainerOneOf1 normalJobContainerOneOf1, @Extension final IFormattableDocument document) {
    document.<Container>format(normalJobContainerOneOf1.getContainer());
  }
  
  protected void _format(final Container container, @Extension final IFormattableDocument document) {
    EList<ContainerPropertiesAbstract> _container = container.getContainer();
    for (final ContainerPropertiesAbstract containerPropertiesAbstract : _container) {
      document.<ContainerPropertiesAbstract>format(containerPropertiesAbstract);
    }
  }
  
  public void format(final Object container, final IFormattableDocument document) {
    if (container instanceof XtextResource) {
      _format((XtextResource)container, document);
      return;
    } else if (container instanceof Container) {
      _format((Container)container, document);
      return;
    } else if (container instanceof NormalJobContainerOneOf1) {
      _format((NormalJobContainerOneOf1)container, document);
      return;
    } else if (container instanceof EObject) {
      _format((EObject)container, document);
      return;
    } else if (container == null) {
      _format((Void)null, document);
      return;
    } else if (container != null) {
      _format(container, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(container, document).toString());
    }
  }
}
