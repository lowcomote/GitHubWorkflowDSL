/**
 * generated by Xtext 2.23.0
 */
package githubwf.githubwf.formatting2;

import com.google.inject.Inject;
import githubwf.PermissionsOneOf1;
import githubwf.Permissions_45event;
import githubwf.Permissions_45eventPropertiesAbstract;
import githubwf.githubwf.services.PermissionsOneOf1GrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class PermissionsOneOf1Formatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private PermissionsOneOf1GrammarAccess _permissionsOneOf1GrammarAccess;
  
  protected void _format(final PermissionsOneOf1 permissionsOneOf1, @Extension final IFormattableDocument document) {
    document.<Permissions_45event>format(permissionsOneOf1.getPermissions());
  }
  
  protected void _format(final Permissions_45event permissions_45event, @Extension final IFormattableDocument document) {
    EList<Permissions_45eventPropertiesAbstract> _permissions_45event = permissions_45event.getPermissions_45event();
    for (final Permissions_45eventPropertiesAbstract permissions_45eventPropertiesAbstract : _permissions_45event) {
      document.<Permissions_45eventPropertiesAbstract>format(permissions_45eventPropertiesAbstract);
    }
  }
  
  public void format(final Object permissionsOneOf1, final IFormattableDocument document) {
    if (permissionsOneOf1 instanceof XtextResource) {
      _format((XtextResource)permissionsOneOf1, document);
      return;
    } else if (permissionsOneOf1 instanceof PermissionsOneOf1) {
      _format((PermissionsOneOf1)permissionsOneOf1, document);
      return;
    } else if (permissionsOneOf1 instanceof Permissions_45event) {
      _format((Permissions_45event)permissionsOneOf1, document);
      return;
    } else if (permissionsOneOf1 instanceof EObject) {
      _format((EObject)permissionsOneOf1, document);
      return;
    } else if (permissionsOneOf1 == null) {
      _format((Void)null, document);
      return;
    } else if (permissionsOneOf1 != null) {
      _format(permissionsOneOf1, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(permissionsOneOf1, document).toString());
    }
  }
}
