/**
 * generated by Xtext 2.29.0
 */
package githubwf.githubwf.formatting2;

import com.google.inject.Inject;
import githubwf.EventObject;
import githubwf.GithubwfRootOnOneOf2;
import githubwf.GithubwfRootOnOneOf2Branch_protection_rule;
import githubwf.GithubwfRootOnOneOf2PropertiesAbstract;
import githubwf.githubwf.services.GithubwfRootOnOneOf2GrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class GithubwfRootOnOneOf2Formatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private GithubwfRootOnOneOf2GrammarAccess _githubwfRootOnOneOf2GrammarAccess;

  protected void _format(final GithubwfRootOnOneOf2 githubwfRootOnOneOf2, @Extension final IFormattableDocument document) {
    EList<GithubwfRootOnOneOf2PropertiesAbstract> _on = githubwfRootOnOneOf2.getOn();
    for (final GithubwfRootOnOneOf2PropertiesAbstract githubwfRootOnOneOf2PropertiesAbstract : _on) {
      document.<GithubwfRootOnOneOf2PropertiesAbstract>format(githubwfRootOnOneOf2PropertiesAbstract);
    }
  }

  protected void _format(final GithubwfRootOnOneOf2Branch_protection_rule githubwfRootOnOneOf2Branch_protection_rule, @Extension final IFormattableDocument document) {
    document.<EventObject>format(githubwfRootOnOneOf2Branch_protection_rule.getBranch_protection_rule());
  }

  public void format(final Object githubwfRootOnOneOf2Branch_protection_rule, final IFormattableDocument document) {
    if (githubwfRootOnOneOf2Branch_protection_rule instanceof XtextResource) {
      _format((XtextResource)githubwfRootOnOneOf2Branch_protection_rule, document);
      return;
    } else if (githubwfRootOnOneOf2Branch_protection_rule instanceof GithubwfRootOnOneOf2Branch_protection_rule) {
      _format((GithubwfRootOnOneOf2Branch_protection_rule)githubwfRootOnOneOf2Branch_protection_rule, document);
      return;
    } else if (githubwfRootOnOneOf2Branch_protection_rule instanceof GithubwfRootOnOneOf2) {
      _format((GithubwfRootOnOneOf2)githubwfRootOnOneOf2Branch_protection_rule, document);
      return;
    } else if (githubwfRootOnOneOf2Branch_protection_rule instanceof EObject) {
      _format((EObject)githubwfRootOnOneOf2Branch_protection_rule, document);
      return;
    } else if (githubwfRootOnOneOf2Branch_protection_rule == null) {
      _format((Void)null, document);
      return;
    } else if (githubwfRootOnOneOf2Branch_protection_rule != null) {
      _format(githubwfRootOnOneOf2Branch_protection_rule, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(githubwfRootOnOneOf2Branch_protection_rule, document).toString());
    }
  }
}
