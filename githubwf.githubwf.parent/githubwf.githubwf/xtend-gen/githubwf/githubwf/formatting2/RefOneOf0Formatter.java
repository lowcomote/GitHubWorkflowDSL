/**
 * generated by Xtext 2.29.0
 */
package githubwf.githubwf.formatting2;

import com.google.inject.Inject;
import githubwf.RefOneOf0;
import githubwf.RefOneOf0AdditionalProperties;
import githubwf.RefOneOf0PropertiesAbstract;
import githubwf.githubwf.services.RefOneOf0GrammarAccess;
import java.util.Arrays;
import jsonMM.JsonDocument;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class RefOneOf0Formatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RefOneOf0GrammarAccess _refOneOf0GrammarAccess;

  protected void _format(final RefOneOf0 refOneOf0, @Extension final IFormattableDocument document) {
    EList<RefOneOf0PropertiesAbstract> _ref = refOneOf0.getRef();
    for (final RefOneOf0PropertiesAbstract refOneOf0PropertiesAbstract : _ref) {
      document.<RefOneOf0PropertiesAbstract>format(refOneOf0PropertiesAbstract);
    }
  }

  protected void _format(final RefOneOf0AdditionalProperties refOneOf0AdditionalProperties, @Extension final IFormattableDocument document) {
    document.<JsonDocument>format(refOneOf0AdditionalProperties.getAdditionalProperties());
  }

  public void format(final Object refOneOf0AdditionalProperties, final IFormattableDocument document) {
    if (refOneOf0AdditionalProperties instanceof XtextResource) {
      _format((XtextResource)refOneOf0AdditionalProperties, document);
      return;
    } else if (refOneOf0AdditionalProperties instanceof RefOneOf0AdditionalProperties) {
      _format((RefOneOf0AdditionalProperties)refOneOf0AdditionalProperties, document);
      return;
    } else if (refOneOf0AdditionalProperties instanceof RefOneOf0) {
      _format((RefOneOf0)refOneOf0AdditionalProperties, document);
      return;
    } else if (refOneOf0AdditionalProperties instanceof EObject) {
      _format((EObject)refOneOf0AdditionalProperties, document);
      return;
    } else if (refOneOf0AdditionalProperties == null) {
      _format((Void)null, document);
      return;
    } else if (refOneOf0AdditionalProperties != null) {
      _format(refOneOf0AdditionalProperties, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(refOneOf0AdditionalProperties, document).toString());
    }
  }
}
