/**
 * generated by Xtext 2.29.0
 */
package githubwf.githubwf.formatting2;

import com.google.inject.Inject;
import githubwf.RefOneOf0AllOf1Not;
import githubwf.RefOneOf0AllOf1NotAbstract;
import githubwf.RefOneOf0AllOf1NotPropertiesAbstract;
import githubwf.RefOneOf0AllOf1NotTypeObject;
import githubwf.githubwf.services.RefOneOf0AllOf1NotGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class RefOneOf0AllOf1NotFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RefOneOf0AllOf1NotGrammarAccess _refOneOf0AllOf1NotGrammarAccess;

  protected void _format(final RefOneOf0AllOf1Not refOneOf0AllOf1Not, @Extension final IFormattableDocument document) {
    document.<RefOneOf0AllOf1NotAbstract>format(refOneOf0AllOf1Not.getRef());
  }

  protected void _format(final RefOneOf0AllOf1NotTypeObject refOneOf0AllOf1NotTypeObject, @Extension final IFormattableDocument document) {
    EList<RefOneOf0AllOf1NotPropertiesAbstract> _ref = refOneOf0AllOf1NotTypeObject.getRef();
    for (final RefOneOf0AllOf1NotPropertiesAbstract refOneOf0AllOf1NotPropertiesAbstract : _ref) {
      document.<RefOneOf0AllOf1NotPropertiesAbstract>format(refOneOf0AllOf1NotPropertiesAbstract);
    }
  }

  public void format(final Object refOneOf0AllOf1NotTypeObject, final IFormattableDocument document) {
    if (refOneOf0AllOf1NotTypeObject instanceof XtextResource) {
      _format((XtextResource)refOneOf0AllOf1NotTypeObject, document);
      return;
    } else if (refOneOf0AllOf1NotTypeObject instanceof RefOneOf0AllOf1NotTypeObject) {
      _format((RefOneOf0AllOf1NotTypeObject)refOneOf0AllOf1NotTypeObject, document);
      return;
    } else if (refOneOf0AllOf1NotTypeObject instanceof RefOneOf0AllOf1Not) {
      _format((RefOneOf0AllOf1Not)refOneOf0AllOf1NotTypeObject, document);
      return;
    } else if (refOneOf0AllOf1NotTypeObject instanceof EObject) {
      _format((EObject)refOneOf0AllOf1NotTypeObject, document);
      return;
    } else if (refOneOf0AllOf1NotTypeObject == null) {
      _format((Void)null, document);
      return;
    } else if (refOneOf0AllOf1NotTypeObject != null) {
      _format(refOneOf0AllOf1NotTypeObject, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(refOneOf0AllOf1NotTypeObject, document).toString());
    }
  }
}
