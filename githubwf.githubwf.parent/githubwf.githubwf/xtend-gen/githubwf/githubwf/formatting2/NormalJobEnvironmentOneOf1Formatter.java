/**
 * generated by Xtext 2.29.0
 */
package githubwf.githubwf.formatting2;

import com.google.inject.Inject;
import githubwf.Environment;
import githubwf.EnvironmentPropertiesAbstract;
import githubwf.NormalJobEnvironmentOneOf1;
import githubwf.githubwf.services.NormalJobEnvironmentOneOf1GrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class NormalJobEnvironmentOneOf1Formatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private NormalJobEnvironmentOneOf1GrammarAccess _normalJobEnvironmentOneOf1GrammarAccess;

  protected void _format(final NormalJobEnvironmentOneOf1 normalJobEnvironmentOneOf1, @Extension final IFormattableDocument document) {
    document.<Environment>format(normalJobEnvironmentOneOf1.getEnvironment());
  }

  protected void _format(final Environment environment, @Extension final IFormattableDocument document) {
    EList<EnvironmentPropertiesAbstract> _environment = environment.getEnvironment();
    for (final EnvironmentPropertiesAbstract environmentPropertiesAbstract : _environment) {
      document.<EnvironmentPropertiesAbstract>format(environmentPropertiesAbstract);
    }
  }

  public void format(final Object environment, final IFormattableDocument document) {
    if (environment instanceof XtextResource) {
      _format((XtextResource)environment, document);
      return;
    } else if (environment instanceof Environment) {
      _format((Environment)environment, document);
      return;
    } else if (environment instanceof NormalJobEnvironmentOneOf1) {
      _format((NormalJobEnvironmentOneOf1)environment, document);
      return;
    } else if (environment instanceof EObject) {
      _format((EObject)environment, document);
      return;
    } else if (environment == null) {
      _format((Void)null, document);
      return;
    } else if (environment != null) {
      _format(environment, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(environment, document).toString());
    }
  }
}
