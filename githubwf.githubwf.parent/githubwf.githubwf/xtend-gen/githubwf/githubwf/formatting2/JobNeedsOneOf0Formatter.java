/**
 * generated by Xtext 2.29.0
 */
package githubwf.githubwf.formatting2;

import com.google.inject.Inject;
import githubwf.JobNeedsOneOf0;
import githubwf.JobNeedsOneOf0Items;
import githubwf.Name;
import githubwf.githubwf.services.JobNeedsOneOf0GrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class JobNeedsOneOf0Formatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private JobNeedsOneOf0GrammarAccess _jobNeedsOneOf0GrammarAccess;

  protected void _format(final JobNeedsOneOf0 jobNeedsOneOf0, @Extension final IFormattableDocument document) {
    EList<JobNeedsOneOf0Items> _jobNeeds = jobNeedsOneOf0.getJobNeeds();
    for (final JobNeedsOneOf0Items jobNeedsOneOf0Items : _jobNeeds) {
      document.<JobNeedsOneOf0Items>format(jobNeedsOneOf0Items);
    }
  }

  protected void _format(final JobNeedsOneOf0Items jobNeedsOneOf0Items, @Extension final IFormattableDocument document) {
    document.<Name>format(jobNeedsOneOf0Items.getItems());
  }

  public void format(final Object jobNeedsOneOf0, final IFormattableDocument document) {
    if (jobNeedsOneOf0 instanceof XtextResource) {
      _format((XtextResource)jobNeedsOneOf0, document);
      return;
    } else if (jobNeedsOneOf0 instanceof JobNeedsOneOf0) {
      _format((JobNeedsOneOf0)jobNeedsOneOf0, document);
      return;
    } else if (jobNeedsOneOf0 instanceof JobNeedsOneOf0Items) {
      _format((JobNeedsOneOf0Items)jobNeedsOneOf0, document);
      return;
    } else if (jobNeedsOneOf0 instanceof EObject) {
      _format((EObject)jobNeedsOneOf0, document);
      return;
    } else if (jobNeedsOneOf0 == null) {
      _format((Void)null, document);
      return;
    } else if (jobNeedsOneOf0 != null) {
      _format(jobNeedsOneOf0, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(jobNeedsOneOf0, document).toString());
    }
  }
}
