/**
 * generated by Xtext 2.23.0
 */
package githubwf.githubwf.formatting2;

import com.google.inject.Inject;
import githubwf.RefOneOf0AllOf0Not;
import githubwf.RefOneOf0AllOf0NotAbstract;
import githubwf.RefOneOf0AllOf0NotPropertiesAbstract;
import githubwf.RefOneOf0AllOf0NotTypeObject;
import githubwf.githubwf.services.RefOneOf0AllOf0NotGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class RefOneOf0AllOf0NotFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RefOneOf0AllOf0NotGrammarAccess _refOneOf0AllOf0NotGrammarAccess;
  
  protected void _format(final RefOneOf0AllOf0Not refOneOf0AllOf0Not, @Extension final IFormattableDocument document) {
    document.<RefOneOf0AllOf0NotAbstract>format(refOneOf0AllOf0Not.getRef());
  }
  
  protected void _format(final RefOneOf0AllOf0NotTypeObject refOneOf0AllOf0NotTypeObject, @Extension final IFormattableDocument document) {
    EList<RefOneOf0AllOf0NotPropertiesAbstract> _ref = refOneOf0AllOf0NotTypeObject.getRef();
    for (final RefOneOf0AllOf0NotPropertiesAbstract refOneOf0AllOf0NotPropertiesAbstract : _ref) {
      document.<RefOneOf0AllOf0NotPropertiesAbstract>format(refOneOf0AllOf0NotPropertiesAbstract);
    }
  }
  
  public void format(final Object refOneOf0AllOf0NotTypeObject, final IFormattableDocument document) {
    if (refOneOf0AllOf0NotTypeObject instanceof XtextResource) {
      _format((XtextResource)refOneOf0AllOf0NotTypeObject, document);
      return;
    } else if (refOneOf0AllOf0NotTypeObject instanceof RefOneOf0AllOf0NotTypeObject) {
      _format((RefOneOf0AllOf0NotTypeObject)refOneOf0AllOf0NotTypeObject, document);
      return;
    } else if (refOneOf0AllOf0NotTypeObject instanceof RefOneOf0AllOf0Not) {
      _format((RefOneOf0AllOf0Not)refOneOf0AllOf0NotTypeObject, document);
      return;
    } else if (refOneOf0AllOf0NotTypeObject instanceof EObject) {
      _format((EObject)refOneOf0AllOf0NotTypeObject, document);
      return;
    } else if (refOneOf0AllOf0NotTypeObject == null) {
      _format((Void)null, document);
      return;
    } else if (refOneOf0AllOf0NotTypeObject != null) {
      _format(refOneOf0AllOf0NotTypeObject, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(refOneOf0AllOf0NotTypeObject, document).toString());
    }
  }
}
