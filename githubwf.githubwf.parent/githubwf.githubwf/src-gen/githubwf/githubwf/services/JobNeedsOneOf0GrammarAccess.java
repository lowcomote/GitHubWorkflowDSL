/*
 * generated by Xtext 2.29.0
 */
package githubwf.githubwf.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JobNeedsOneOf0GrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class JobNeedsOneOf0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.JobNeedsOneOf0.JobNeedsOneOf0");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cJobNeedsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJobNeedsJobNeedsOneOf0ItemsParserRuleCall_1_0 = (RuleCall)cJobNeedsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cJobNeedsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cJobNeedsJobNeedsOneOf0ItemsParserRuleCall_2_1_0 = (RuleCall)cJobNeedsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////EClass JobNeedsOneOf0
		//JobNeedsOneOf0 returns JobNeedsOneOf0:
		//            //EReference is not a keyword
		//            '['jobNeeds+=JobNeedsOneOf0Items ( "," jobNeeds+=JobNeedsOneOf0Items)* ']'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		////EReference is not a keyword
		//'['jobNeeds+=JobNeedsOneOf0Items ( "," jobNeeds+=JobNeedsOneOf0Items)* ']'
		public Group getGroup() { return cGroup; }
		
		////EReference is not a keyword
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//jobNeeds+=JobNeedsOneOf0Items
		public Assignment getJobNeedsAssignment_1() { return cJobNeedsAssignment_1; }
		
		//JobNeedsOneOf0Items
		public RuleCall getJobNeedsJobNeedsOneOf0ItemsParserRuleCall_1_0() { return cJobNeedsJobNeedsOneOf0ItemsParserRuleCall_1_0; }
		
		//( "," jobNeeds+=JobNeedsOneOf0Items)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//jobNeeds+=JobNeedsOneOf0Items
		public Assignment getJobNeedsAssignment_2_1() { return cJobNeedsAssignment_2_1; }
		
		//JobNeedsOneOf0Items
		public RuleCall getJobNeedsJobNeedsOneOf0ItemsParserRuleCall_2_1_0() { return cJobNeedsJobNeedsOneOf0ItemsParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class JobNeedsOneOf0ItemsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.JobNeedsOneOf0.JobNeedsOneOf0Items");
		private final Assignment cItemsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cItemsNameParserRuleCall_0 = (RuleCall)cItemsAssignment.eContents().get(0);
		
		////EClass JobNeedsOneOf0Items
		//JobNeedsOneOf0Items returns JobNeedsOneOf0Items:
		//            //EReference is not a keyword
		//            items=Name
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		////EReference is not a keyword
		//items=Name
		public Assignment getItemsAssignment() { return cItemsAssignment; }
		
		//Name
		public RuleCall getItemsNameParserRuleCall_0() { return cItemsNameParserRuleCall_0; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.JobNeedsOneOf0.Name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		////EClass Name
		//Name returns Name:
		//    {Name}
		//    //Keyword´s Name
		//    name=EString
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Name}
		////Keyword´s Name
		//name=EString
		public Group getGroup() { return cGroup; }
		
		//{Name}
		public Action getNameAction_0() { return cNameAction_0; }
		
		////Keyword´s Name
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.JobNeedsOneOf0.EString");
		private final RuleCall cVALID_STRINGParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EString returns ecore::EString:
		//    VALID_STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//VALID_STRING
		public RuleCall getVALID_STRINGParserRuleCall() { return cVALID_STRINGParserRuleCall; }
	}
	public class VALID_STRINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.JobNeedsOneOf0.VALID_STRING");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//VALID_STRING: STRING  ;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	
	
	private final JobNeedsOneOf0Elements pJobNeedsOneOf0;
	private final JobNeedsOneOf0ItemsElements pJobNeedsOneOf0Items;
	private final NameElements pName;
	private final EStringElements pEString;
	private final TerminalRule tINT;
	private final VALID_STRINGElements pVALID_STRING;
	private final TerminalRule tSTRING;
	private final TerminalRule tE_INT;
	private final TerminalRule tE_DOUBLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JobNeedsOneOf0GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pJobNeedsOneOf0 = new JobNeedsOneOf0Elements();
		this.pJobNeedsOneOf0Items = new JobNeedsOneOf0ItemsElements();
		this.pName = new NameElements();
		this.pEString = new EStringElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.JobNeedsOneOf0.INT");
		this.pVALID_STRING = new VALID_STRINGElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.JobNeedsOneOf0.STRING");
		this.tE_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.JobNeedsOneOf0.E_INT");
		this.tE_DOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.JobNeedsOneOf0.E_DOUBLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("githubwf.githubwf.JobNeedsOneOf0".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////EClass JobNeedsOneOf0
	//JobNeedsOneOf0 returns JobNeedsOneOf0:
	//            //EReference is not a keyword
	//            '['jobNeeds+=JobNeedsOneOf0Items ( "," jobNeeds+=JobNeedsOneOf0Items)* ']'
	//    ;
	public JobNeedsOneOf0Elements getJobNeedsOneOf0Access() {
		return pJobNeedsOneOf0;
	}
	
	public ParserRule getJobNeedsOneOf0Rule() {
		return getJobNeedsOneOf0Access().getRule();
	}
	
	////EClass JobNeedsOneOf0Items
	//JobNeedsOneOf0Items returns JobNeedsOneOf0Items:
	//            //EReference is not a keyword
	//            items=Name
	//    ;
	public JobNeedsOneOf0ItemsElements getJobNeedsOneOf0ItemsAccess() {
		return pJobNeedsOneOf0Items;
	}
	
	public ParserRule getJobNeedsOneOf0ItemsRule() {
		return getJobNeedsOneOf0ItemsAccess().getRule();
	}
	
	////EClass Name
	//Name returns Name:
	//    {Name}
	//    //Keyword´s Name
	//    name=EString
	//    ;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    VALID_STRING;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	///**
	// * In JSON the first digit of an integer can not be 0, unless it is 0 itself.
	// */
	//@Override
	//terminal INT returns ecore::EInt:
	//    ('0' |  (('1'..'9') ('0'..'9')*))
	//;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//VALID_STRING: STRING  ;
	public VALID_STRINGElements getVALID_STRINGAccess() {
		return pVALID_STRING;
	}
	
	public ParserRule getVALID_STRINGRule() {
		return getVALID_STRINGAccess().getRule();
	}
	
	///**
	// * In JSON the single quote for String is not admitted
	// */
	//@Override
	//terminal STRING:
	//    '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"'
	//;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal E_INT :
	//    '-'? INT;
	public TerminalRule getE_INTRule() {
		return tE_INT;
	}
	
	//terminal E_DOUBLE :
	//    '-'? INT ('.' INT+)? (('E'|'e') ('+'|'-')? INT)?
	//;
	public TerminalRule getE_DOUBLERule() {
		return tE_DOUBLE;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
