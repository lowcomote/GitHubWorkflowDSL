/*
 * generated by Xtext 2.29.0
 */
package githubwf.githubwf.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class NormalJobEnvironmentOneOf1GrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class NormalJobEnvironmentOneOf1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.NormalJobEnvironmentOneOf1.NormalJobEnvironmentOneOf1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnvironmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEnvironmentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEnvironmentEnvironmentParserRuleCall_2_0 = (RuleCall)cEnvironmentAssignment_2.eContents().get(0);
		
		////EClass NormalJobEnvironmentOneOf1
		//NormalJobEnvironmentOneOf1 returns NormalJobEnvironmentOneOf1:
		//            //Keywords
		//            '"environment"' ':'
		//            environment=Environment
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		////Keywords
		//'"environment"' ':'
		//environment=Environment
		public Group getGroup() { return cGroup; }
		
		////Keywords
		//'"environment"'
		public Keyword getEnvironmentKeyword_0() { return cEnvironmentKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//environment=Environment
		public Assignment getEnvironmentAssignment_2() { return cEnvironmentAssignment_2; }
		
		//Environment
		public RuleCall getEnvironmentEnvironmentParserRuleCall_2_0() { return cEnvironmentEnvironmentParserRuleCall_2_0; }
	}
	public class EnvironmentPropertiesAbstractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.NormalJobEnvironmentOneOf1.EnvironmentPropertiesAbstract");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnvironmentNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnvironmentUrlParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EnvironmentPropertiesAbstract returns EnvironmentPropertiesAbstract:
		//    EnvironmentName | EnvironmentUrl;
		@Override public ParserRule getRule() { return rule; }
		
		//EnvironmentName | EnvironmentUrl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EnvironmentName
		public RuleCall getEnvironmentNameParserRuleCall_0() { return cEnvironmentNameParserRuleCall_0; }
		
		//EnvironmentUrl
		public RuleCall getEnvironmentUrlParserRuleCall_1() { return cEnvironmentUrlParserRuleCall_1; }
	}
	public class EnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.NormalJobEnvironmentOneOf1.Environment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnvironmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cEnvironmentAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEnvironmentEnvironmentPropertiesAbstractParserRuleCall_2_0_0 = (RuleCall)cEnvironmentAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cEnvironmentAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cEnvironmentEnvironmentPropertiesAbstractParserRuleCall_2_1_1_0 = (RuleCall)cEnvironmentAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////EClass Environment
		//Environment returns Environment:
		//    {Environment}
		//            //EReference is not a keyword
		//            '{'(environment+=EnvironmentPropertiesAbstract ( "," environment+=EnvironmentPropertiesAbstract)* )?'}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Environment}
		//        //EReference is not a keyword
		//        '{'(environment+=EnvironmentPropertiesAbstract ( "," environment+=EnvironmentPropertiesAbstract)* )?'}'
		public Group getGroup() { return cGroup; }
		
		//{Environment}
		public Action getEnvironmentAction_0() { return cEnvironmentAction_0; }
		
		////EReference is not a keyword
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(environment+=EnvironmentPropertiesAbstract ( "," environment+=EnvironmentPropertiesAbstract)* )?
		public Group getGroup_2() { return cGroup_2; }
		
		//environment+=EnvironmentPropertiesAbstract
		public Assignment getEnvironmentAssignment_2_0() { return cEnvironmentAssignment_2_0; }
		
		//EnvironmentPropertiesAbstract
		public RuleCall getEnvironmentEnvironmentPropertiesAbstractParserRuleCall_2_0_0() { return cEnvironmentEnvironmentPropertiesAbstractParserRuleCall_2_0_0; }
		
		//( "," environment+=EnvironmentPropertiesAbstract)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//environment+=EnvironmentPropertiesAbstract
		public Assignment getEnvironmentAssignment_2_1_1() { return cEnvironmentAssignment_2_1_1; }
		
		//EnvironmentPropertiesAbstract
		public RuleCall getEnvironmentEnvironmentPropertiesAbstractParserRuleCall_2_1_1_0() { return cEnvironmentEnvironmentPropertiesAbstractParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class EnvironmentNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.NormalJobEnvironmentOneOf1.EnvironmentName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnvironmentNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		////EClass EnvironmentName
		//EnvironmentName returns EnvironmentName:
		//    {EnvironmentName}
		//    //Keyword´s Name
		//    //Keywords
		//    '"name"' ':'
		//    name=EString
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{EnvironmentName}
		////Keyword´s Name
		////Keywords
		//'"name"' ':'
		//name=EString
		public Group getGroup() { return cGroup; }
		
		//{EnvironmentName}
		public Action getEnvironmentNameAction_0() { return cEnvironmentNameAction_0; }
		
		////Keyword´s Name
		////Keywords
		//'"name"'
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
	}
	public class EnvironmentUrlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.NormalJobEnvironmentOneOf1.EnvironmentUrl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUrlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUrlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUrlEStringParserRuleCall_2_0 = (RuleCall)cUrlAssignment_2.eContents().get(0);
		
		////EClass EnvironmentUrl
		//EnvironmentUrl returns EnvironmentUrl:
		//            //Keywords
		//            '"url"' ':'
		//            url=EString
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		////Keywords
		//'"url"' ':'
		//url=EString
		public Group getGroup() { return cGroup; }
		
		////Keywords
		//'"url"'
		public Keyword getUrlKeyword_0() { return cUrlKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//url=EString
		public Assignment getUrlAssignment_2() { return cUrlAssignment_2; }
		
		//EString
		public RuleCall getUrlEStringParserRuleCall_2_0() { return cUrlEStringParserRuleCall_2_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.NormalJobEnvironmentOneOf1.EString");
		private final RuleCall cVALID_STRINGParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EString returns ecore::EString:
		//    VALID_STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//VALID_STRING
		public RuleCall getVALID_STRINGParserRuleCall() { return cVALID_STRINGParserRuleCall; }
	}
	public class VALID_STRINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.NormalJobEnvironmentOneOf1.VALID_STRING");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKEYWORDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VALID_STRING: STRING  | KEYWORD ;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING  | KEYWORD
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//KEYWORD
		public RuleCall getKEYWORDParserRuleCall_1() { return cKEYWORDParserRuleCall_1; }
	}
	public class KEYWORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.NormalJobEnvironmentOneOf1.KEYWORD");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEnvironmentKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cUrlKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//KEYWORD:
		//'"environment"'  |
		//'"name"'  |
		//'"url"'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'"environment"'  |
		//'"name"'  |
		//'"url"'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'"environment"'
		public Keyword getEnvironmentKeyword_0() { return cEnvironmentKeyword_0; }
		
		//'"name"'
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }
		
		//'"url"'
		public Keyword getUrlKeyword_2() { return cUrlKeyword_2; }
	}
	
	
	private final NormalJobEnvironmentOneOf1Elements pNormalJobEnvironmentOneOf1;
	private final EnvironmentPropertiesAbstractElements pEnvironmentPropertiesAbstract;
	private final EnvironmentElements pEnvironment;
	private final EnvironmentNameElements pEnvironmentName;
	private final EnvironmentUrlElements pEnvironmentUrl;
	private final EStringElements pEString;
	private final TerminalRule tINT;
	private final VALID_STRINGElements pVALID_STRING;
	private final TerminalRule tSTRING;
	private final TerminalRule tE_INT;
	private final KEYWORDElements pKEYWORD;
	private final TerminalRule tE_DOUBLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public NormalJobEnvironmentOneOf1GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pNormalJobEnvironmentOneOf1 = new NormalJobEnvironmentOneOf1Elements();
		this.pEnvironmentPropertiesAbstract = new EnvironmentPropertiesAbstractElements();
		this.pEnvironment = new EnvironmentElements();
		this.pEnvironmentName = new EnvironmentNameElements();
		this.pEnvironmentUrl = new EnvironmentUrlElements();
		this.pEString = new EStringElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.NormalJobEnvironmentOneOf1.INT");
		this.pVALID_STRING = new VALID_STRINGElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.NormalJobEnvironmentOneOf1.STRING");
		this.tE_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.NormalJobEnvironmentOneOf1.E_INT");
		this.pKEYWORD = new KEYWORDElements();
		this.tE_DOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.NormalJobEnvironmentOneOf1.E_DOUBLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("githubwf.githubwf.NormalJobEnvironmentOneOf1".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////EClass NormalJobEnvironmentOneOf1
	//NormalJobEnvironmentOneOf1 returns NormalJobEnvironmentOneOf1:
	//            //Keywords
	//            '"environment"' ':'
	//            environment=Environment
	//    ;
	public NormalJobEnvironmentOneOf1Elements getNormalJobEnvironmentOneOf1Access() {
		return pNormalJobEnvironmentOneOf1;
	}
	
	public ParserRule getNormalJobEnvironmentOneOf1Rule() {
		return getNormalJobEnvironmentOneOf1Access().getRule();
	}
	
	//EnvironmentPropertiesAbstract returns EnvironmentPropertiesAbstract:
	//    EnvironmentName | EnvironmentUrl;
	public EnvironmentPropertiesAbstractElements getEnvironmentPropertiesAbstractAccess() {
		return pEnvironmentPropertiesAbstract;
	}
	
	public ParserRule getEnvironmentPropertiesAbstractRule() {
		return getEnvironmentPropertiesAbstractAccess().getRule();
	}
	
	////EClass Environment
	//Environment returns Environment:
	//    {Environment}
	//            //EReference is not a keyword
	//            '{'(environment+=EnvironmentPropertiesAbstract ( "," environment+=EnvironmentPropertiesAbstract)* )?'}'
	//    ;
	public EnvironmentElements getEnvironmentAccess() {
		return pEnvironment;
	}
	
	public ParserRule getEnvironmentRule() {
		return getEnvironmentAccess().getRule();
	}
	
	////EClass EnvironmentName
	//EnvironmentName returns EnvironmentName:
	//    {EnvironmentName}
	//    //Keyword´s Name
	//    //Keywords
	//    '"name"' ':'
	//    name=EString
	//    ;
	public EnvironmentNameElements getEnvironmentNameAccess() {
		return pEnvironmentName;
	}
	
	public ParserRule getEnvironmentNameRule() {
		return getEnvironmentNameAccess().getRule();
	}
	
	////EClass EnvironmentUrl
	//EnvironmentUrl returns EnvironmentUrl:
	//            //Keywords
	//            '"url"' ':'
	//            url=EString
	//    ;
	public EnvironmentUrlElements getEnvironmentUrlAccess() {
		return pEnvironmentUrl;
	}
	
	public ParserRule getEnvironmentUrlRule() {
		return getEnvironmentUrlAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    VALID_STRING;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	///**
	// * In JSON the first digit of an integer can not be 0, unless it is 0 itself.
	// */
	//@Override
	//terminal INT returns ecore::EInt:
	//    ('0' |  (('1'..'9') ('0'..'9')*))
	//;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//VALID_STRING: STRING  | KEYWORD ;
	public VALID_STRINGElements getVALID_STRINGAccess() {
		return pVALID_STRING;
	}
	
	public ParserRule getVALID_STRINGRule() {
		return getVALID_STRINGAccess().getRule();
	}
	
	///**
	// * In JSON the single quote for String is not admitted
	// */
	//@Override
	//terminal STRING:
	//    '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"'
	//;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal E_INT :
	//    '-'? INT;
	public TerminalRule getE_INTRule() {
		return tE_INT;
	}
	
	//KEYWORD:
	//'"environment"'  |
	//'"name"'  |
	//'"url"'
	//;
	public KEYWORDElements getKEYWORDAccess() {
		return pKEYWORD;
	}
	
	public ParserRule getKEYWORDRule() {
		return getKEYWORDAccess().getRule();
	}
	
	//terminal E_DOUBLE :
	//    '-'? INT ('.' INT+)? (('E'|'e') ('+'|'-')? INT)?
	//;
	public TerminalRule getE_DOUBLERule() {
		return tE_DOUBLE;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
