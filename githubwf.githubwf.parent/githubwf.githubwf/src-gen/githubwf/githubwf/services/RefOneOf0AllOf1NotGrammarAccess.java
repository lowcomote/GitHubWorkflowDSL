/*
 * generated by Xtext 2.23.0
 */
package githubwf.githubwf.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RefOneOf0AllOf1NotGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RefOneOf0AllOf1NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.RefOneOf0AllOf1Not");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRefRefOneOf0AllOf1NotAbstractParserRuleCall_0 = (RuleCall)cRefAssignment.eContents().get(0);
		
		////EClass RefOneOf0AllOf1Not
		//RefOneOf0AllOf1Not:
		//	ref=RefOneOf0AllOf1NotAbstract;
		@Override public ParserRule getRule() { return rule; }
		
		////EReference is not a keyword
		//ref=RefOneOf0AllOf1NotAbstract
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//RefOneOf0AllOf1NotAbstract
		public RuleCall getRefRefOneOf0AllOf1NotAbstractParserRuleCall_0() { return cRefRefOneOf0AllOf1NotAbstractParserRuleCall_0; }
	}
	public class RefOneOf0AllOf1NotAbstractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.RefOneOf0AllOf1NotAbstract");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRefOneOf0AllOf1NotTypeNumberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRefOneOf0AllOf1NotTypeStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRefOneOf0AllOf1NotTypeIntegerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRefOneOf0AllOf1NotTypeBooleanParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRefOneOf0AllOf1NotTypeObjectParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRefOneOf0AllOf1NotTypeArrayParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRefOneOf0AllOf1NotTypeNullParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//RefOneOf0AllOf1NotAbstract:
		//	=> RefOneOf0AllOf1NotTypeNumber | RefOneOf0AllOf1NotTypeString | RefOneOf0AllOf1NotTypeInteger |
		//	RefOneOf0AllOf1NotTypeBoolean | RefOneOf0AllOf1NotTypeObject | RefOneOf0AllOf1NotTypeArray |
		//	RefOneOf0AllOf1NotTypeNull;
		@Override public ParserRule getRule() { return rule; }
		
		//=> RefOneOf0AllOf1NotTypeNumber | RefOneOf0AllOf1NotTypeString | RefOneOf0AllOf1NotTypeInteger |
		//RefOneOf0AllOf1NotTypeBoolean | RefOneOf0AllOf1NotTypeObject | RefOneOf0AllOf1NotTypeArray |
		//RefOneOf0AllOf1NotTypeNull
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> RefOneOf0AllOf1NotTypeNumber
		public RuleCall getRefOneOf0AllOf1NotTypeNumberParserRuleCall_0() { return cRefOneOf0AllOf1NotTypeNumberParserRuleCall_0; }
		
		//RefOneOf0AllOf1NotTypeString
		public RuleCall getRefOneOf0AllOf1NotTypeStringParserRuleCall_1() { return cRefOneOf0AllOf1NotTypeStringParserRuleCall_1; }
		
		//RefOneOf0AllOf1NotTypeInteger
		public RuleCall getRefOneOf0AllOf1NotTypeIntegerParserRuleCall_2() { return cRefOneOf0AllOf1NotTypeIntegerParserRuleCall_2; }
		
		//RefOneOf0AllOf1NotTypeBoolean
		public RuleCall getRefOneOf0AllOf1NotTypeBooleanParserRuleCall_3() { return cRefOneOf0AllOf1NotTypeBooleanParserRuleCall_3; }
		
		//RefOneOf0AllOf1NotTypeObject
		public RuleCall getRefOneOf0AllOf1NotTypeObjectParserRuleCall_4() { return cRefOneOf0AllOf1NotTypeObjectParserRuleCall_4; }
		
		//RefOneOf0AllOf1NotTypeArray
		public RuleCall getRefOneOf0AllOf1NotTypeArrayParserRuleCall_5() { return cRefOneOf0AllOf1NotTypeArrayParserRuleCall_5; }
		
		//RefOneOf0AllOf1NotTypeNull
		public RuleCall getRefOneOf0AllOf1NotTypeNullParserRuleCall_6() { return cRefOneOf0AllOf1NotTypeNullParserRuleCall_6; }
	}
	public class RefOneOf0AllOf1NotPropertiesAbstractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.RefOneOf0AllOf1NotPropertiesAbstract");
		private final RuleCall cRefOneOf0AllOf1NotAdditionalPropertiesParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RefOneOf0AllOf1NotPropertiesAbstract:
		//	=> RefOneOf0AllOf1NotAdditionalProperties;
		@Override public ParserRule getRule() { return rule; }
		
		//=> RefOneOf0AllOf1NotAdditionalProperties
		public RuleCall getRefOneOf0AllOf1NotAdditionalPropertiesParserRuleCall() { return cRefOneOf0AllOf1NotAdditionalPropertiesParserRuleCall; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNullValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumberValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cObjectValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBooleanValueParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Value jsonMM::Value:
		//	StringValue | ArrayValue | NullValue | NumberValue | ObjectValue | BooleanValue;
		@Override public ParserRule getRule() { return rule; }
		
		//StringValue | ArrayValue | NullValue | NumberValue | ObjectValue | BooleanValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }
		
		//ArrayValue
		public RuleCall getArrayValueParserRuleCall_1() { return cArrayValueParserRuleCall_1; }
		
		//NullValue
		public RuleCall getNullValueParserRuleCall_2() { return cNullValueParserRuleCall_2; }
		
		//NumberValue
		public RuleCall getNumberValueParserRuleCall_3() { return cNumberValueParserRuleCall_3; }
		
		//ObjectValue
		public RuleCall getObjectValueParserRuleCall_4() { return cObjectValueParserRuleCall_4; }
		
		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_5() { return cBooleanValueParserRuleCall_5; }
	}
	public class RefOneOf0AllOf1NotTypeStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.RefOneOf0AllOf1NotTypeString");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRefEStringParserRuleCall_0 = (RuleCall)cRefAssignment.eContents().get(0);
		
		////EClass RefOneOf0AllOf1NotTypeString
		//RefOneOf0AllOf1NotTypeString:
		//	ref=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=EString
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//EString
		public RuleCall getRefEStringParserRuleCall_0() { return cRefEStringParserRuleCall_0; }
	}
	public class RefOneOf0AllOf1NotTypeIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.RefOneOf0AllOf1NotTypeInteger");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRefEDoubleObjectParserRuleCall_0 = (RuleCall)cRefAssignment.eContents().get(0);
		
		////EClass RefOneOf0AllOf1NotTypeInteger
		//RefOneOf0AllOf1NotTypeInteger:
		//	ref=EDoubleObject;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=EDoubleObject
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//EDoubleObject
		public RuleCall getRefEDoubleObjectParserRuleCall_0() { return cRefEDoubleObjectParserRuleCall_0; }
	}
	public class RefOneOf0AllOf1NotTypeNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.RefOneOf0AllOf1NotTypeNumber");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRefEDoubleObjectParserRuleCall_0 = (RuleCall)cRefAssignment.eContents().get(0);
		
		////EClass RefOneOf0AllOf1NotTypeNumber
		//RefOneOf0AllOf1NotTypeNumber:
		//	ref=EDoubleObject;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=EDoubleObject
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//EDoubleObject
		public RuleCall getRefEDoubleObjectParserRuleCall_0() { return cRefEDoubleObjectParserRuleCall_0; }
	}
	public class RefOneOf0AllOf1NotTypeBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.RefOneOf0AllOf1NotTypeBoolean");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRefEBooleanObjectParserRuleCall_0 = (RuleCall)cRefAssignment.eContents().get(0);
		
		////EClass RefOneOf0AllOf1NotTypeBoolean
		//RefOneOf0AllOf1NotTypeBoolean:
		//	ref=EBooleanObject;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=EBooleanObject
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//EBooleanObject
		public RuleCall getRefEBooleanObjectParserRuleCall_0() { return cRefEBooleanObjectParserRuleCall_0; }
	}
	public class RefOneOf0AllOf1NotTypeObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.RefOneOf0AllOf1NotTypeObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRefOneOf0AllOf1NotTypeObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cRefRefOneOf0AllOf1NotPropertiesAbstractParserRuleCall_2_0_0 = (RuleCall)cRefAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cRefAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cRefRefOneOf0AllOf1NotPropertiesAbstractParserRuleCall_2_1_1_0 = (RuleCall)cRefAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////EClass RefOneOf0AllOf1NotTypeObject
		//RefOneOf0AllOf1NotTypeObject:
		//	{RefOneOf0AllOf1NotTypeObject}
		//	//EReference is not a keyword
		//	'{' (ref+=RefOneOf0AllOf1NotPropertiesAbstract ("," ref+=RefOneOf0AllOf1NotPropertiesAbstract)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{RefOneOf0AllOf1NotTypeObject} //EReference is not a keyword
		//'{' (ref+=RefOneOf0AllOf1NotPropertiesAbstract ("," ref+=RefOneOf0AllOf1NotPropertiesAbstract)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{RefOneOf0AllOf1NotTypeObject}
		public Action getRefOneOf0AllOf1NotTypeObjectAction_0() { return cRefOneOf0AllOf1NotTypeObjectAction_0; }
		
		////EReference is not a keyword
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(ref+=RefOneOf0AllOf1NotPropertiesAbstract ("," ref+=RefOneOf0AllOf1NotPropertiesAbstract)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//ref+=RefOneOf0AllOf1NotPropertiesAbstract
		public Assignment getRefAssignment_2_0() { return cRefAssignment_2_0; }
		
		//RefOneOf0AllOf1NotPropertiesAbstract
		public RuleCall getRefRefOneOf0AllOf1NotPropertiesAbstractParserRuleCall_2_0_0() { return cRefRefOneOf0AllOf1NotPropertiesAbstractParserRuleCall_2_0_0; }
		
		//("," ref+=RefOneOf0AllOf1NotPropertiesAbstract)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//ref+=RefOneOf0AllOf1NotPropertiesAbstract
		public Assignment getRefAssignment_2_1_1() { return cRefAssignment_2_1_1; }
		
		//RefOneOf0AllOf1NotPropertiesAbstract
		public RuleCall getRefRefOneOf0AllOf1NotPropertiesAbstractParserRuleCall_2_1_1_0() { return cRefRefOneOf0AllOf1NotPropertiesAbstractParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class RefOneOf0AllOf1NotTypeArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.RefOneOf0AllOf1NotTypeArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRefOneOf0AllOf1NotTypeArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cRefRefOneOf0AllOf1NotItemsParserRuleCall_2_0_0 = (RuleCall)cRefAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cRefAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cRefRefOneOf0AllOf1NotItemsParserRuleCall_2_1_1_0 = (RuleCall)cRefAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////EClass RefOneOf0AllOf1NotTypeArray
		//RefOneOf0AllOf1NotTypeArray:
		//	{RefOneOf0AllOf1NotTypeArray}
		//	//EReference is not a keyword
		//	'[' (ref+=RefOneOf0AllOf1NotItems ("," ref+=RefOneOf0AllOf1NotItems)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{RefOneOf0AllOf1NotTypeArray} //EReference is not a keyword
		//'[' (ref+=RefOneOf0AllOf1NotItems ("," ref+=RefOneOf0AllOf1NotItems)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{RefOneOf0AllOf1NotTypeArray}
		public Action getRefOneOf0AllOf1NotTypeArrayAction_0() { return cRefOneOf0AllOf1NotTypeArrayAction_0; }
		
		////EReference is not a keyword
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(ref+=RefOneOf0AllOf1NotItems ("," ref+=RefOneOf0AllOf1NotItems)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//ref+=RefOneOf0AllOf1NotItems
		public Assignment getRefAssignment_2_0() { return cRefAssignment_2_0; }
		
		//RefOneOf0AllOf1NotItems
		public RuleCall getRefRefOneOf0AllOf1NotItemsParserRuleCall_2_0_0() { return cRefRefOneOf0AllOf1NotItemsParserRuleCall_2_0_0; }
		
		//("," ref+=RefOneOf0AllOf1NotItems)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//ref+=RefOneOf0AllOf1NotItems
		public Assignment getRefAssignment_2_1_1() { return cRefAssignment_2_1_1; }
		
		//RefOneOf0AllOf1NotItems
		public RuleCall getRefRefOneOf0AllOf1NotItemsParserRuleCall_2_1_1_0() { return cRefRefOneOf0AllOf1NotItemsParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class RefOneOf0AllOf1NotTypeNullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.RefOneOf0AllOf1NotTypeNull");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRefNullValueParserRuleCall_0 = (RuleCall)cRefAssignment.eContents().get(0);
		
		////EClass RefOneOf0AllOf1NotTypeNull
		//RefOneOf0AllOf1NotTypeNull:
		//	ref=NullValue;
		@Override public ParserRule getRule() { return rule; }
		
		////EReference is not a keyword
		//ref=NullValue
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//NullValue
		public RuleCall getRefNullValueParserRuleCall_0() { return cRefNullValueParserRuleCall_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.EString");
		private final RuleCall cVALID_STRINGParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EString:
		//	VALID_STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//VALID_STRING
		public RuleCall getVALID_STRINGParserRuleCall() { return cVALID_STRINGParserRuleCall; }
	}
	public class EDoubleObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.EDoubleObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cE_INTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cE_DOUBLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EDoubleObject ecore::EDoubleObject:
		//	E_INT | E_DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//E_INT | E_DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//E_INT
		public RuleCall getE_INTTerminalRuleCall_0() { return cE_INTTerminalRuleCall_0; }
		
		//E_DOUBLE
		public RuleCall getE_DOUBLETerminalRuleCall_1() { return cE_DOUBLETerminalRuleCall_1; }
	}
	public class EBooleanObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.EBooleanObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBooleanObject ecore::EBooleanObject:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class RefOneOf0AllOf1NotAdditionalPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.RefOneOf0AllOf1NotAdditionalProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyEStringParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAdditionalPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAdditionalPropertiesJsonDocumentParserRuleCall_2_0 = (RuleCall)cAdditionalPropertiesAssignment_2.eContents().get(0);
		
		////EClass RefOneOf0AllOf1NotAdditionalProperties
		//RefOneOf0AllOf1NotAdditionalProperties:
		//	key=EString
		//	':'
		//	//EReference is not a keyword
		//	additionalProperties=JsonDocument;
		@Override public ParserRule getRule() { return rule; }
		
		////KeyValue
		//key=EString ':' //EReference is not a keyword
		//additionalProperties=JsonDocument
		public Group getGroup() { return cGroup; }
		
		////KeyValue
		//key=EString
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//EString
		public RuleCall getKeyEStringParserRuleCall_0_0() { return cKeyEStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		////EReference is not a keyword
		//additionalProperties=JsonDocument
		public Assignment getAdditionalPropertiesAssignment_2() { return cAdditionalPropertiesAssignment_2; }
		
		//JsonDocument
		public RuleCall getAdditionalPropertiesJsonDocumentParserRuleCall_2_0() { return cAdditionalPropertiesJsonDocumentParserRuleCall_2_0; }
	}
	public class JsonDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.JsonDocument");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////EClass JsonDocument
		//JsonDocument jsonMM::JsonDocument:
		//	value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		////EReference is not a keyword
		//value=Value
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_0() { return cValueValueParserRuleCall_0; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////EClass StringValue
		//StringValue jsonMM::StringValue:
		//	value=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EString
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_0() { return cValueEStringParserRuleCall_0; }
	}
	public class ArrayValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.ArrayValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValueValueParserRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_2_1_1_0 = (RuleCall)cValueAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////EClass ArrayValue
		//ArrayValue jsonMM::ArrayValue:
		//	{jsonMM::ArrayValue}
		//	//EReference is not a keyword
		//	'[' (value+=Value ("," value+=Value)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{jsonMM::ArrayValue} //EReference is not a keyword
		//'[' (value+=Value ("," value+=Value)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{jsonMM::ArrayValue}
		public Action getArrayValueAction_0() { return cArrayValueAction_0; }
		
		////EReference is not a keyword
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(value+=Value ("," value+=Value)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//value+=Value
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0_0() { return cValueValueParserRuleCall_2_0_0; }
		
		//("," value+=Value)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//value+=Value
		public Assignment getValueAssignment_2_1_1() { return cValueAssignment_2_1_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_1_1_0() { return cValueValueParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class NullValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.NullValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNullEnumEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////EClass NullValue
		//NullValue jsonMM::NullValue:
		//	value=NullEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//value=NullEnum
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//NullEnum
		public RuleCall getValueNullEnumEnumRuleCall_0() { return cValueNullEnumEnumRuleCall_0; }
	}
	public class NumberValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.NumberValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////EClass NumberValue
		//NumberValue jsonMM::NumberValue:
		//	value=EDouble;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EDouble
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_0() { return cValueEDoubleParserRuleCall_0; }
	}
	public class ObjectValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.ObjectValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cKeyvaluepairAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cKeyvaluepairKeyValuePairParserRuleCall_2_0_0 = (RuleCall)cKeyvaluepairAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cKeyvaluepairAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cKeyvaluepairKeyValuePairParserRuleCall_2_1_1_0 = (RuleCall)cKeyvaluepairAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////EClass ObjectValue
		//ObjectValue jsonMM::ObjectValue:
		//	{jsonMM::ObjectValue}
		//	'{' (keyvaluepair+=KeyValuePair ("," keyvaluepair+=KeyValuePair)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{jsonMM::ObjectValue} '{' (keyvaluepair+=KeyValuePair ("," keyvaluepair+=KeyValuePair)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{jsonMM::ObjectValue}
		public Action getObjectValueAction_0() { return cObjectValueAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(keyvaluepair+=KeyValuePair ("," keyvaluepair+=KeyValuePair)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//keyvaluepair+=KeyValuePair
		public Assignment getKeyvaluepairAssignment_2_0() { return cKeyvaluepairAssignment_2_0; }
		
		//KeyValuePair
		public RuleCall getKeyvaluepairKeyValuePairParserRuleCall_2_0_0() { return cKeyvaluepairKeyValuePairParserRuleCall_2_0_0; }
		
		//("," keyvaluepair+=KeyValuePair)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//keyvaluepair+=KeyValuePair
		public Assignment getKeyvaluepairAssignment_2_1_1() { return cKeyvaluepairAssignment_2_1_1; }
		
		//KeyValuePair
		public RuleCall getKeyvaluepairKeyValuePairParserRuleCall_2_1_1_0() { return cKeyvaluepairKeyValuePairParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEBooleanParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////EClass BooleanValue
		//BooleanValue jsonMM::BooleanValue:
		//	value=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EBoolean
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_0() { return cValueEBooleanParserRuleCall_0; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.EDouble");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cE_INTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cE_DOUBLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EDouble ecore::EDouble:
		//	E_INT | E_DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//E_INT | E_DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//E_INT
		public RuleCall getE_INTTerminalRuleCall_0() { return cE_INTTerminalRuleCall_0; }
		
		//E_DOUBLE
		public RuleCall getE_DOUBLETerminalRuleCall_1() { return cE_DOUBLETerminalRuleCall_1; }
	}
	public class KeyValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.KeyValuePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyEStringParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		////EClass KeyValuePair
		//KeyValuePair jsonMM::KeyValuePair:
		//	key=EString
		//	':'
		//	//EReference is not a keyword
		//	value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		////KeyValue
		//key=EString ':' //EReference is not a keyword
		//value=Value
		public Group getGroup() { return cGroup; }
		
		////KeyValue
		//key=EString
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//EString
		public RuleCall getKeyEStringParserRuleCall_0_0() { return cKeyEStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		////EReference is not a keyword
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class RefOneOf0AllOf1NotItemsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.RefOneOf0AllOf1NotItems");
		private final Assignment cItemsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cItemsJsonDocumentParserRuleCall_0 = (RuleCall)cItemsAssignment.eContents().get(0);
		
		////EClass RefOneOf0AllOf1NotItems
		//RefOneOf0AllOf1NotItems:
		//	items=JsonDocument;
		@Override public ParserRule getRule() { return rule; }
		
		////EReference is not a keyword
		//items=JsonDocument
		public Assignment getItemsAssignment() { return cItemsAssignment; }
		
		//JsonDocument
		public RuleCall getItemsJsonDocumentParserRuleCall_0() { return cItemsJsonDocumentParserRuleCall_0; }
	}
	public class VALID_STRINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.VALID_STRING");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//VALID_STRING:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	
	public class NullEnumElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.NullEnum");
		private final EnumLiteralDeclaration cNullEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNullNullKeyword_0 = (Keyword)cNullEnumLiteralDeclaration.eContents().get(0);
		
		//enum NullEnum returns jsonMM::NullEnum:
		//	null;
		public EnumRule getRule() { return rule; }
		
		//null
		public EnumLiteralDeclaration getNullEnumLiteralDeclaration() { return cNullEnumLiteralDeclaration; }
		
		//'null'
		public Keyword getNullNullKeyword_0() { return cNullNullKeyword_0; }
	}
	
	private final RefOneOf0AllOf1NotElements pRefOneOf0AllOf1Not;
	private final RefOneOf0AllOf1NotAbstractElements pRefOneOf0AllOf1NotAbstract;
	private final RefOneOf0AllOf1NotPropertiesAbstractElements pRefOneOf0AllOf1NotPropertiesAbstract;
	private final ValueElements pValue;
	private final RefOneOf0AllOf1NotTypeStringElements pRefOneOf0AllOf1NotTypeString;
	private final RefOneOf0AllOf1NotTypeIntegerElements pRefOneOf0AllOf1NotTypeInteger;
	private final RefOneOf0AllOf1NotTypeNumberElements pRefOneOf0AllOf1NotTypeNumber;
	private final RefOneOf0AllOf1NotTypeBooleanElements pRefOneOf0AllOf1NotTypeBoolean;
	private final RefOneOf0AllOf1NotTypeObjectElements pRefOneOf0AllOf1NotTypeObject;
	private final RefOneOf0AllOf1NotTypeArrayElements pRefOneOf0AllOf1NotTypeArray;
	private final RefOneOf0AllOf1NotTypeNullElements pRefOneOf0AllOf1NotTypeNull;
	private final EStringElements pEString;
	private final EDoubleObjectElements pEDoubleObject;
	private final EBooleanObjectElements pEBooleanObject;
	private final RefOneOf0AllOf1NotAdditionalPropertiesElements pRefOneOf0AllOf1NotAdditionalProperties;
	private final JsonDocumentElements pJsonDocument;
	private final StringValueElements pStringValue;
	private final ArrayValueElements pArrayValue;
	private final NullValueElements pNullValue;
	private final NumberValueElements pNumberValue;
	private final ObjectValueElements pObjectValue;
	private final BooleanValueElements pBooleanValue;
	private final NullEnumElements eNullEnum;
	private final EDoubleElements pEDouble;
	private final KeyValuePairElements pKeyValuePair;
	private final EBooleanElements pEBoolean;
	private final RefOneOf0AllOf1NotItemsElements pRefOneOf0AllOf1NotItems;
	private final TerminalRule tINT;
	private final VALID_STRINGElements pVALID_STRING;
	private final TerminalRule tSTRING;
	private final TerminalRule tE_INT;
	private final TerminalRule tE_DOUBLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RefOneOf0AllOf1NotGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRefOneOf0AllOf1Not = new RefOneOf0AllOf1NotElements();
		this.pRefOneOf0AllOf1NotAbstract = new RefOneOf0AllOf1NotAbstractElements();
		this.pRefOneOf0AllOf1NotPropertiesAbstract = new RefOneOf0AllOf1NotPropertiesAbstractElements();
		this.pValue = new ValueElements();
		this.pRefOneOf0AllOf1NotTypeString = new RefOneOf0AllOf1NotTypeStringElements();
		this.pRefOneOf0AllOf1NotTypeInteger = new RefOneOf0AllOf1NotTypeIntegerElements();
		this.pRefOneOf0AllOf1NotTypeNumber = new RefOneOf0AllOf1NotTypeNumberElements();
		this.pRefOneOf0AllOf1NotTypeBoolean = new RefOneOf0AllOf1NotTypeBooleanElements();
		this.pRefOneOf0AllOf1NotTypeObject = new RefOneOf0AllOf1NotTypeObjectElements();
		this.pRefOneOf0AllOf1NotTypeArray = new RefOneOf0AllOf1NotTypeArrayElements();
		this.pRefOneOf0AllOf1NotTypeNull = new RefOneOf0AllOf1NotTypeNullElements();
		this.pEString = new EStringElements();
		this.pEDoubleObject = new EDoubleObjectElements();
		this.pEBooleanObject = new EBooleanObjectElements();
		this.pRefOneOf0AllOf1NotAdditionalProperties = new RefOneOf0AllOf1NotAdditionalPropertiesElements();
		this.pJsonDocument = new JsonDocumentElements();
		this.pStringValue = new StringValueElements();
		this.pArrayValue = new ArrayValueElements();
		this.pNullValue = new NullValueElements();
		this.pNumberValue = new NumberValueElements();
		this.pObjectValue = new ObjectValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.eNullEnum = new NullEnumElements();
		this.pEDouble = new EDoubleElements();
		this.pKeyValuePair = new KeyValuePairElements();
		this.pEBoolean = new EBooleanElements();
		this.pRefOneOf0AllOf1NotItems = new RefOneOf0AllOf1NotItemsElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.INT");
		this.pVALID_STRING = new VALID_STRINGElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.STRING");
		this.tE_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.E_INT");
		this.tE_DOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.RefOneOf0AllOf1Not.E_DOUBLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("githubwf.githubwf.RefOneOf0AllOf1Not".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////EClass RefOneOf0AllOf1Not
	//RefOneOf0AllOf1Not:
	//	ref=RefOneOf0AllOf1NotAbstract;
	public RefOneOf0AllOf1NotElements getRefOneOf0AllOf1NotAccess() {
		return pRefOneOf0AllOf1Not;
	}
	
	public ParserRule getRefOneOf0AllOf1NotRule() {
		return getRefOneOf0AllOf1NotAccess().getRule();
	}
	
	//RefOneOf0AllOf1NotAbstract:
	//	=> RefOneOf0AllOf1NotTypeNumber | RefOneOf0AllOf1NotTypeString | RefOneOf0AllOf1NotTypeInteger |
	//	RefOneOf0AllOf1NotTypeBoolean | RefOneOf0AllOf1NotTypeObject | RefOneOf0AllOf1NotTypeArray |
	//	RefOneOf0AllOf1NotTypeNull;
	public RefOneOf0AllOf1NotAbstractElements getRefOneOf0AllOf1NotAbstractAccess() {
		return pRefOneOf0AllOf1NotAbstract;
	}
	
	public ParserRule getRefOneOf0AllOf1NotAbstractRule() {
		return getRefOneOf0AllOf1NotAbstractAccess().getRule();
	}
	
	//RefOneOf0AllOf1NotPropertiesAbstract:
	//	=> RefOneOf0AllOf1NotAdditionalProperties;
	public RefOneOf0AllOf1NotPropertiesAbstractElements getRefOneOf0AllOf1NotPropertiesAbstractAccess() {
		return pRefOneOf0AllOf1NotPropertiesAbstract;
	}
	
	public ParserRule getRefOneOf0AllOf1NotPropertiesAbstractRule() {
		return getRefOneOf0AllOf1NotPropertiesAbstractAccess().getRule();
	}
	
	//Value jsonMM::Value:
	//	StringValue | ArrayValue | NullValue | NumberValue | ObjectValue | BooleanValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	////EClass RefOneOf0AllOf1NotTypeString
	//RefOneOf0AllOf1NotTypeString:
	//	ref=EString;
	public RefOneOf0AllOf1NotTypeStringElements getRefOneOf0AllOf1NotTypeStringAccess() {
		return pRefOneOf0AllOf1NotTypeString;
	}
	
	public ParserRule getRefOneOf0AllOf1NotTypeStringRule() {
		return getRefOneOf0AllOf1NotTypeStringAccess().getRule();
	}
	
	////EClass RefOneOf0AllOf1NotTypeInteger
	//RefOneOf0AllOf1NotTypeInteger:
	//	ref=EDoubleObject;
	public RefOneOf0AllOf1NotTypeIntegerElements getRefOneOf0AllOf1NotTypeIntegerAccess() {
		return pRefOneOf0AllOf1NotTypeInteger;
	}
	
	public ParserRule getRefOneOf0AllOf1NotTypeIntegerRule() {
		return getRefOneOf0AllOf1NotTypeIntegerAccess().getRule();
	}
	
	////EClass RefOneOf0AllOf1NotTypeNumber
	//RefOneOf0AllOf1NotTypeNumber:
	//	ref=EDoubleObject;
	public RefOneOf0AllOf1NotTypeNumberElements getRefOneOf0AllOf1NotTypeNumberAccess() {
		return pRefOneOf0AllOf1NotTypeNumber;
	}
	
	public ParserRule getRefOneOf0AllOf1NotTypeNumberRule() {
		return getRefOneOf0AllOf1NotTypeNumberAccess().getRule();
	}
	
	////EClass RefOneOf0AllOf1NotTypeBoolean
	//RefOneOf0AllOf1NotTypeBoolean:
	//	ref=EBooleanObject;
	public RefOneOf0AllOf1NotTypeBooleanElements getRefOneOf0AllOf1NotTypeBooleanAccess() {
		return pRefOneOf0AllOf1NotTypeBoolean;
	}
	
	public ParserRule getRefOneOf0AllOf1NotTypeBooleanRule() {
		return getRefOneOf0AllOf1NotTypeBooleanAccess().getRule();
	}
	
	////EClass RefOneOf0AllOf1NotTypeObject
	//RefOneOf0AllOf1NotTypeObject:
	//	{RefOneOf0AllOf1NotTypeObject}
	//	//EReference is not a keyword
	//	'{' (ref+=RefOneOf0AllOf1NotPropertiesAbstract ("," ref+=RefOneOf0AllOf1NotPropertiesAbstract)*)? '}';
	public RefOneOf0AllOf1NotTypeObjectElements getRefOneOf0AllOf1NotTypeObjectAccess() {
		return pRefOneOf0AllOf1NotTypeObject;
	}
	
	public ParserRule getRefOneOf0AllOf1NotTypeObjectRule() {
		return getRefOneOf0AllOf1NotTypeObjectAccess().getRule();
	}
	
	////EClass RefOneOf0AllOf1NotTypeArray
	//RefOneOf0AllOf1NotTypeArray:
	//	{RefOneOf0AllOf1NotTypeArray}
	//	//EReference is not a keyword
	//	'[' (ref+=RefOneOf0AllOf1NotItems ("," ref+=RefOneOf0AllOf1NotItems)*)? ']';
	public RefOneOf0AllOf1NotTypeArrayElements getRefOneOf0AllOf1NotTypeArrayAccess() {
		return pRefOneOf0AllOf1NotTypeArray;
	}
	
	public ParserRule getRefOneOf0AllOf1NotTypeArrayRule() {
		return getRefOneOf0AllOf1NotTypeArrayAccess().getRule();
	}
	
	////EClass RefOneOf0AllOf1NotTypeNull
	//RefOneOf0AllOf1NotTypeNull:
	//	ref=NullValue;
	public RefOneOf0AllOf1NotTypeNullElements getRefOneOf0AllOf1NotTypeNullAccess() {
		return pRefOneOf0AllOf1NotTypeNull;
	}
	
	public ParserRule getRefOneOf0AllOf1NotTypeNullRule() {
		return getRefOneOf0AllOf1NotTypeNullAccess().getRule();
	}
	
	//EString:
	//	VALID_STRING;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EDoubleObject ecore::EDoubleObject:
	//	E_INT | E_DOUBLE;
	public EDoubleObjectElements getEDoubleObjectAccess() {
		return pEDoubleObject;
	}
	
	public ParserRule getEDoubleObjectRule() {
		return getEDoubleObjectAccess().getRule();
	}
	
	//EBooleanObject ecore::EBooleanObject:
	//	'true' | 'false';
	public EBooleanObjectElements getEBooleanObjectAccess() {
		return pEBooleanObject;
	}
	
	public ParserRule getEBooleanObjectRule() {
		return getEBooleanObjectAccess().getRule();
	}
	
	////EClass RefOneOf0AllOf1NotAdditionalProperties
	//RefOneOf0AllOf1NotAdditionalProperties:
	//	key=EString
	//	':'
	//	//EReference is not a keyword
	//	additionalProperties=JsonDocument;
	public RefOneOf0AllOf1NotAdditionalPropertiesElements getRefOneOf0AllOf1NotAdditionalPropertiesAccess() {
		return pRefOneOf0AllOf1NotAdditionalProperties;
	}
	
	public ParserRule getRefOneOf0AllOf1NotAdditionalPropertiesRule() {
		return getRefOneOf0AllOf1NotAdditionalPropertiesAccess().getRule();
	}
	
	////EClass JsonDocument
	//JsonDocument jsonMM::JsonDocument:
	//	value=Value;
	public JsonDocumentElements getJsonDocumentAccess() {
		return pJsonDocument;
	}
	
	public ParserRule getJsonDocumentRule() {
		return getJsonDocumentAccess().getRule();
	}
	
	////EClass StringValue
	//StringValue jsonMM::StringValue:
	//	value=EString;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	////EClass ArrayValue
	//ArrayValue jsonMM::ArrayValue:
	//	{jsonMM::ArrayValue}
	//	//EReference is not a keyword
	//	'[' (value+=Value ("," value+=Value)*)? ']';
	public ArrayValueElements getArrayValueAccess() {
		return pArrayValue;
	}
	
	public ParserRule getArrayValueRule() {
		return getArrayValueAccess().getRule();
	}
	
	////EClass NullValue
	//NullValue jsonMM::NullValue:
	//	value=NullEnum;
	public NullValueElements getNullValueAccess() {
		return pNullValue;
	}
	
	public ParserRule getNullValueRule() {
		return getNullValueAccess().getRule();
	}
	
	////EClass NumberValue
	//NumberValue jsonMM::NumberValue:
	//	value=EDouble;
	public NumberValueElements getNumberValueAccess() {
		return pNumberValue;
	}
	
	public ParserRule getNumberValueRule() {
		return getNumberValueAccess().getRule();
	}
	
	////EClass ObjectValue
	//ObjectValue jsonMM::ObjectValue:
	//	{jsonMM::ObjectValue}
	//	'{' (keyvaluepair+=KeyValuePair ("," keyvaluepair+=KeyValuePair)*)?
	//	'}';
	public ObjectValueElements getObjectValueAccess() {
		return pObjectValue;
	}
	
	public ParserRule getObjectValueRule() {
		return getObjectValueAccess().getRule();
	}
	
	////EClass BooleanValue
	//BooleanValue jsonMM::BooleanValue:
	//	value=EBoolean;
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//enum NullEnum returns jsonMM::NullEnum:
	//	null;
	public NullEnumElements getNullEnumAccess() {
		return eNullEnum;
	}
	
	public EnumRule getNullEnumRule() {
		return getNullEnumAccess().getRule();
	}
	
	//EDouble ecore::EDouble:
	//	E_INT | E_DOUBLE;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	////EClass KeyValuePair
	//KeyValuePair jsonMM::KeyValuePair:
	//	key=EString
	//	':'
	//	//EReference is not a keyword
	//	value=Value;
	public KeyValuePairElements getKeyValuePairAccess() {
		return pKeyValuePair;
	}
	
	public ParserRule getKeyValuePairRule() {
		return getKeyValuePairAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	////EClass RefOneOf0AllOf1NotItems
	//RefOneOf0AllOf1NotItems:
	//	items=JsonDocument;
	public RefOneOf0AllOf1NotItemsElements getRefOneOf0AllOf1NotItemsAccess() {
		return pRefOneOf0AllOf1NotItems;
	}
	
	public ParserRule getRefOneOf0AllOf1NotItemsRule() {
		return getRefOneOf0AllOf1NotItemsAccess().getRule();
	}
	
	//@Override
	//terminal INT returns ecore::EInt:
	//	'0' | '1'..'9' '0'..'9'*;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//VALID_STRING:
	//	STRING;
	public VALID_STRINGElements getVALID_STRINGAccess() {
		return pVALID_STRING;
	}
	
	public ParserRule getVALID_STRINGRule() {
		return getVALID_STRINGAccess().getRule();
	}
	
	//@Override
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal E_INT:
	//	'-'? INT;
	public TerminalRule getE_INTRule() {
		return tE_INT;
	}
	
	//terminal E_DOUBLE:
	//	'-'? INT ('.' INT+)? (('E' | 'e') ('+' | '-')? INT)?;
	public TerminalRule getE_DOUBLERule() {
		return tE_DOUBLE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
