/*
 * generated by Xtext 2.23.0
 */
package githubwf.githubwf.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ReusableWorkflowCallJobSecretsOneOf0GrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ReusableWorkflowCallJobSecretsOneOf0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.ReusableWorkflowCallJobSecretsOneOf0");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSecretsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSecretsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSecretsEnvParserRuleCall_2_0 = (RuleCall)cSecretsAssignment_2.eContents().get(0);
		
		////EClass ReusableWorkflowCallJobSecretsOneOf0
		//ReusableWorkflowCallJobSecretsOneOf0: //Keywords
		//	'"secrets"' ':' secrets=Env;
		@Override public ParserRule getRule() { return rule; }
		
		////Keywords
		//'"secrets"' ':' secrets=Env
		public Group getGroup() { return cGroup; }
		
		////Keywords
		//'"secrets"'
		public Keyword getSecretsKeyword_0() { return cSecretsKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//secrets=Env
		public Assignment getSecretsAssignment_2() { return cSecretsAssignment_2; }
		
		//Env
		public RuleCall getSecretsEnvParserRuleCall_2_0() { return cSecretsEnvParserRuleCall_2_0; }
	}
	public class EnvAbstractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.EnvAbstract");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnvTypeNumberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnvTypeStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnvTypeIntegerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnvTypeBooleanParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnvTypeObjectParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEnvTypeArrayParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEnvTypeNullParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//EnvAbstract:
		//	=> EnvTypeNumber | EnvTypeString | EnvTypeInteger | EnvTypeBoolean | EnvTypeObject | EnvTypeArray | EnvTypeNull;
		@Override public ParserRule getRule() { return rule; }
		
		//=> EnvTypeNumber | EnvTypeString | EnvTypeInteger | EnvTypeBoolean | EnvTypeObject | EnvTypeArray | EnvTypeNull
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> EnvTypeNumber
		public RuleCall getEnvTypeNumberParserRuleCall_0() { return cEnvTypeNumberParserRuleCall_0; }
		
		//EnvTypeString
		public RuleCall getEnvTypeStringParserRuleCall_1() { return cEnvTypeStringParserRuleCall_1; }
		
		//EnvTypeInteger
		public RuleCall getEnvTypeIntegerParserRuleCall_2() { return cEnvTypeIntegerParserRuleCall_2; }
		
		//EnvTypeBoolean
		public RuleCall getEnvTypeBooleanParserRuleCall_3() { return cEnvTypeBooleanParserRuleCall_3; }
		
		//EnvTypeObject
		public RuleCall getEnvTypeObjectParserRuleCall_4() { return cEnvTypeObjectParserRuleCall_4; }
		
		//EnvTypeArray
		public RuleCall getEnvTypeArrayParserRuleCall_5() { return cEnvTypeArrayParserRuleCall_5; }
		
		//EnvTypeNull
		public RuleCall getEnvTypeNullParserRuleCall_6() { return cEnvTypeNullParserRuleCall_6; }
	}
	public class EnvPropertiesAbstractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.EnvPropertiesAbstract");
		private final RuleCall cEnvAdditionalPropertiesParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EnvPropertiesAbstract:
		//	=> EnvAdditionalProperties;
		@Override public ParserRule getRule() { return rule; }
		
		//=> EnvAdditionalProperties
		public RuleCall getEnvAdditionalPropertiesParserRuleCall() { return cEnvAdditionalPropertiesParserRuleCall; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNullValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumberValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cObjectValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBooleanValueParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Value jsonMM::Value:
		//	StringValue | ArrayValue | NullValue | NumberValue | ObjectValue | BooleanValue;
		@Override public ParserRule getRule() { return rule; }
		
		//StringValue | ArrayValue | NullValue | NumberValue | ObjectValue | BooleanValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }
		
		//ArrayValue
		public RuleCall getArrayValueParserRuleCall_1() { return cArrayValueParserRuleCall_1; }
		
		//NullValue
		public RuleCall getNullValueParserRuleCall_2() { return cNullValueParserRuleCall_2; }
		
		//NumberValue
		public RuleCall getNumberValueParserRuleCall_3() { return cNumberValueParserRuleCall_3; }
		
		//ObjectValue
		public RuleCall getObjectValueParserRuleCall_4() { return cObjectValueParserRuleCall_4; }
		
		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_5() { return cBooleanValueParserRuleCall_5; }
	}
	public class EnvElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.Env");
		private final Assignment cEnvAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEnvEnvAbstractParserRuleCall_0 = (RuleCall)cEnvAssignment.eContents().get(0);
		
		////EClass Env
		//Env:
		//	env=EnvAbstract;
		@Override public ParserRule getRule() { return rule; }
		
		////EReference is not a keyword
		//env=EnvAbstract
		public Assignment getEnvAssignment() { return cEnvAssignment; }
		
		//EnvAbstract
		public RuleCall getEnvEnvAbstractParserRuleCall_0() { return cEnvEnvAbstractParserRuleCall_0; }
	}
	public class EnvTypeStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.EnvTypeString");
		private final Assignment cEnvAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEnvEStringParserRuleCall_0 = (RuleCall)cEnvAssignment.eContents().get(0);
		
		////EClass EnvTypeString
		//EnvTypeString:
		//	env=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//env=EString
		public Assignment getEnvAssignment() { return cEnvAssignment; }
		
		//EString
		public RuleCall getEnvEStringParserRuleCall_0() { return cEnvEStringParserRuleCall_0; }
	}
	public class EnvTypeIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.EnvTypeInteger");
		private final Assignment cEnvAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEnvEDoubleObjectParserRuleCall_0 = (RuleCall)cEnvAssignment.eContents().get(0);
		
		////EClass EnvTypeInteger
		//EnvTypeInteger:
		//	env=EDoubleObject;
		@Override public ParserRule getRule() { return rule; }
		
		//env=EDoubleObject
		public Assignment getEnvAssignment() { return cEnvAssignment; }
		
		//EDoubleObject
		public RuleCall getEnvEDoubleObjectParserRuleCall_0() { return cEnvEDoubleObjectParserRuleCall_0; }
	}
	public class EnvTypeNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.EnvTypeNumber");
		private final Assignment cEnvAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEnvEDoubleObjectParserRuleCall_0 = (RuleCall)cEnvAssignment.eContents().get(0);
		
		////EClass EnvTypeNumber
		//EnvTypeNumber:
		//	env=EDoubleObject;
		@Override public ParserRule getRule() { return rule; }
		
		//env=EDoubleObject
		public Assignment getEnvAssignment() { return cEnvAssignment; }
		
		//EDoubleObject
		public RuleCall getEnvEDoubleObjectParserRuleCall_0() { return cEnvEDoubleObjectParserRuleCall_0; }
	}
	public class EnvTypeBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.EnvTypeBoolean");
		private final Assignment cEnvAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEnvEBooleanObjectParserRuleCall_0 = (RuleCall)cEnvAssignment.eContents().get(0);
		
		////EClass EnvTypeBoolean
		//EnvTypeBoolean:
		//	env=EBooleanObject;
		@Override public ParserRule getRule() { return rule; }
		
		//env=EBooleanObject
		public Assignment getEnvAssignment() { return cEnvAssignment; }
		
		//EBooleanObject
		public RuleCall getEnvEBooleanObjectParserRuleCall_0() { return cEnvEBooleanObjectParserRuleCall_0; }
	}
	public class EnvTypeObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.EnvTypeObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnvTypeObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cEnvAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEnvEnvPropertiesAbstractParserRuleCall_2_0_0 = (RuleCall)cEnvAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cEnvAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cEnvEnvPropertiesAbstractParserRuleCall_2_1_1_0 = (RuleCall)cEnvAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////EClass EnvTypeObject
		//EnvTypeObject:
		//	{EnvTypeObject}
		//	//EReference is not a keyword
		//	'{' (env+=EnvPropertiesAbstract ("," env+=EnvPropertiesAbstract)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{EnvTypeObject} //EReference is not a keyword
		//'{' (env+=EnvPropertiesAbstract ("," env+=EnvPropertiesAbstract)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{EnvTypeObject}
		public Action getEnvTypeObjectAction_0() { return cEnvTypeObjectAction_0; }
		
		////EReference is not a keyword
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(env+=EnvPropertiesAbstract ("," env+=EnvPropertiesAbstract)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//env+=EnvPropertiesAbstract
		public Assignment getEnvAssignment_2_0() { return cEnvAssignment_2_0; }
		
		//EnvPropertiesAbstract
		public RuleCall getEnvEnvPropertiesAbstractParserRuleCall_2_0_0() { return cEnvEnvPropertiesAbstractParserRuleCall_2_0_0; }
		
		//("," env+=EnvPropertiesAbstract)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//env+=EnvPropertiesAbstract
		public Assignment getEnvAssignment_2_1_1() { return cEnvAssignment_2_1_1; }
		
		//EnvPropertiesAbstract
		public RuleCall getEnvEnvPropertiesAbstractParserRuleCall_2_1_1_0() { return cEnvEnvPropertiesAbstractParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class EnvTypeArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.EnvTypeArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnvTypeArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cEnvAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEnvEnvItemsParserRuleCall_2_0_0 = (RuleCall)cEnvAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cEnvAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cEnvEnvItemsParserRuleCall_2_1_1_0 = (RuleCall)cEnvAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////EClass EnvTypeArray
		//EnvTypeArray:
		//	{EnvTypeArray}
		//	//EReference is not a keyword
		//	'[' (env+=EnvItems ("," env+=EnvItems)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{EnvTypeArray} //EReference is not a keyword
		//'[' (env+=EnvItems ("," env+=EnvItems)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{EnvTypeArray}
		public Action getEnvTypeArrayAction_0() { return cEnvTypeArrayAction_0; }
		
		////EReference is not a keyword
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(env+=EnvItems ("," env+=EnvItems)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//env+=EnvItems
		public Assignment getEnvAssignment_2_0() { return cEnvAssignment_2_0; }
		
		//EnvItems
		public RuleCall getEnvEnvItemsParserRuleCall_2_0_0() { return cEnvEnvItemsParserRuleCall_2_0_0; }
		
		//("," env+=EnvItems)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//env+=EnvItems
		public Assignment getEnvAssignment_2_1_1() { return cEnvAssignment_2_1_1; }
		
		//EnvItems
		public RuleCall getEnvEnvItemsParserRuleCall_2_1_1_0() { return cEnvEnvItemsParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class EnvTypeNullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.EnvTypeNull");
		private final Assignment cEnvAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEnvNullValueParserRuleCall_0 = (RuleCall)cEnvAssignment.eContents().get(0);
		
		////EClass EnvTypeNull
		//EnvTypeNull:
		//	env=NullValue;
		@Override public ParserRule getRule() { return rule; }
		
		////EReference is not a keyword
		//env=NullValue
		public Assignment getEnvAssignment() { return cEnvAssignment; }
		
		//NullValue
		public RuleCall getEnvNullValueParserRuleCall_0() { return cEnvNullValueParserRuleCall_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.EString");
		private final RuleCall cVALID_STRINGParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EString:
		//	VALID_STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//VALID_STRING
		public RuleCall getVALID_STRINGParserRuleCall() { return cVALID_STRINGParserRuleCall; }
	}
	public class EDoubleObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.EDoubleObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cE_INTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cE_DOUBLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EDoubleObject ecore::EDoubleObject:
		//	E_INT | E_DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//E_INT | E_DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//E_INT
		public RuleCall getE_INTTerminalRuleCall_0() { return cE_INTTerminalRuleCall_0; }
		
		//E_DOUBLE
		public RuleCall getE_DOUBLETerminalRuleCall_1() { return cE_DOUBLETerminalRuleCall_1; }
	}
	public class EBooleanObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.EBooleanObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBooleanObject ecore::EBooleanObject:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EnvAdditionalPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.EnvAdditionalProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyEStringParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAdditionalPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAdditionalPropertiesJsonDocumentParserRuleCall_2_0 = (RuleCall)cAdditionalPropertiesAssignment_2.eContents().get(0);
		
		////EClass EnvAdditionalProperties
		//EnvAdditionalProperties:
		//	key=EString
		//	':'
		//	//EReference is not a keyword
		//	additionalProperties=JsonDocument;
		@Override public ParserRule getRule() { return rule; }
		
		////KeyValue
		//key=EString ':' //EReference is not a keyword
		//additionalProperties=JsonDocument
		public Group getGroup() { return cGroup; }
		
		////KeyValue
		//key=EString
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//EString
		public RuleCall getKeyEStringParserRuleCall_0_0() { return cKeyEStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		////EReference is not a keyword
		//additionalProperties=JsonDocument
		public Assignment getAdditionalPropertiesAssignment_2() { return cAdditionalPropertiesAssignment_2; }
		
		//JsonDocument
		public RuleCall getAdditionalPropertiesJsonDocumentParserRuleCall_2_0() { return cAdditionalPropertiesJsonDocumentParserRuleCall_2_0; }
	}
	public class JsonDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.JsonDocument");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////EClass JsonDocument
		//JsonDocument jsonMM::JsonDocument:
		//	value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		////EReference is not a keyword
		//value=Value
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_0() { return cValueValueParserRuleCall_0; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////EClass StringValue
		//StringValue jsonMM::StringValue:
		//	value=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EString
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_0() { return cValueEStringParserRuleCall_0; }
	}
	public class ArrayValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.ArrayValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValueValueParserRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_2_1_1_0 = (RuleCall)cValueAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////EClass ArrayValue
		//ArrayValue jsonMM::ArrayValue:
		//	{jsonMM::ArrayValue}
		//	//EReference is not a keyword
		//	'[' (value+=Value ("," value+=Value)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{jsonMM::ArrayValue} //EReference is not a keyword
		//'[' (value+=Value ("," value+=Value)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{jsonMM::ArrayValue}
		public Action getArrayValueAction_0() { return cArrayValueAction_0; }
		
		////EReference is not a keyword
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(value+=Value ("," value+=Value)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//value+=Value
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0_0() { return cValueValueParserRuleCall_2_0_0; }
		
		//("," value+=Value)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//value+=Value
		public Assignment getValueAssignment_2_1_1() { return cValueAssignment_2_1_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_1_1_0() { return cValueValueParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class NullValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.NullValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNullEnumEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////EClass NullValue
		//NullValue jsonMM::NullValue:
		//	value=NullEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//value=NullEnum
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//NullEnum
		public RuleCall getValueNullEnumEnumRuleCall_0() { return cValueNullEnumEnumRuleCall_0; }
	}
	public class NumberValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.NumberValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////EClass NumberValue
		//NumberValue jsonMM::NumberValue:
		//	value=EDouble;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EDouble
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_0() { return cValueEDoubleParserRuleCall_0; }
	}
	public class ObjectValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.ObjectValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cKeyvaluepairAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cKeyvaluepairKeyValuePairParserRuleCall_2_0_0 = (RuleCall)cKeyvaluepairAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cKeyvaluepairAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cKeyvaluepairKeyValuePairParserRuleCall_2_1_1_0 = (RuleCall)cKeyvaluepairAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////EClass ObjectValue
		//ObjectValue jsonMM::ObjectValue:
		//	{jsonMM::ObjectValue}
		//	'{' (keyvaluepair+=KeyValuePair ("," keyvaluepair+=KeyValuePair)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{jsonMM::ObjectValue} '{' (keyvaluepair+=KeyValuePair ("," keyvaluepair+=KeyValuePair)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{jsonMM::ObjectValue}
		public Action getObjectValueAction_0() { return cObjectValueAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(keyvaluepair+=KeyValuePair ("," keyvaluepair+=KeyValuePair)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//keyvaluepair+=KeyValuePair
		public Assignment getKeyvaluepairAssignment_2_0() { return cKeyvaluepairAssignment_2_0; }
		
		//KeyValuePair
		public RuleCall getKeyvaluepairKeyValuePairParserRuleCall_2_0_0() { return cKeyvaluepairKeyValuePairParserRuleCall_2_0_0; }
		
		//("," keyvaluepair+=KeyValuePair)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//keyvaluepair+=KeyValuePair
		public Assignment getKeyvaluepairAssignment_2_1_1() { return cKeyvaluepairAssignment_2_1_1; }
		
		//KeyValuePair
		public RuleCall getKeyvaluepairKeyValuePairParserRuleCall_2_1_1_0() { return cKeyvaluepairKeyValuePairParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEBooleanParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////EClass BooleanValue
		//BooleanValue jsonMM::BooleanValue:
		//	value=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EBoolean
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_0() { return cValueEBooleanParserRuleCall_0; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.EDouble");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cE_INTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cE_DOUBLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EDouble ecore::EDouble:
		//	E_INT | E_DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//E_INT | E_DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//E_INT
		public RuleCall getE_INTTerminalRuleCall_0() { return cE_INTTerminalRuleCall_0; }
		
		//E_DOUBLE
		public RuleCall getE_DOUBLETerminalRuleCall_1() { return cE_DOUBLETerminalRuleCall_1; }
	}
	public class KeyValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.KeyValuePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyEStringParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		////EClass KeyValuePair
		//KeyValuePair jsonMM::KeyValuePair:
		//	key=EString
		//	':'
		//	//EReference is not a keyword
		//	value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		////KeyValue
		//key=EString ':' //EReference is not a keyword
		//value=Value
		public Group getGroup() { return cGroup; }
		
		////KeyValue
		//key=EString
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//EString
		public RuleCall getKeyEStringParserRuleCall_0_0() { return cKeyEStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		////EReference is not a keyword
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EnvItemsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.EnvItems");
		private final Assignment cItemsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cItemsJsonDocumentParserRuleCall_0 = (RuleCall)cItemsAssignment.eContents().get(0);
		
		////EClass EnvItems
		//EnvItems:
		//	items=JsonDocument;
		@Override public ParserRule getRule() { return rule; }
		
		////EReference is not a keyword
		//items=JsonDocument
		public Assignment getItemsAssignment() { return cItemsAssignment; }
		
		//JsonDocument
		public RuleCall getItemsJsonDocumentParserRuleCall_0() { return cItemsJsonDocumentParserRuleCall_0; }
	}
	public class VALID_STRINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.VALID_STRING");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKEYWORDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VALID_STRING:
		//	STRING | KEYWORD;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | KEYWORD
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//KEYWORD
		public RuleCall getKEYWORDParserRuleCall_1() { return cKEYWORDParserRuleCall_1; }
	}
	public class KEYWORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.KEYWORD");
		private final Keyword cSecretsKeyword = (Keyword)rule.eContents().get(1);
		
		//KEYWORD:
		//	'"secrets"';
		@Override public ParserRule getRule() { return rule; }
		
		//'"secrets"'
		public Keyword getSecretsKeyword() { return cSecretsKeyword; }
	}
	
	public class NullEnumElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.NullEnum");
		private final EnumLiteralDeclaration cNullEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNullNullKeyword_0 = (Keyword)cNullEnumLiteralDeclaration.eContents().get(0);
		
		//enum NullEnum returns jsonMM::NullEnum:
		//	null;
		public EnumRule getRule() { return rule; }
		
		//null
		public EnumLiteralDeclaration getNullEnumLiteralDeclaration() { return cNullEnumLiteralDeclaration; }
		
		//'null'
		public Keyword getNullNullKeyword_0() { return cNullNullKeyword_0; }
	}
	
	private final ReusableWorkflowCallJobSecretsOneOf0Elements pReusableWorkflowCallJobSecretsOneOf0;
	private final EnvAbstractElements pEnvAbstract;
	private final EnvPropertiesAbstractElements pEnvPropertiesAbstract;
	private final ValueElements pValue;
	private final EnvElements pEnv;
	private final EnvTypeStringElements pEnvTypeString;
	private final EnvTypeIntegerElements pEnvTypeInteger;
	private final EnvTypeNumberElements pEnvTypeNumber;
	private final EnvTypeBooleanElements pEnvTypeBoolean;
	private final EnvTypeObjectElements pEnvTypeObject;
	private final EnvTypeArrayElements pEnvTypeArray;
	private final EnvTypeNullElements pEnvTypeNull;
	private final EStringElements pEString;
	private final EDoubleObjectElements pEDoubleObject;
	private final EBooleanObjectElements pEBooleanObject;
	private final EnvAdditionalPropertiesElements pEnvAdditionalProperties;
	private final JsonDocumentElements pJsonDocument;
	private final StringValueElements pStringValue;
	private final ArrayValueElements pArrayValue;
	private final NullValueElements pNullValue;
	private final NumberValueElements pNumberValue;
	private final ObjectValueElements pObjectValue;
	private final BooleanValueElements pBooleanValue;
	private final NullEnumElements eNullEnum;
	private final EDoubleElements pEDouble;
	private final KeyValuePairElements pKeyValuePair;
	private final EBooleanElements pEBoolean;
	private final EnvItemsElements pEnvItems;
	private final TerminalRule tINT;
	private final VALID_STRINGElements pVALID_STRING;
	private final TerminalRule tSTRING;
	private final TerminalRule tE_INT;
	private final KEYWORDElements pKEYWORD;
	private final TerminalRule tE_DOUBLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ReusableWorkflowCallJobSecretsOneOf0GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pReusableWorkflowCallJobSecretsOneOf0 = new ReusableWorkflowCallJobSecretsOneOf0Elements();
		this.pEnvAbstract = new EnvAbstractElements();
		this.pEnvPropertiesAbstract = new EnvPropertiesAbstractElements();
		this.pValue = new ValueElements();
		this.pEnv = new EnvElements();
		this.pEnvTypeString = new EnvTypeStringElements();
		this.pEnvTypeInteger = new EnvTypeIntegerElements();
		this.pEnvTypeNumber = new EnvTypeNumberElements();
		this.pEnvTypeBoolean = new EnvTypeBooleanElements();
		this.pEnvTypeObject = new EnvTypeObjectElements();
		this.pEnvTypeArray = new EnvTypeArrayElements();
		this.pEnvTypeNull = new EnvTypeNullElements();
		this.pEString = new EStringElements();
		this.pEDoubleObject = new EDoubleObjectElements();
		this.pEBooleanObject = new EBooleanObjectElements();
		this.pEnvAdditionalProperties = new EnvAdditionalPropertiesElements();
		this.pJsonDocument = new JsonDocumentElements();
		this.pStringValue = new StringValueElements();
		this.pArrayValue = new ArrayValueElements();
		this.pNullValue = new NullValueElements();
		this.pNumberValue = new NumberValueElements();
		this.pObjectValue = new ObjectValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.eNullEnum = new NullEnumElements();
		this.pEDouble = new EDoubleElements();
		this.pKeyValuePair = new KeyValuePairElements();
		this.pEBoolean = new EBooleanElements();
		this.pEnvItems = new EnvItemsElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.INT");
		this.pVALID_STRING = new VALID_STRINGElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.STRING");
		this.tE_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.E_INT");
		this.pKEYWORD = new KEYWORDElements();
		this.tE_DOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0.E_DOUBLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("githubwf.githubwf.ReusableWorkflowCallJobSecretsOneOf0".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////EClass ReusableWorkflowCallJobSecretsOneOf0
	//ReusableWorkflowCallJobSecretsOneOf0: //Keywords
	//	'"secrets"' ':' secrets=Env;
	public ReusableWorkflowCallJobSecretsOneOf0Elements getReusableWorkflowCallJobSecretsOneOf0Access() {
		return pReusableWorkflowCallJobSecretsOneOf0;
	}
	
	public ParserRule getReusableWorkflowCallJobSecretsOneOf0Rule() {
		return getReusableWorkflowCallJobSecretsOneOf0Access().getRule();
	}
	
	//EnvAbstract:
	//	=> EnvTypeNumber | EnvTypeString | EnvTypeInteger | EnvTypeBoolean | EnvTypeObject | EnvTypeArray | EnvTypeNull;
	public EnvAbstractElements getEnvAbstractAccess() {
		return pEnvAbstract;
	}
	
	public ParserRule getEnvAbstractRule() {
		return getEnvAbstractAccess().getRule();
	}
	
	//EnvPropertiesAbstract:
	//	=> EnvAdditionalProperties;
	public EnvPropertiesAbstractElements getEnvPropertiesAbstractAccess() {
		return pEnvPropertiesAbstract;
	}
	
	public ParserRule getEnvPropertiesAbstractRule() {
		return getEnvPropertiesAbstractAccess().getRule();
	}
	
	//Value jsonMM::Value:
	//	StringValue | ArrayValue | NullValue | NumberValue | ObjectValue | BooleanValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	////EClass Env
	//Env:
	//	env=EnvAbstract;
	public EnvElements getEnvAccess() {
		return pEnv;
	}
	
	public ParserRule getEnvRule() {
		return getEnvAccess().getRule();
	}
	
	////EClass EnvTypeString
	//EnvTypeString:
	//	env=EString;
	public EnvTypeStringElements getEnvTypeStringAccess() {
		return pEnvTypeString;
	}
	
	public ParserRule getEnvTypeStringRule() {
		return getEnvTypeStringAccess().getRule();
	}
	
	////EClass EnvTypeInteger
	//EnvTypeInteger:
	//	env=EDoubleObject;
	public EnvTypeIntegerElements getEnvTypeIntegerAccess() {
		return pEnvTypeInteger;
	}
	
	public ParserRule getEnvTypeIntegerRule() {
		return getEnvTypeIntegerAccess().getRule();
	}
	
	////EClass EnvTypeNumber
	//EnvTypeNumber:
	//	env=EDoubleObject;
	public EnvTypeNumberElements getEnvTypeNumberAccess() {
		return pEnvTypeNumber;
	}
	
	public ParserRule getEnvTypeNumberRule() {
		return getEnvTypeNumberAccess().getRule();
	}
	
	////EClass EnvTypeBoolean
	//EnvTypeBoolean:
	//	env=EBooleanObject;
	public EnvTypeBooleanElements getEnvTypeBooleanAccess() {
		return pEnvTypeBoolean;
	}
	
	public ParserRule getEnvTypeBooleanRule() {
		return getEnvTypeBooleanAccess().getRule();
	}
	
	////EClass EnvTypeObject
	//EnvTypeObject:
	//	{EnvTypeObject}
	//	//EReference is not a keyword
	//	'{' (env+=EnvPropertiesAbstract ("," env+=EnvPropertiesAbstract)*)? '}';
	public EnvTypeObjectElements getEnvTypeObjectAccess() {
		return pEnvTypeObject;
	}
	
	public ParserRule getEnvTypeObjectRule() {
		return getEnvTypeObjectAccess().getRule();
	}
	
	////EClass EnvTypeArray
	//EnvTypeArray:
	//	{EnvTypeArray}
	//	//EReference is not a keyword
	//	'[' (env+=EnvItems ("," env+=EnvItems)*)? ']';
	public EnvTypeArrayElements getEnvTypeArrayAccess() {
		return pEnvTypeArray;
	}
	
	public ParserRule getEnvTypeArrayRule() {
		return getEnvTypeArrayAccess().getRule();
	}
	
	////EClass EnvTypeNull
	//EnvTypeNull:
	//	env=NullValue;
	public EnvTypeNullElements getEnvTypeNullAccess() {
		return pEnvTypeNull;
	}
	
	public ParserRule getEnvTypeNullRule() {
		return getEnvTypeNullAccess().getRule();
	}
	
	//EString:
	//	VALID_STRING;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EDoubleObject ecore::EDoubleObject:
	//	E_INT | E_DOUBLE;
	public EDoubleObjectElements getEDoubleObjectAccess() {
		return pEDoubleObject;
	}
	
	public ParserRule getEDoubleObjectRule() {
		return getEDoubleObjectAccess().getRule();
	}
	
	//EBooleanObject ecore::EBooleanObject:
	//	'true' | 'false';
	public EBooleanObjectElements getEBooleanObjectAccess() {
		return pEBooleanObject;
	}
	
	public ParserRule getEBooleanObjectRule() {
		return getEBooleanObjectAccess().getRule();
	}
	
	////EClass EnvAdditionalProperties
	//EnvAdditionalProperties:
	//	key=EString
	//	':'
	//	//EReference is not a keyword
	//	additionalProperties=JsonDocument;
	public EnvAdditionalPropertiesElements getEnvAdditionalPropertiesAccess() {
		return pEnvAdditionalProperties;
	}
	
	public ParserRule getEnvAdditionalPropertiesRule() {
		return getEnvAdditionalPropertiesAccess().getRule();
	}
	
	////EClass JsonDocument
	//JsonDocument jsonMM::JsonDocument:
	//	value=Value;
	public JsonDocumentElements getJsonDocumentAccess() {
		return pJsonDocument;
	}
	
	public ParserRule getJsonDocumentRule() {
		return getJsonDocumentAccess().getRule();
	}
	
	////EClass StringValue
	//StringValue jsonMM::StringValue:
	//	value=EString;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	////EClass ArrayValue
	//ArrayValue jsonMM::ArrayValue:
	//	{jsonMM::ArrayValue}
	//	//EReference is not a keyword
	//	'[' (value+=Value ("," value+=Value)*)? ']';
	public ArrayValueElements getArrayValueAccess() {
		return pArrayValue;
	}
	
	public ParserRule getArrayValueRule() {
		return getArrayValueAccess().getRule();
	}
	
	////EClass NullValue
	//NullValue jsonMM::NullValue:
	//	value=NullEnum;
	public NullValueElements getNullValueAccess() {
		return pNullValue;
	}
	
	public ParserRule getNullValueRule() {
		return getNullValueAccess().getRule();
	}
	
	////EClass NumberValue
	//NumberValue jsonMM::NumberValue:
	//	value=EDouble;
	public NumberValueElements getNumberValueAccess() {
		return pNumberValue;
	}
	
	public ParserRule getNumberValueRule() {
		return getNumberValueAccess().getRule();
	}
	
	////EClass ObjectValue
	//ObjectValue jsonMM::ObjectValue:
	//	{jsonMM::ObjectValue}
	//	'{' (keyvaluepair+=KeyValuePair ("," keyvaluepair+=KeyValuePair)*)?
	//	'}';
	public ObjectValueElements getObjectValueAccess() {
		return pObjectValue;
	}
	
	public ParserRule getObjectValueRule() {
		return getObjectValueAccess().getRule();
	}
	
	////EClass BooleanValue
	//BooleanValue jsonMM::BooleanValue:
	//	value=EBoolean;
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//enum NullEnum returns jsonMM::NullEnum:
	//	null;
	public NullEnumElements getNullEnumAccess() {
		return eNullEnum;
	}
	
	public EnumRule getNullEnumRule() {
		return getNullEnumAccess().getRule();
	}
	
	//EDouble ecore::EDouble:
	//	E_INT | E_DOUBLE;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	////EClass KeyValuePair
	//KeyValuePair jsonMM::KeyValuePair:
	//	key=EString
	//	':'
	//	//EReference is not a keyword
	//	value=Value;
	public KeyValuePairElements getKeyValuePairAccess() {
		return pKeyValuePair;
	}
	
	public ParserRule getKeyValuePairRule() {
		return getKeyValuePairAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	////EClass EnvItems
	//EnvItems:
	//	items=JsonDocument;
	public EnvItemsElements getEnvItemsAccess() {
		return pEnvItems;
	}
	
	public ParserRule getEnvItemsRule() {
		return getEnvItemsAccess().getRule();
	}
	
	//@Override
	//terminal INT returns ecore::EInt:
	//	'0' | '1'..'9' '0'..'9'*;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//VALID_STRING:
	//	STRING | KEYWORD;
	public VALID_STRINGElements getVALID_STRINGAccess() {
		return pVALID_STRING;
	}
	
	public ParserRule getVALID_STRINGRule() {
		return getVALID_STRINGAccess().getRule();
	}
	
	//@Override
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal E_INT:
	//	'-'? INT;
	public TerminalRule getE_INTRule() {
		return tE_INT;
	}
	
	//KEYWORD:
	//	'"secrets"';
	public KEYWORDElements getKEYWORDAccess() {
		return pKEYWORD;
	}
	
	public ParserRule getKEYWORDRule() {
		return getKEYWORDAccess().getRule();
	}
	
	//terminal E_DOUBLE:
	//	'-'? INT ('.' INT+)? (('E' | 'e') ('+' | '-')? INT)?;
	public TerminalRule getE_DOUBLERule() {
		return tE_DOUBLE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
