/*
 * generated by Xtext 2.23.0
 */
package githubwf.githubwf.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EnvOneOf0AdditionalPropertiesOneOf2GrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class EnvOneOf0AdditionalPropertiesOneOf2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.EnvOneOf0AdditionalPropertiesOneOf2.EnvOneOf0AdditionalPropertiesOneOf2");
		private final Assignment cAdditionalPropertiesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAdditionalPropertiesEBooleanObjectParserRuleCall_0 = (RuleCall)cAdditionalPropertiesAssignment.eContents().get(0);
		
		////EClass EnvOneOf0AdditionalPropertiesOneOf2
		//EnvOneOf0AdditionalPropertiesOneOf2:
		//	additionalProperties=EBooleanObject;
		@Override public ParserRule getRule() { return rule; }
		
		//additionalProperties=EBooleanObject
		public Assignment getAdditionalPropertiesAssignment() { return cAdditionalPropertiesAssignment; }
		
		//EBooleanObject
		public RuleCall getAdditionalPropertiesEBooleanObjectParserRuleCall_0() { return cAdditionalPropertiesEBooleanObjectParserRuleCall_0; }
	}
	public class EBooleanObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.EnvOneOf0AdditionalPropertiesOneOf2.EBooleanObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBooleanObject ecore::EBooleanObject:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class VALID_STRINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.EnvOneOf0AdditionalPropertiesOneOf2.VALID_STRING");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//VALID_STRING:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	
	
	private final EnvOneOf0AdditionalPropertiesOneOf2Elements pEnvOneOf0AdditionalPropertiesOneOf2;
	private final EBooleanObjectElements pEBooleanObject;
	private final TerminalRule tINT;
	private final VALID_STRINGElements pVALID_STRING;
	private final TerminalRule tSTRING;
	private final TerminalRule tE_INT;
	private final TerminalRule tE_DOUBLE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EnvOneOf0AdditionalPropertiesOneOf2GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pEnvOneOf0AdditionalPropertiesOneOf2 = new EnvOneOf0AdditionalPropertiesOneOf2Elements();
		this.pEBooleanObject = new EBooleanObjectElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.EnvOneOf0AdditionalPropertiesOneOf2.INT");
		this.pVALID_STRING = new VALID_STRINGElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.EnvOneOf0AdditionalPropertiesOneOf2.STRING");
		this.tE_INT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.EnvOneOf0AdditionalPropertiesOneOf2.E_INT");
		this.tE_DOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "githubwf.githubwf.EnvOneOf0AdditionalPropertiesOneOf2.E_DOUBLE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("githubwf.githubwf.EnvOneOf0AdditionalPropertiesOneOf2".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////EClass EnvOneOf0AdditionalPropertiesOneOf2
	//EnvOneOf0AdditionalPropertiesOneOf2:
	//	additionalProperties=EBooleanObject;
	public EnvOneOf0AdditionalPropertiesOneOf2Elements getEnvOneOf0AdditionalPropertiesOneOf2Access() {
		return pEnvOneOf0AdditionalPropertiesOneOf2;
	}
	
	public ParserRule getEnvOneOf0AdditionalPropertiesOneOf2Rule() {
		return getEnvOneOf0AdditionalPropertiesOneOf2Access().getRule();
	}
	
	//EBooleanObject ecore::EBooleanObject:
	//	'true' | 'false';
	public EBooleanObjectElements getEBooleanObjectAccess() {
		return pEBooleanObject;
	}
	
	public ParserRule getEBooleanObjectRule() {
		return getEBooleanObjectAccess().getRule();
	}
	
	//@Override
	//terminal INT returns ecore::EInt:
	//	'0' | '1'..'9' '0'..'9'*;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//VALID_STRING:
	//	STRING;
	public VALID_STRINGElements getVALID_STRINGAccess() {
		return pVALID_STRING;
	}
	
	public ParserRule getVALID_STRINGRule() {
		return getVALID_STRINGAccess().getRule();
	}
	
	//@Override
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal E_INT:
	//	'-'? INT;
	public TerminalRule getE_INTRule() {
		return tE_INT;
	}
	
	//terminal E_DOUBLE:
	//	'-'? INT ('.' INT+)? (('E' | 'e') ('+' | '-')? INT)?;
	public TerminalRule getE_DOUBLERule() {
		return tE_DOUBLE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
