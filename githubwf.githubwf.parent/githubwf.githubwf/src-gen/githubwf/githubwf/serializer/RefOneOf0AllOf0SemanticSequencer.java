/*
 * generated by Xtext 2.23.0
 */
package githubwf.githubwf.serializer;

import com.google.inject.Inject;
import githubwf.GithubwfPackage;
import githubwf.RefOneOf0AllOf0;
import githubwf.RefOneOf0AllOf0AdditionalProperties;
import githubwf.RefOneOf0AllOf0Items;
import githubwf.RefOneOf0AllOf0TypeArray;
import githubwf.RefOneOf0AllOf0TypeBoolean;
import githubwf.RefOneOf0AllOf0TypeInteger;
import githubwf.RefOneOf0AllOf0TypeNull;
import githubwf.RefOneOf0AllOf0TypeNumber;
import githubwf.RefOneOf0AllOf0TypeObject;
import githubwf.RefOneOf0AllOf0TypeString;
import githubwf.githubwf.services.RefOneOf0AllOf0GrammarAccess;
import java.util.Set;
import jsonMM.ArrayValue;
import jsonMM.BooleanValue;
import jsonMM.JsonDocument;
import jsonMM.JsonMMPackage;
import jsonMM.KeyValuePair;
import jsonMM.NullValue;
import jsonMM.NumberValue;
import jsonMM.ObjectValue;
import jsonMM.StringValue;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class RefOneOf0AllOf0SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RefOneOf0AllOf0GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GithubwfPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GithubwfPackage.REF_ONE_OF0_ALL_OF0:
				sequence_RefOneOf0AllOf0(context, (RefOneOf0AllOf0) semanticObject); 
				return; 
			case GithubwfPackage.REF_ONE_OF0_ALL_OF0_ADDITIONAL_PROPERTIES:
				sequence_RefOneOf0AllOf0AdditionalProperties(context, (RefOneOf0AllOf0AdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.REF_ONE_OF0_ALL_OF0_ITEMS:
				sequence_RefOneOf0AllOf0Items(context, (RefOneOf0AllOf0Items) semanticObject); 
				return; 
			case GithubwfPackage.REF_ONE_OF0_ALL_OF0_TYPE_ARRAY:
				sequence_RefOneOf0AllOf0TypeArray(context, (RefOneOf0AllOf0TypeArray) semanticObject); 
				return; 
			case GithubwfPackage.REF_ONE_OF0_ALL_OF0_TYPE_BOOLEAN:
				sequence_RefOneOf0AllOf0TypeBoolean(context, (RefOneOf0AllOf0TypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.REF_ONE_OF0_ALL_OF0_TYPE_INTEGER:
				sequence_RefOneOf0AllOf0TypeInteger(context, (RefOneOf0AllOf0TypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.REF_ONE_OF0_ALL_OF0_TYPE_NULL:
				sequence_RefOneOf0AllOf0TypeNull(context, (RefOneOf0AllOf0TypeNull) semanticObject); 
				return; 
			case GithubwfPackage.REF_ONE_OF0_ALL_OF0_TYPE_NUMBER:
				sequence_RefOneOf0AllOf0TypeNumber(context, (RefOneOf0AllOf0TypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.REF_ONE_OF0_ALL_OF0_TYPE_OBJECT:
				sequence_RefOneOf0AllOf0TypeObject(context, (RefOneOf0AllOf0TypeObject) semanticObject); 
				return; 
			case GithubwfPackage.REF_ONE_OF0_ALL_OF0_TYPE_STRING:
				sequence_RefOneOf0AllOf0TypeString(context, (RefOneOf0AllOf0TypeString) semanticObject); 
				return; 
			}
		else if (epackage == JsonMMPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JsonMMPackage.ARRAY_VALUE:
				sequence_ArrayValue(context, (ArrayValue) semanticObject); 
				return; 
			case JsonMMPackage.BOOLEAN_VALUE:
				sequence_BooleanValue(context, (BooleanValue) semanticObject); 
				return; 
			case JsonMMPackage.JSON_DOCUMENT:
				sequence_JsonDocument(context, (JsonDocument) semanticObject); 
				return; 
			case JsonMMPackage.KEY_VALUE_PAIR:
				sequence_KeyValuePair(context, (KeyValuePair) semanticObject); 
				return; 
			case JsonMMPackage.NULL_VALUE:
				sequence_NullValue(context, (NullValue) semanticObject); 
				return; 
			case JsonMMPackage.NUMBER_VALUE:
				sequence_NumberValue(context, (NumberValue) semanticObject); 
				return; 
			case JsonMMPackage.OBJECT_VALUE:
				sequence_ObjectValue(context, (ObjectValue) semanticObject); 
				return; 
			case JsonMMPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Value returns ArrayValue
	 *     ArrayValue returns ArrayValue
	 *
	 * Constraint:
	 *     (value+=Value value+=Value*)?
	 */
	protected void sequence_ArrayValue(ISerializationContext context, ArrayValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns BooleanValue
	 *     BooleanValue returns BooleanValue
	 *
	 * Constraint:
	 *     value=EBoolean
	 */
	protected void sequence_BooleanValue(ISerializationContext context, BooleanValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanValueAccess().getValueEBooleanParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JsonDocument returns JsonDocument
	 *
	 * Constraint:
	 *     value=Value
	 */
	protected void sequence_JsonDocument(ISerializationContext context, JsonDocument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonDocumentAccess().getValueValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeyValuePair returns KeyValuePair
	 *
	 * Constraint:
	 *     (key=EString value=Value)
	 */
	protected void sequence_KeyValuePair(ISerializationContext context, KeyValuePair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeyValuePairAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getKeyValuePairAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NullValue
	 *     NullValue returns NullValue
	 *
	 * Constraint:
	 *     value=NullEnum
	 */
	protected void sequence_NullValue(ISerializationContext context, NullValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNullValueAccess().getValueNullEnumEnumRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NumberValue
	 *     NumberValue returns NumberValue
	 *
	 * Constraint:
	 *     value=EDouble
	 */
	protected void sequence_NumberValue(ISerializationContext context, NumberValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberValueAccess().getValueEDoubleParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns ObjectValue
	 *     ObjectValue returns ObjectValue
	 *
	 * Constraint:
	 *     (keyvaluepair+=KeyValuePair keyvaluepair+=KeyValuePair*)?
	 */
	protected void sequence_ObjectValue(ISerializationContext context, ObjectValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RefOneOf0AllOf0PropertiesAbstract returns RefOneOf0AllOf0AdditionalProperties
	 *     RefOneOf0AllOf0AdditionalProperties returns RefOneOf0AllOf0AdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_RefOneOf0AllOf0AdditionalProperties(ISerializationContext context, RefOneOf0AllOf0AdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf0AdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf0AdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf0AdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf0AdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefOneOf0AllOf0AdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getRefOneOf0AllOf0AdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RefOneOf0AllOf0Items returns RefOneOf0AllOf0Items
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_RefOneOf0AllOf0Items(ISerializationContext context, RefOneOf0AllOf0Items semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf0Items_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf0Items_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefOneOf0AllOf0ItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RefOneOf0AllOf0Abstract returns RefOneOf0AllOf0TypeArray
	 *     RefOneOf0AllOf0TypeArray returns RefOneOf0AllOf0TypeArray
	 *
	 * Constraint:
	 *     (ref+=RefOneOf0AllOf0Items ref+=RefOneOf0AllOf0Items*)?
	 */
	protected void sequence_RefOneOf0AllOf0TypeArray(ISerializationContext context, RefOneOf0AllOf0TypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RefOneOf0AllOf0Abstract returns RefOneOf0AllOf0TypeBoolean
	 *     RefOneOf0AllOf0TypeBoolean returns RefOneOf0AllOf0TypeBoolean
	 *
	 * Constraint:
	 *     ref=EBooleanObject
	 */
	protected void sequence_RefOneOf0AllOf0TypeBoolean(ISerializationContext context, RefOneOf0AllOf0TypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf0TypeBoolean_Ref()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf0TypeBoolean_Ref()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefOneOf0AllOf0TypeBooleanAccess().getRefEBooleanObjectParserRuleCall_0(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RefOneOf0AllOf0Abstract returns RefOneOf0AllOf0TypeInteger
	 *     RefOneOf0AllOf0TypeInteger returns RefOneOf0AllOf0TypeInteger
	 *
	 * Constraint:
	 *     ref=EDoubleObject
	 */
	protected void sequence_RefOneOf0AllOf0TypeInteger(ISerializationContext context, RefOneOf0AllOf0TypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf0TypeInteger_Ref()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf0TypeInteger_Ref()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefOneOf0AllOf0TypeIntegerAccess().getRefEDoubleObjectParserRuleCall_0(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RefOneOf0AllOf0Abstract returns RefOneOf0AllOf0TypeNull
	 *     RefOneOf0AllOf0TypeNull returns RefOneOf0AllOf0TypeNull
	 *
	 * Constraint:
	 *     ref=NullValue
	 */
	protected void sequence_RefOneOf0AllOf0TypeNull(ISerializationContext context, RefOneOf0AllOf0TypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf0TypeNull_Ref()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf0TypeNull_Ref()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefOneOf0AllOf0TypeNullAccess().getRefNullValueParserRuleCall_0(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RefOneOf0AllOf0Abstract returns RefOneOf0AllOf0TypeNumber
	 *     RefOneOf0AllOf0TypeNumber returns RefOneOf0AllOf0TypeNumber
	 *
	 * Constraint:
	 *     ref=EDoubleObject
	 */
	protected void sequence_RefOneOf0AllOf0TypeNumber(ISerializationContext context, RefOneOf0AllOf0TypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf0TypeNumber_Ref()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf0TypeNumber_Ref()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefOneOf0AllOf0TypeNumberAccess().getRefEDoubleObjectParserRuleCall_0(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RefOneOf0AllOf0Abstract returns RefOneOf0AllOf0TypeObject
	 *     RefOneOf0AllOf0TypeObject returns RefOneOf0AllOf0TypeObject
	 *
	 * Constraint:
	 *     (ref+=RefOneOf0AllOf0PropertiesAbstract ref+=RefOneOf0AllOf0PropertiesAbstract*)?
	 */
	protected void sequence_RefOneOf0AllOf0TypeObject(ISerializationContext context, RefOneOf0AllOf0TypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RefOneOf0AllOf0Abstract returns RefOneOf0AllOf0TypeString
	 *     RefOneOf0AllOf0TypeString returns RefOneOf0AllOf0TypeString
	 *
	 * Constraint:
	 *     ref=EString
	 */
	protected void sequence_RefOneOf0AllOf0TypeString(ISerializationContext context, RefOneOf0AllOf0TypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf0TypeString_Ref()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf0TypeString_Ref()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefOneOf0AllOf0TypeStringAccess().getRefEStringParserRuleCall_0(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RefOneOf0AllOf0 returns RefOneOf0AllOf0
	 *
	 * Constraint:
	 *     ref=RefOneOf0AllOf0Abstract
	 */
	protected void sequence_RefOneOf0AllOf0(ISerializationContext context, RefOneOf0AllOf0 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf0_Ref()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf0_Ref()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefOneOf0AllOf0Access().getRefRefOneOf0AllOf0AbstractParserRuleCall_0(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=EString
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueEStringParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
