/*
 * generated by Xtext 2.29.0
 */
package githubwf.githubwf.serializer;

import com.google.inject.Inject;
import githubwf.EnvOneOf0AdditionalPropertiesOneOf2;
import githubwf.GithubwfPackage;
import githubwf.githubwf.services.EnvOneOf0AdditionalPropertiesOneOf2GrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class EnvOneOf0AdditionalPropertiesOneOf2SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EnvOneOf0AdditionalPropertiesOneOf2GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GithubwfPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GithubwfPackage.ENV_ONE_OF0_ADDITIONAL_PROPERTIES_ONE_OF2:
				sequence_EnvOneOf0AdditionalPropertiesOneOf2(context, (EnvOneOf0AdditionalPropertiesOneOf2) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnvOneOf0AdditionalPropertiesOneOf2 returns EnvOneOf0AdditionalPropertiesOneOf2
	 *
	 * Constraint:
	 *     additionalProperties=EBooleanObject
	 * </pre>
	 */
	protected void sequence_EnvOneOf0AdditionalPropertiesOneOf2(ISerializationContext context, EnvOneOf0AdditionalPropertiesOneOf2 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvOneOf0AdditionalPropertiesOneOf2_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvOneOf0AdditionalPropertiesOneOf2_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvOneOf0AdditionalPropertiesOneOf2Access().getAdditionalPropertiesEBooleanObjectParserRuleCall_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
}
