/*
 * generated by Xtext 2.29.0
 */
package githubwf.githubwf.serializer;

import com.google.inject.Inject;
import githubwf.Architecture;
import githubwf.GithubwfPackage;
import githubwf.Machine;
import githubwf.NormalJobRuns_45onOneOf1AnyOf3;
import githubwf.NormalJobRuns_45onOneOf1AnyOf3AdditionalItems;
import githubwf.NormalJobRuns_45onOneOf1AnyOf3AdditionalProperties;
import githubwf.NormalJobRuns_45onOneOf1AnyOf3Items0;
import githubwf.NormalJobRuns_45onOneOf1AnyOf3Items1;
import githubwf.NormalJobRuns_45onOneOf1AnyOf3Items2;
import githubwf.NormalJobRuns_45onOneOf1AnyOf3Tuple;
import githubwf.NormalJobRuns_45onOneOf1AnyOf3TypeArray;
import githubwf.NormalJobRuns_45onOneOf1AnyOf3TypeBoolean;
import githubwf.NormalJobRuns_45onOneOf1AnyOf3TypeInteger;
import githubwf.NormalJobRuns_45onOneOf1AnyOf3TypeNull;
import githubwf.NormalJobRuns_45onOneOf1AnyOf3TypeNumber;
import githubwf.NormalJobRuns_45onOneOf1AnyOf3TypeObject;
import githubwf.NormalJobRuns_45onOneOf1AnyOf3TypeString;
import githubwf.githubwf.services.NormalJobRuns_45onOneOf1AnyOf3GrammarAccess;
import java.util.Set;
import jsonMM.ArrayValue;
import jsonMM.BooleanValue;
import jsonMM.JsonDocument;
import jsonMM.JsonMMPackage;
import jsonMM.KeyValuePair;
import jsonMM.NullValue;
import jsonMM.NumberValue;
import jsonMM.ObjectValue;
import jsonMM.StringValue;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class NormalJobRuns_45onOneOf1AnyOf3SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private NormalJobRuns_45onOneOf1AnyOf3GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GithubwfPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GithubwfPackage.ARCHITECTURE:
				sequence_Architecture(context, (Architecture) semanticObject); 
				return; 
			case GithubwfPackage.MACHINE:
				sequence_Machine(context, (Machine) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_ONE_OF1_ANY_OF3:
				sequence_NormalJobRuns_45onOneOf1AnyOf3(context, (NormalJobRuns_45onOneOf1AnyOf3) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_ONE_OF1_ANY_OF3_ADDITIONAL_ITEMS:
				sequence_NormalJobRuns_45onOneOf1AnyOf3AdditionalItems(context, (NormalJobRuns_45onOneOf1AnyOf3AdditionalItems) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_ONE_OF1_ANY_OF3_ADDITIONAL_PROPERTIES:
				sequence_NormalJobRuns_45onOneOf1AnyOf3AdditionalProperties(context, (NormalJobRuns_45onOneOf1AnyOf3AdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_ONE_OF1_ANY_OF3_ITEMS0:
				sequence_NormalJobRuns_45onOneOf1AnyOf3Items0(context, (NormalJobRuns_45onOneOf1AnyOf3Items0) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_ONE_OF1_ANY_OF3_ITEMS1:
				sequence_NormalJobRuns_45onOneOf1AnyOf3Items1(context, (NormalJobRuns_45onOneOf1AnyOf3Items1) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_ONE_OF1_ANY_OF3_ITEMS2:
				sequence_NormalJobRuns_45onOneOf1AnyOf3Items2(context, (NormalJobRuns_45onOneOf1AnyOf3Items2) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_ONE_OF1_ANY_OF3_TUPLE:
				sequence_NormalJobRuns_45onOneOf1AnyOf3Tuple(context, (NormalJobRuns_45onOneOf1AnyOf3Tuple) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_ONE_OF1_ANY_OF3_TYPE_ARRAY:
				sequence_NormalJobRuns_45onOneOf1AnyOf3TypeArray(context, (NormalJobRuns_45onOneOf1AnyOf3TypeArray) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_ONE_OF1_ANY_OF3_TYPE_BOOLEAN:
				sequence_NormalJobRuns_45onOneOf1AnyOf3TypeBoolean(context, (NormalJobRuns_45onOneOf1AnyOf3TypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_ONE_OF1_ANY_OF3_TYPE_INTEGER:
				sequence_NormalJobRuns_45onOneOf1AnyOf3TypeInteger(context, (NormalJobRuns_45onOneOf1AnyOf3TypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_ONE_OF1_ANY_OF3_TYPE_NULL:
				sequence_NormalJobRuns_45onOneOf1AnyOf3TypeNull(context, (NormalJobRuns_45onOneOf1AnyOf3TypeNull) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_ONE_OF1_ANY_OF3_TYPE_NUMBER:
				sequence_NormalJobRuns_45onOneOf1AnyOf3TypeNumber(context, (NormalJobRuns_45onOneOf1AnyOf3TypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_ONE_OF1_ANY_OF3_TYPE_OBJECT:
				sequence_NormalJobRuns_45onOneOf1AnyOf3TypeObject(context, (NormalJobRuns_45onOneOf1AnyOf3TypeObject) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_ONE_OF1_ANY_OF3_TYPE_STRING:
				sequence_NormalJobRuns_45onOneOf1AnyOf3TypeString(context, (NormalJobRuns_45onOneOf1AnyOf3TypeString) semanticObject); 
				return; 
			}
		else if (epackage == JsonMMPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JsonMMPackage.ARRAY_VALUE:
				sequence_ArrayValue(context, (ArrayValue) semanticObject); 
				return; 
			case JsonMMPackage.BOOLEAN_VALUE:
				sequence_BooleanValue(context, (BooleanValue) semanticObject); 
				return; 
			case JsonMMPackage.JSON_DOCUMENT:
				sequence_JsonDocument(context, (JsonDocument) semanticObject); 
				return; 
			case JsonMMPackage.KEY_VALUE_PAIR:
				sequence_KeyValuePair(context, (KeyValuePair) semanticObject); 
				return; 
			case JsonMMPackage.NULL_VALUE:
				sequence_NullValue(context, (NullValue) semanticObject); 
				return; 
			case JsonMMPackage.NUMBER_VALUE:
				sequence_NumberValue(context, (NumberValue) semanticObject); 
				return; 
			case JsonMMPackage.OBJECT_VALUE:
				sequence_ObjectValue(context, (ObjectValue) semanticObject); 
				return; 
			case JsonMMPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Architecture returns Architecture
	 *
	 * Constraint:
	 *     architecture=JsonDocument
	 * </pre>
	 */
	protected void sequence_Architecture(ISerializationContext context, Architecture semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getArchitecture_Architecture()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getArchitecture_Architecture()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArchitectureAccess().getArchitectureJsonDocumentParserRuleCall_0(), semanticObject.getArchitecture());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns ArrayValue
	 *     ArrayValue returns ArrayValue
	 *
	 * Constraint:
	 *     (value+=Value value+=Value*)?
	 * </pre>
	 */
	protected void sequence_ArrayValue(ISerializationContext context, ArrayValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns BooleanValue
	 *     BooleanValue returns BooleanValue
	 *
	 * Constraint:
	 *     value=EBoolean
	 * </pre>
	 */
	protected void sequence_BooleanValue(ISerializationContext context, BooleanValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanValueAccess().getValueEBooleanParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JsonDocument returns JsonDocument
	 *
	 * Constraint:
	 *     value=Value
	 * </pre>
	 */
	protected void sequence_JsonDocument(ISerializationContext context, JsonDocument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonDocumentAccess().getValueValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     KeyValuePair returns KeyValuePair
	 *
	 * Constraint:
	 *     (key=EString value=Value)
	 * </pre>
	 */
	protected void sequence_KeyValuePair(ISerializationContext context, KeyValuePair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeyValuePairAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getKeyValuePairAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Machine returns Machine
	 *
	 * Constraint:
	 *     machine=JsonDocument
	 * </pre>
	 */
	protected void sequence_Machine(ISerializationContext context, Machine semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getMachine_Machine()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getMachine_Machine()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMachineAccess().getMachineJsonDocumentParserRuleCall_0(), semanticObject.getMachine());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NormalJobRuns_45onOneOf1AnyOf3AdditionalItems returns NormalJobRuns_45onOneOf1AnyOf3AdditionalItems
	 *
	 * Constraint:
	 *     additionalItems=EString
	 * </pre>
	 */
	protected void sequence_NormalJobRuns_45onOneOf1AnyOf3AdditionalItems(ISerializationContext context, NormalJobRuns_45onOneOf1AnyOf3AdditionalItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3AdditionalItems_AdditionalItems()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3AdditionalItems_AdditionalItems()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobRuns_45onOneOf1AnyOf3AdditionalItemsAccess().getAdditionalItemsEStringParserRuleCall_0(), semanticObject.getAdditionalItems());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NormalJobRuns_45onOneOf1AnyOf3PropertiesAbstract returns NormalJobRuns_45onOneOf1AnyOf3AdditionalProperties
	 *     NormalJobRuns_45onOneOf1AnyOf3AdditionalProperties returns NormalJobRuns_45onOneOf1AnyOf3AdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 * </pre>
	 */
	protected void sequence_NormalJobRuns_45onOneOf1AnyOf3AdditionalProperties(ISerializationContext context, NormalJobRuns_45onOneOf1AnyOf3AdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3AdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3AdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3AdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3AdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobRuns_45onOneOf1AnyOf3AdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getNormalJobRuns_45onOneOf1AnyOf3AdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NormalJobRuns_45onOneOf1AnyOf3Items0 returns NormalJobRuns_45onOneOf1AnyOf3Items0
	 *
	 * Constraint:
	 *     items0=JsonDocument
	 * </pre>
	 */
	protected void sequence_NormalJobRuns_45onOneOf1AnyOf3Items0(ISerializationContext context, NormalJobRuns_45onOneOf1AnyOf3Items0 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3Items0_Items0()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3Items0_Items0()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobRuns_45onOneOf1AnyOf3Items0Access().getItems0JsonDocumentParserRuleCall_0(), semanticObject.getItems0());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NormalJobRuns_45onOneOf1AnyOf3Items1 returns NormalJobRuns_45onOneOf1AnyOf3Items1
	 *
	 * Constraint:
	 *     items1=Machine
	 * </pre>
	 */
	protected void sequence_NormalJobRuns_45onOneOf1AnyOf3Items1(ISerializationContext context, NormalJobRuns_45onOneOf1AnyOf3Items1 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3Items1_Items1()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3Items1_Items1()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobRuns_45onOneOf1AnyOf3Items1Access().getItems1MachineParserRuleCall_0(), semanticObject.getItems1());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NormalJobRuns_45onOneOf1AnyOf3Items2 returns NormalJobRuns_45onOneOf1AnyOf3Items2
	 *
	 * Constraint:
	 *     items2=Architecture
	 * </pre>
	 */
	protected void sequence_NormalJobRuns_45onOneOf1AnyOf3Items2(ISerializationContext context, NormalJobRuns_45onOneOf1AnyOf3Items2 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3Items2_Items2()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3Items2_Items2()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobRuns_45onOneOf1AnyOf3Items2Access().getItems2ArchitectureParserRuleCall_0(), semanticObject.getItems2());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NormalJobRuns_45onOneOf1AnyOf3Tuple returns NormalJobRuns_45onOneOf1AnyOf3Tuple
	 *
	 * Constraint:
	 *     (
	 *         items0=NormalJobRuns_45onOneOf1AnyOf3Items0 
	 *         (
	 *             items1=NormalJobRuns_45onOneOf1AnyOf3Items1 
	 *             (
	 *                 items2=NormalJobRuns_45onOneOf1AnyOf3Items2 
	 *                 (additionalItems+=NormalJobRuns_45onOneOf1AnyOf3AdditionalItems additionalItems+=NormalJobRuns_45onOneOf1AnyOf3AdditionalItems*)?
	 *             )?
	 *         )?
	 *     )?
	 * </pre>
	 */
	protected void sequence_NormalJobRuns_45onOneOf1AnyOf3Tuple(ISerializationContext context, NormalJobRuns_45onOneOf1AnyOf3Tuple semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NormalJobRuns_45onOneOf1AnyOf3Abstract returns NormalJobRuns_45onOneOf1AnyOf3TypeArray
	 *     NormalJobRuns_45onOneOf1AnyOf3TypeArray returns NormalJobRuns_45onOneOf1AnyOf3TypeArray
	 *
	 * Constraint:
	 *     runs_45on=NormalJobRuns_45onOneOf1AnyOf3Tuple
	 * </pre>
	 */
	protected void sequence_NormalJobRuns_45onOneOf1AnyOf3TypeArray(ISerializationContext context, NormalJobRuns_45onOneOf1AnyOf3TypeArray semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3TypeArray_Runs_45on()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3TypeArray_Runs_45on()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobRuns_45onOneOf1AnyOf3TypeArrayAccess().getRuns_45onNormalJobRuns_45onOneOf1AnyOf3TupleParserRuleCall_3_0(), semanticObject.getRuns_45on());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NormalJobRuns_45onOneOf1AnyOf3Abstract returns NormalJobRuns_45onOneOf1AnyOf3TypeBoolean
	 *     NormalJobRuns_45onOneOf1AnyOf3TypeBoolean returns NormalJobRuns_45onOneOf1AnyOf3TypeBoolean
	 *
	 * Constraint:
	 *     runs_45on=EBooleanObject
	 * </pre>
	 */
	protected void sequence_NormalJobRuns_45onOneOf1AnyOf3TypeBoolean(ISerializationContext context, NormalJobRuns_45onOneOf1AnyOf3TypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3TypeBoolean_Runs_45on()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3TypeBoolean_Runs_45on()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobRuns_45onOneOf1AnyOf3TypeBooleanAccess().getRuns_45onEBooleanObjectParserRuleCall_2_0(), semanticObject.getRuns_45on());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NormalJobRuns_45onOneOf1AnyOf3Abstract returns NormalJobRuns_45onOneOf1AnyOf3TypeInteger
	 *     NormalJobRuns_45onOneOf1AnyOf3TypeInteger returns NormalJobRuns_45onOneOf1AnyOf3TypeInteger
	 *
	 * Constraint:
	 *     runs_45on=EDoubleObject
	 * </pre>
	 */
	protected void sequence_NormalJobRuns_45onOneOf1AnyOf3TypeInteger(ISerializationContext context, NormalJobRuns_45onOneOf1AnyOf3TypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3TypeInteger_Runs_45on()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3TypeInteger_Runs_45on()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobRuns_45onOneOf1AnyOf3TypeIntegerAccess().getRuns_45onEDoubleObjectParserRuleCall_2_0(), semanticObject.getRuns_45on());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NormalJobRuns_45onOneOf1AnyOf3Abstract returns NormalJobRuns_45onOneOf1AnyOf3TypeNull
	 *     NormalJobRuns_45onOneOf1AnyOf3TypeNull returns NormalJobRuns_45onOneOf1AnyOf3TypeNull
	 *
	 * Constraint:
	 *     runs_45on=NullValue
	 * </pre>
	 */
	protected void sequence_NormalJobRuns_45onOneOf1AnyOf3TypeNull(ISerializationContext context, NormalJobRuns_45onOneOf1AnyOf3TypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3TypeNull_Runs_45on()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3TypeNull_Runs_45on()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobRuns_45onOneOf1AnyOf3TypeNullAccess().getRuns_45onNullValueParserRuleCall_2_0(), semanticObject.getRuns_45on());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NormalJobRuns_45onOneOf1AnyOf3Abstract returns NormalJobRuns_45onOneOf1AnyOf3TypeNumber
	 *     NormalJobRuns_45onOneOf1AnyOf3TypeNumber returns NormalJobRuns_45onOneOf1AnyOf3TypeNumber
	 *
	 * Constraint:
	 *     runs_45on=EDoubleObject
	 * </pre>
	 */
	protected void sequence_NormalJobRuns_45onOneOf1AnyOf3TypeNumber(ISerializationContext context, NormalJobRuns_45onOneOf1AnyOf3TypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3TypeNumber_Runs_45on()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3TypeNumber_Runs_45on()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobRuns_45onOneOf1AnyOf3TypeNumberAccess().getRuns_45onEDoubleObjectParserRuleCall_2_0(), semanticObject.getRuns_45on());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NormalJobRuns_45onOneOf1AnyOf3Abstract returns NormalJobRuns_45onOneOf1AnyOf3TypeObject
	 *     NormalJobRuns_45onOneOf1AnyOf3TypeObject returns NormalJobRuns_45onOneOf1AnyOf3TypeObject
	 *
	 * Constraint:
	 *     (runs_45on+=NormalJobRuns_45onOneOf1AnyOf3PropertiesAbstract runs_45on+=NormalJobRuns_45onOneOf1AnyOf3PropertiesAbstract*)?
	 * </pre>
	 */
	protected void sequence_NormalJobRuns_45onOneOf1AnyOf3TypeObject(ISerializationContext context, NormalJobRuns_45onOneOf1AnyOf3TypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NormalJobRuns_45onOneOf1AnyOf3Abstract returns NormalJobRuns_45onOneOf1AnyOf3TypeString
	 *     NormalJobRuns_45onOneOf1AnyOf3TypeString returns NormalJobRuns_45onOneOf1AnyOf3TypeString
	 *
	 * Constraint:
	 *     runs_45on=EString
	 * </pre>
	 */
	protected void sequence_NormalJobRuns_45onOneOf1AnyOf3TypeString(ISerializationContext context, NormalJobRuns_45onOneOf1AnyOf3TypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3TypeString_Runs_45on()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3TypeString_Runs_45on()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobRuns_45onOneOf1AnyOf3TypeStringAccess().getRuns_45onEStringParserRuleCall_2_0(), semanticObject.getRuns_45on());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NormalJobRuns_45onOneOf1AnyOf3 returns NormalJobRuns_45onOneOf1AnyOf3
	 *
	 * Constraint:
	 *     runs_45on=NormalJobRuns_45onOneOf1AnyOf3Abstract
	 * </pre>
	 */
	protected void sequence_NormalJobRuns_45onOneOf1AnyOf3(ISerializationContext context, NormalJobRuns_45onOneOf1AnyOf3 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3_Runs_45on()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onOneOf1AnyOf3_Runs_45on()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobRuns_45onOneOf1AnyOf3Access().getRuns_45onNormalJobRuns_45onOneOf1AnyOf3AbstractParserRuleCall_0(), semanticObject.getRuns_45on());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns NullValue
	 *     NullValue returns NullValue
	 *
	 * Constraint:
	 *     value=NullEnum
	 * </pre>
	 */
	protected void sequence_NullValue(ISerializationContext context, NullValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNullValueAccess().getValueNullEnumEnumRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns NumberValue
	 *     NumberValue returns NumberValue
	 *
	 * Constraint:
	 *     value=EDouble
	 * </pre>
	 */
	protected void sequence_NumberValue(ISerializationContext context, NumberValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberValueAccess().getValueEDoubleParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns ObjectValue
	 *     ObjectValue returns ObjectValue
	 *
	 * Constraint:
	 *     (keyvaluepair+=KeyValuePair keyvaluepair+=KeyValuePair*)?
	 * </pre>
	 */
	protected void sequence_ObjectValue(ISerializationContext context, ObjectValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=EString
	 * </pre>
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueEStringParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
