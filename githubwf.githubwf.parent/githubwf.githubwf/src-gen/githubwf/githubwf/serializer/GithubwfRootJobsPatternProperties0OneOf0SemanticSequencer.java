/*
 * generated by Xtext 2.23.0
 */
package githubwf.githubwf.serializer;

import com.google.inject.Inject;
import githubwf.Configuration;
import githubwf.ConfigurationAdditionalProperties;
import githubwf.ConfigurationItems;
import githubwf.ConfigurationTypeArray;
import githubwf.ConfigurationTypeBoolean;
import githubwf.ConfigurationTypeInteger;
import githubwf.ConfigurationTypeNull;
import githubwf.ConfigurationTypeNumber;
import githubwf.ConfigurationTypeObject;
import githubwf.ConfigurationTypeString;
import githubwf.Container;
import githubwf.ContainerCredentials;
import githubwf.ContainerCredentialsAdditionalProperties;
import githubwf.ContainerCredentialsPassword;
import githubwf.ContainerCredentialsUsername;
import githubwf.ContainerEnv;
import githubwf.ContainerImage;
import githubwf.ContainerOptions;
import githubwf.ContainerPorts;
import githubwf.ContainerPortsItems;
import githubwf.ContainerPortsItemsAdditionalProperties;
import githubwf.ContainerPortsItemsItems;
import githubwf.ContainerPortsItemsTypeArray;
import githubwf.ContainerPortsItemsTypeBoolean;
import githubwf.ContainerPortsItemsTypeInteger;
import githubwf.ContainerPortsItemsTypeNull;
import githubwf.ContainerPortsItemsTypeNumber;
import githubwf.ContainerPortsItemsTypeObject;
import githubwf.ContainerPortsItemsTypeString;
import githubwf.ContainerVolumes;
import githubwf.ContainerVolumesItems;
import githubwf.Defaults;
import githubwf.DefaultsRun;
import githubwf.DefaultsRunShell;
import githubwf.DefaultsRunWorking_45directory;
import githubwf.Env;
import githubwf.EnvAdditionalProperties;
import githubwf.EnvItems;
import githubwf.EnvTypeArray;
import githubwf.EnvTypeBoolean;
import githubwf.EnvTypeInteger;
import githubwf.EnvTypeNull;
import githubwf.EnvTypeNumber;
import githubwf.EnvTypeObject;
import githubwf.EnvTypeString;
import githubwf.GithubwfPackage;
import githubwf.GithubwfRootJobsPatternProperties0OneOf0;
import githubwf.JobNeeds;
import githubwf.JobNeedsAdditionalProperties;
import githubwf.JobNeedsItems;
import githubwf.JobNeedsTypeArray;
import githubwf.JobNeedsTypeBoolean;
import githubwf.JobNeedsTypeInteger;
import githubwf.JobNeedsTypeNull;
import githubwf.JobNeedsTypeNumber;
import githubwf.JobNeedsTypeObject;
import githubwf.JobNeedsTypeString;
import githubwf.NormalJob;
import githubwf.NormalJobConcurrency;
import githubwf.NormalJobConcurrencyAdditionalProperties;
import githubwf.NormalJobConcurrencyItems;
import githubwf.NormalJobConcurrencyTypeArray;
import githubwf.NormalJobConcurrencyTypeBoolean;
import githubwf.NormalJobConcurrencyTypeInteger;
import githubwf.NormalJobConcurrencyTypeNull;
import githubwf.NormalJobConcurrencyTypeNumber;
import githubwf.NormalJobConcurrencyTypeObject;
import githubwf.NormalJobConcurrencyTypeString;
import githubwf.NormalJobContainer;
import githubwf.NormalJobContainerAdditionalProperties;
import githubwf.NormalJobContainerItems;
import githubwf.NormalJobContainerTypeArray;
import githubwf.NormalJobContainerTypeBoolean;
import githubwf.NormalJobContainerTypeInteger;
import githubwf.NormalJobContainerTypeNull;
import githubwf.NormalJobContainerTypeNumber;
import githubwf.NormalJobContainerTypeObject;
import githubwf.NormalJobContainerTypeString;
import githubwf.NormalJobContinue_45on_45error;
import githubwf.NormalJobContinue_45on_45errorAdditionalProperties;
import githubwf.NormalJobContinue_45on_45errorItems;
import githubwf.NormalJobContinue_45on_45errorTypeArray;
import githubwf.NormalJobContinue_45on_45errorTypeBoolean;
import githubwf.NormalJobContinue_45on_45errorTypeInteger;
import githubwf.NormalJobContinue_45on_45errorTypeNull;
import githubwf.NormalJobContinue_45on_45errorTypeNumber;
import githubwf.NormalJobContinue_45on_45errorTypeObject;
import githubwf.NormalJobContinue_45on_45errorTypeString;
import githubwf.NormalJobDefaults;
import githubwf.NormalJobEnv;
import githubwf.NormalJobEnvironment;
import githubwf.NormalJobEnvironmentAdditionalProperties;
import githubwf.NormalJobEnvironmentItems;
import githubwf.NormalJobEnvironmentTypeArray;
import githubwf.NormalJobEnvironmentTypeBoolean;
import githubwf.NormalJobEnvironmentTypeInteger;
import githubwf.NormalJobEnvironmentTypeNull;
import githubwf.NormalJobEnvironmentTypeNumber;
import githubwf.NormalJobEnvironmentTypeObject;
import githubwf.NormalJobEnvironmentTypeString;
import githubwf.NormalJobIf;
import githubwf.NormalJobIfTypeBoolean;
import githubwf.NormalJobIfTypeNumber;
import githubwf.NormalJobIfTypeString;
import githubwf.NormalJobName;
import githubwf.NormalJobNeeds;
import githubwf.NormalJobOutputs;
import githubwf.NormalJobOutputsAdditionalProperties;
import githubwf.NormalJobPermissions;
import githubwf.NormalJobRuns_45on;
import githubwf.NormalJobRuns_45onAdditionalProperties;
import githubwf.NormalJobRuns_45onItems;
import githubwf.NormalJobRuns_45onTypeArray;
import githubwf.NormalJobRuns_45onTypeBoolean;
import githubwf.NormalJobRuns_45onTypeInteger;
import githubwf.NormalJobRuns_45onTypeNull;
import githubwf.NormalJobRuns_45onTypeNumber;
import githubwf.NormalJobRuns_45onTypeObject;
import githubwf.NormalJobRuns_45onTypeString;
import githubwf.NormalJobServices;
import githubwf.NormalJobServicesAdditionalProperties;
import githubwf.NormalJobSteps;
import githubwf.NormalJobStepsItems;
import githubwf.NormalJobStepsItemsAdditionalProperties;
import githubwf.NormalJobStepsItemsItems;
import githubwf.NormalJobStepsItemsTypeArray;
import githubwf.NormalJobStepsItemsTypeBoolean;
import githubwf.NormalJobStepsItemsTypeInteger;
import githubwf.NormalJobStepsItemsTypeNull;
import githubwf.NormalJobStepsItemsTypeNumber;
import githubwf.NormalJobStepsItemsTypeObject;
import githubwf.NormalJobStepsItemsTypeString;
import githubwf.NormalJobStrategy;
import githubwf.NormalJobStrategyFail_45fast;
import githubwf.NormalJobStrategyMatrix;
import githubwf.NormalJobStrategyMatrixAdditionalProperties;
import githubwf.NormalJobStrategyMatrixAdditionalPropertiesAdditionalProperties;
import githubwf.NormalJobStrategyMatrixAdditionalPropertiesItems;
import githubwf.NormalJobStrategyMatrixAdditionalPropertiesTypeArray;
import githubwf.NormalJobStrategyMatrixAdditionalPropertiesTypeBoolean;
import githubwf.NormalJobStrategyMatrixAdditionalPropertiesTypeInteger;
import githubwf.NormalJobStrategyMatrixAdditionalPropertiesTypeNull;
import githubwf.NormalJobStrategyMatrixAdditionalPropertiesTypeNumber;
import githubwf.NormalJobStrategyMatrixAdditionalPropertiesTypeObject;
import githubwf.NormalJobStrategyMatrixAdditionalPropertiesTypeString;
import githubwf.NormalJobStrategyMatrixItems;
import githubwf.NormalJobStrategyMatrixPatternProperties0;
import githubwf.NormalJobStrategyMatrixPatternProperties0Items;
import githubwf.NormalJobStrategyMatrixPatternProperties0ItemsAdditionalProperties;
import githubwf.NormalJobStrategyMatrixTypeArray;
import githubwf.NormalJobStrategyMatrixTypeBoolean;
import githubwf.NormalJobStrategyMatrixTypeInteger;
import githubwf.NormalJobStrategyMatrixTypeNull;
import githubwf.NormalJobStrategyMatrixTypeNumber;
import githubwf.NormalJobStrategyMatrixTypeObject;
import githubwf.NormalJobStrategyMatrixTypeString;
import githubwf.NormalJobStrategyMax_45parallel;
import githubwf.NormalJobTimeout_45minutes;
import githubwf.Permissions;
import githubwf.PermissionsAdditionalProperties;
import githubwf.PermissionsItems;
import githubwf.PermissionsTypeArray;
import githubwf.PermissionsTypeBoolean;
import githubwf.PermissionsTypeInteger;
import githubwf.PermissionsTypeNull;
import githubwf.PermissionsTypeNumber;
import githubwf.PermissionsTypeObject;
import githubwf.PermissionsTypeString;
import githubwf.Shell;
import githubwf.ShellAdditionalProperties;
import githubwf.ShellItems;
import githubwf.ShellTypeArray;
import githubwf.ShellTypeBoolean;
import githubwf.ShellTypeInteger;
import githubwf.ShellTypeNull;
import githubwf.ShellTypeNumber;
import githubwf.ShellTypeObject;
import githubwf.ShellTypeString;
import githubwf.Working_45directory;
import githubwf.githubwf.services.GithubwfRootJobsPatternProperties0OneOf0GrammarAccess;
import java.util.Set;
import jsonMM.ArrayValue;
import jsonMM.BooleanValue;
import jsonMM.JsonDocument;
import jsonMM.JsonMMPackage;
import jsonMM.KeyValuePair;
import jsonMM.NullValue;
import jsonMM.NumberValue;
import jsonMM.ObjectValue;
import jsonMM.StringValue;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GithubwfRootJobsPatternProperties0OneOf0SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GithubwfRootJobsPatternProperties0OneOf0GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GithubwfPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GithubwfPackage.CONFIGURATION:
				sequence_Configuration(context, (Configuration) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_ADDITIONAL_PROPERTIES:
				sequence_ConfigurationAdditionalProperties(context, (ConfigurationAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_ITEMS:
				sequence_ConfigurationItems(context, (ConfigurationItems) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_TYPE_ARRAY:
				sequence_ConfigurationTypeArray(context, (ConfigurationTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_TYPE_BOOLEAN:
				sequence_ConfigurationTypeBoolean(context, (ConfigurationTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_TYPE_INTEGER:
				sequence_ConfigurationTypeInteger(context, (ConfigurationTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_TYPE_NULL:
				sequence_ConfigurationTypeNull(context, (ConfigurationTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_TYPE_NUMBER:
				sequence_ConfigurationTypeNumber(context, (ConfigurationTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_TYPE_OBJECT:
				sequence_ConfigurationTypeObject(context, (ConfigurationTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_TYPE_STRING:
				sequence_ConfigurationTypeString(context, (ConfigurationTypeString) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER:
				sequence_Container(context, (Container) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_CREDENTIALS:
				sequence_ContainerCredentials(context, (ContainerCredentials) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_CREDENTIALS_ADDITIONAL_PROPERTIES:
				sequence_ContainerCredentialsAdditionalProperties(context, (ContainerCredentialsAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_CREDENTIALS_PASSWORD:
				sequence_ContainerCredentialsPassword(context, (ContainerCredentialsPassword) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_CREDENTIALS_USERNAME:
				sequence_ContainerCredentialsUsername(context, (ContainerCredentialsUsername) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_ENV:
				sequence_ContainerEnv(context, (ContainerEnv) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_IMAGE:
				sequence_ContainerImage(context, (ContainerImage) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_OPTIONS:
				sequence_ContainerOptions(context, (ContainerOptions) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS:
				sequence_ContainerPorts(context, (ContainerPorts) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS_ITEMS:
				sequence_ContainerPortsItems(context, (ContainerPortsItems) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS_ITEMS_ADDITIONAL_PROPERTIES:
				sequence_ContainerPortsItemsAdditionalProperties(context, (ContainerPortsItemsAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS_ITEMS_ITEMS:
				sequence_ContainerPortsItemsItems(context, (ContainerPortsItemsItems) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS_ITEMS_TYPE_ARRAY:
				sequence_ContainerPortsItemsTypeArray(context, (ContainerPortsItemsTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS_ITEMS_TYPE_BOOLEAN:
				sequence_ContainerPortsItemsTypeBoolean(context, (ContainerPortsItemsTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS_ITEMS_TYPE_INTEGER:
				sequence_ContainerPortsItemsTypeInteger(context, (ContainerPortsItemsTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS_ITEMS_TYPE_NULL:
				sequence_ContainerPortsItemsTypeNull(context, (ContainerPortsItemsTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS_ITEMS_TYPE_NUMBER:
				sequence_ContainerPortsItemsTypeNumber(context, (ContainerPortsItemsTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS_ITEMS_TYPE_OBJECT:
				sequence_ContainerPortsItemsTypeObject(context, (ContainerPortsItemsTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS_ITEMS_TYPE_STRING:
				sequence_ContainerPortsItemsTypeString(context, (ContainerPortsItemsTypeString) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_VOLUMES:
				sequence_ContainerVolumes(context, (ContainerVolumes) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_VOLUMES_ITEMS:
				sequence_ContainerVolumesItems(context, (ContainerVolumesItems) semanticObject); 
				return; 
			case GithubwfPackage.DEFAULTS:
				sequence_Defaults(context, (Defaults) semanticObject); 
				return; 
			case GithubwfPackage.DEFAULTS_RUN:
				sequence_DefaultsRun(context, (DefaultsRun) semanticObject); 
				return; 
			case GithubwfPackage.DEFAULTS_RUN_SHELL:
				sequence_DefaultsRunShell(context, (DefaultsRunShell) semanticObject); 
				return; 
			case GithubwfPackage.DEFAULTS_RUN_WORKING_45DIRECTORY:
				sequence_DefaultsRunWorking_45directory(context, (DefaultsRunWorking_45directory) semanticObject); 
				return; 
			case GithubwfPackage.ENV:
				sequence_Env(context, (Env) semanticObject); 
				return; 
			case GithubwfPackage.ENV_ADDITIONAL_PROPERTIES:
				sequence_EnvAdditionalProperties(context, (EnvAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.ENV_ITEMS:
				sequence_EnvItems(context, (EnvItems) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_ARRAY:
				sequence_EnvTypeArray(context, (EnvTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_BOOLEAN:
				sequence_EnvTypeBoolean(context, (EnvTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_INTEGER:
				sequence_EnvTypeInteger(context, (EnvTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_NULL:
				sequence_EnvTypeNull(context, (EnvTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_NUMBER:
				sequence_EnvTypeNumber(context, (EnvTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_OBJECT:
				sequence_EnvTypeObject(context, (EnvTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_STRING:
				sequence_EnvTypeString(context, (EnvTypeString) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_JOBS_PATTERN_PROPERTIES0_ONE_OF0:
				sequence_GithubwfRootJobsPatternProperties0OneOf0(context, (GithubwfRootJobsPatternProperties0OneOf0) semanticObject); 
				return; 
			case GithubwfPackage.JOB_NEEDS:
				sequence_JobNeeds(context, (JobNeeds) semanticObject); 
				return; 
			case GithubwfPackage.JOB_NEEDS_ADDITIONAL_PROPERTIES:
				sequence_JobNeedsAdditionalProperties(context, (JobNeedsAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.JOB_NEEDS_ITEMS:
				sequence_JobNeedsItems(context, (JobNeedsItems) semanticObject); 
				return; 
			case GithubwfPackage.JOB_NEEDS_TYPE_ARRAY:
				sequence_JobNeedsTypeArray(context, (JobNeedsTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.JOB_NEEDS_TYPE_BOOLEAN:
				sequence_JobNeedsTypeBoolean(context, (JobNeedsTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.JOB_NEEDS_TYPE_INTEGER:
				sequence_JobNeedsTypeInteger(context, (JobNeedsTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.JOB_NEEDS_TYPE_NULL:
				sequence_JobNeedsTypeNull(context, (JobNeedsTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.JOB_NEEDS_TYPE_NUMBER:
				sequence_JobNeedsTypeNumber(context, (JobNeedsTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.JOB_NEEDS_TYPE_OBJECT:
				sequence_JobNeedsTypeObject(context, (JobNeedsTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.JOB_NEEDS_TYPE_STRING:
				sequence_JobNeedsTypeString(context, (JobNeedsTypeString) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB:
				sequence_NormalJob(context, (NormalJob) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONCURRENCY:
				sequence_NormalJobConcurrency(context, (NormalJobConcurrency) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONCURRENCY_ADDITIONAL_PROPERTIES:
				sequence_NormalJobConcurrencyAdditionalProperties(context, (NormalJobConcurrencyAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONCURRENCY_ITEMS:
				sequence_NormalJobConcurrencyItems(context, (NormalJobConcurrencyItems) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONCURRENCY_TYPE_ARRAY:
				sequence_NormalJobConcurrencyTypeArray(context, (NormalJobConcurrencyTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONCURRENCY_TYPE_BOOLEAN:
				sequence_NormalJobConcurrencyTypeBoolean(context, (NormalJobConcurrencyTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONCURRENCY_TYPE_INTEGER:
				sequence_NormalJobConcurrencyTypeInteger(context, (NormalJobConcurrencyTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONCURRENCY_TYPE_NULL:
				sequence_NormalJobConcurrencyTypeNull(context, (NormalJobConcurrencyTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONCURRENCY_TYPE_NUMBER:
				sequence_NormalJobConcurrencyTypeNumber(context, (NormalJobConcurrencyTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONCURRENCY_TYPE_OBJECT:
				sequence_NormalJobConcurrencyTypeObject(context, (NormalJobConcurrencyTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONCURRENCY_TYPE_STRING:
				sequence_NormalJobConcurrencyTypeString(context, (NormalJobConcurrencyTypeString) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONTAINER:
				sequence_NormalJobContainer(context, (NormalJobContainer) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONTAINER_ADDITIONAL_PROPERTIES:
				sequence_NormalJobContainerAdditionalProperties(context, (NormalJobContainerAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONTAINER_ITEMS:
				sequence_NormalJobContainerItems(context, (NormalJobContainerItems) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONTAINER_TYPE_ARRAY:
				sequence_NormalJobContainerTypeArray(context, (NormalJobContainerTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONTAINER_TYPE_BOOLEAN:
				sequence_NormalJobContainerTypeBoolean(context, (NormalJobContainerTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONTAINER_TYPE_INTEGER:
				sequence_NormalJobContainerTypeInteger(context, (NormalJobContainerTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONTAINER_TYPE_NULL:
				sequence_NormalJobContainerTypeNull(context, (NormalJobContainerTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONTAINER_TYPE_NUMBER:
				sequence_NormalJobContainerTypeNumber(context, (NormalJobContainerTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONTAINER_TYPE_OBJECT:
				sequence_NormalJobContainerTypeObject(context, (NormalJobContainerTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONTAINER_TYPE_STRING:
				sequence_NormalJobContainerTypeString(context, (NormalJobContainerTypeString) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONTINUE_45ON_45ERROR:
				sequence_NormalJobContinue_45on_45error(context, (NormalJobContinue_45on_45error) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONTINUE_45ON_45ERROR_ADDITIONAL_PROPERTIES:
				sequence_NormalJobContinue_45on_45errorAdditionalProperties(context, (NormalJobContinue_45on_45errorAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONTINUE_45ON_45ERROR_ITEMS:
				sequence_NormalJobContinue_45on_45errorItems(context, (NormalJobContinue_45on_45errorItems) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONTINUE_45ON_45ERROR_TYPE_ARRAY:
				sequence_NormalJobContinue_45on_45errorTypeArray(context, (NormalJobContinue_45on_45errorTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONTINUE_45ON_45ERROR_TYPE_BOOLEAN:
				sequence_NormalJobContinue_45on_45errorTypeBoolean(context, (NormalJobContinue_45on_45errorTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONTINUE_45ON_45ERROR_TYPE_INTEGER:
				sequence_NormalJobContinue_45on_45errorTypeInteger(context, (NormalJobContinue_45on_45errorTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONTINUE_45ON_45ERROR_TYPE_NULL:
				sequence_NormalJobContinue_45on_45errorTypeNull(context, (NormalJobContinue_45on_45errorTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONTINUE_45ON_45ERROR_TYPE_NUMBER:
				sequence_NormalJobContinue_45on_45errorTypeNumber(context, (NormalJobContinue_45on_45errorTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONTINUE_45ON_45ERROR_TYPE_OBJECT:
				sequence_NormalJobContinue_45on_45errorTypeObject(context, (NormalJobContinue_45on_45errorTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONTINUE_45ON_45ERROR_TYPE_STRING:
				sequence_NormalJobContinue_45on_45errorTypeString(context, (NormalJobContinue_45on_45errorTypeString) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_DEFAULTS:
				sequence_NormalJobDefaults(context, (NormalJobDefaults) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_ENV:
				sequence_NormalJobEnv(context, (NormalJobEnv) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_ENVIRONMENT:
				sequence_NormalJobEnvironment(context, (NormalJobEnvironment) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_ENVIRONMENT_ADDITIONAL_PROPERTIES:
				sequence_NormalJobEnvironmentAdditionalProperties(context, (NormalJobEnvironmentAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_ENVIRONMENT_ITEMS:
				sequence_NormalJobEnvironmentItems(context, (NormalJobEnvironmentItems) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_ENVIRONMENT_TYPE_ARRAY:
				sequence_NormalJobEnvironmentTypeArray(context, (NormalJobEnvironmentTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_ENVIRONMENT_TYPE_BOOLEAN:
				sequence_NormalJobEnvironmentTypeBoolean(context, (NormalJobEnvironmentTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_ENVIRONMENT_TYPE_INTEGER:
				sequence_NormalJobEnvironmentTypeInteger(context, (NormalJobEnvironmentTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_ENVIRONMENT_TYPE_NULL:
				sequence_NormalJobEnvironmentTypeNull(context, (NormalJobEnvironmentTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_ENVIRONMENT_TYPE_NUMBER:
				sequence_NormalJobEnvironmentTypeNumber(context, (NormalJobEnvironmentTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_ENVIRONMENT_TYPE_OBJECT:
				sequence_NormalJobEnvironmentTypeObject(context, (NormalJobEnvironmentTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_ENVIRONMENT_TYPE_STRING:
				sequence_NormalJobEnvironmentTypeString(context, (NormalJobEnvironmentTypeString) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_IF:
				sequence_NormalJobIf(context, (NormalJobIf) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_IF_TYPE_BOOLEAN:
				sequence_NormalJobIfTypeBoolean(context, (NormalJobIfTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_IF_TYPE_NUMBER:
				sequence_NormalJobIfTypeNumber(context, (NormalJobIfTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_IF_TYPE_STRING:
				sequence_NormalJobIfTypeString(context, (NormalJobIfTypeString) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_NAME:
				sequence_NormalJobName(context, (NormalJobName) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_NEEDS:
				sequence_NormalJobNeeds(context, (NormalJobNeeds) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_OUTPUTS:
				sequence_NormalJobOutputs(context, (NormalJobOutputs) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_OUTPUTS_ADDITIONAL_PROPERTIES:
				sequence_NormalJobOutputsAdditionalProperties(context, (NormalJobOutputsAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_PERMISSIONS:
				sequence_NormalJobPermissions(context, (NormalJobPermissions) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON:
				sequence_NormalJobRuns_45on(context, (NormalJobRuns_45on) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_ADDITIONAL_PROPERTIES:
				sequence_NormalJobRuns_45onAdditionalProperties(context, (NormalJobRuns_45onAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_ITEMS:
				sequence_NormalJobRuns_45onItems(context, (NormalJobRuns_45onItems) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_TYPE_ARRAY:
				sequence_NormalJobRuns_45onTypeArray(context, (NormalJobRuns_45onTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_TYPE_BOOLEAN:
				sequence_NormalJobRuns_45onTypeBoolean(context, (NormalJobRuns_45onTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_TYPE_INTEGER:
				sequence_NormalJobRuns_45onTypeInteger(context, (NormalJobRuns_45onTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_TYPE_NULL:
				sequence_NormalJobRuns_45onTypeNull(context, (NormalJobRuns_45onTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_TYPE_NUMBER:
				sequence_NormalJobRuns_45onTypeNumber(context, (NormalJobRuns_45onTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_TYPE_OBJECT:
				sequence_NormalJobRuns_45onTypeObject(context, (NormalJobRuns_45onTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_RUNS_45ON_TYPE_STRING:
				sequence_NormalJobRuns_45onTypeString(context, (NormalJobRuns_45onTypeString) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_SERVICES:
				sequence_NormalJobServices(context, (NormalJobServices) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_SERVICES_ADDITIONAL_PROPERTIES:
				sequence_NormalJobServicesAdditionalProperties(context, (NormalJobServicesAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS:
				sequence_NormalJobSteps(context, (NormalJobSteps) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS:
				sequence_NormalJobStepsItems(context, (NormalJobStepsItems) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ADDITIONAL_PROPERTIES:
				sequence_NormalJobStepsItemsAdditionalProperties(context, (NormalJobStepsItemsAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ITEMS:
				sequence_NormalJobStepsItemsItems(context, (NormalJobStepsItemsItems) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_TYPE_ARRAY:
				sequence_NormalJobStepsItemsTypeArray(context, (NormalJobStepsItemsTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_TYPE_BOOLEAN:
				sequence_NormalJobStepsItemsTypeBoolean(context, (NormalJobStepsItemsTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_TYPE_INTEGER:
				sequence_NormalJobStepsItemsTypeInteger(context, (NormalJobStepsItemsTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_TYPE_NULL:
				sequence_NormalJobStepsItemsTypeNull(context, (NormalJobStepsItemsTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_TYPE_NUMBER:
				sequence_NormalJobStepsItemsTypeNumber(context, (NormalJobStepsItemsTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_TYPE_OBJECT:
				sequence_NormalJobStepsItemsTypeObject(context, (NormalJobStepsItemsTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_TYPE_STRING:
				sequence_NormalJobStepsItemsTypeString(context, (NormalJobStepsItemsTypeString) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY:
				sequence_NormalJobStrategy(context, (NormalJobStrategy) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_FAIL_45FAST:
				sequence_NormalJobStrategyFail_45fast(context, (NormalJobStrategyFail_45fast) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX:
				sequence_NormalJobStrategyMatrix(context, (NormalJobStrategyMatrix) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES:
				sequence_NormalJobStrategyMatrixAdditionalProperties(context, (NormalJobStrategyMatrixAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES_ADDITIONAL_PROPERTIES:
				sequence_NormalJobStrategyMatrixAdditionalPropertiesAdditionalProperties(context, (NormalJobStrategyMatrixAdditionalPropertiesAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES_ITEMS:
				sequence_NormalJobStrategyMatrixAdditionalPropertiesItems(context, (NormalJobStrategyMatrixAdditionalPropertiesItems) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES_TYPE_ARRAY:
				sequence_NormalJobStrategyMatrixAdditionalPropertiesTypeArray(context, (NormalJobStrategyMatrixAdditionalPropertiesTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES_TYPE_BOOLEAN:
				sequence_NormalJobStrategyMatrixAdditionalPropertiesTypeBoolean(context, (NormalJobStrategyMatrixAdditionalPropertiesTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES_TYPE_INTEGER:
				sequence_NormalJobStrategyMatrixAdditionalPropertiesTypeInteger(context, (NormalJobStrategyMatrixAdditionalPropertiesTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES_TYPE_NULL:
				sequence_NormalJobStrategyMatrixAdditionalPropertiesTypeNull(context, (NormalJobStrategyMatrixAdditionalPropertiesTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES_TYPE_NUMBER:
				sequence_NormalJobStrategyMatrixAdditionalPropertiesTypeNumber(context, (NormalJobStrategyMatrixAdditionalPropertiesTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES_TYPE_OBJECT:
				sequence_NormalJobStrategyMatrixAdditionalPropertiesTypeObject(context, (NormalJobStrategyMatrixAdditionalPropertiesTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES_TYPE_STRING:
				sequence_NormalJobStrategyMatrixAdditionalPropertiesTypeString(context, (NormalJobStrategyMatrixAdditionalPropertiesTypeString) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_ITEMS:
				sequence_NormalJobStrategyMatrixItems(context, (NormalJobStrategyMatrixItems) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_PATTERN_PROPERTIES0:
				sequence_NormalJobStrategyMatrixPatternProperties0(context, (NormalJobStrategyMatrixPatternProperties0) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_PATTERN_PROPERTIES0_ITEMS:
				sequence_NormalJobStrategyMatrixPatternProperties0Items(context, (NormalJobStrategyMatrixPatternProperties0Items) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_PATTERN_PROPERTIES0_ITEMS_ADDITIONAL_PROPERTIES:
				sequence_NormalJobStrategyMatrixPatternProperties0ItemsAdditionalProperties(context, (NormalJobStrategyMatrixPatternProperties0ItemsAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_TYPE_ARRAY:
				sequence_NormalJobStrategyMatrixTypeArray(context, (NormalJobStrategyMatrixTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_TYPE_BOOLEAN:
				sequence_NormalJobStrategyMatrixTypeBoolean(context, (NormalJobStrategyMatrixTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_TYPE_INTEGER:
				sequence_NormalJobStrategyMatrixTypeInteger(context, (NormalJobStrategyMatrixTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_TYPE_NULL:
				sequence_NormalJobStrategyMatrixTypeNull(context, (NormalJobStrategyMatrixTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_TYPE_NUMBER:
				sequence_NormalJobStrategyMatrixTypeNumber(context, (NormalJobStrategyMatrixTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_TYPE_OBJECT:
				sequence_NormalJobStrategyMatrixTypeObject(context, (NormalJobStrategyMatrixTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_TYPE_STRING:
				sequence_NormalJobStrategyMatrixTypeString(context, (NormalJobStrategyMatrixTypeString) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MAX_45PARALLEL:
				sequence_NormalJobStrategyMax_45parallel(context, (NormalJobStrategyMax_45parallel) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_TIMEOUT_45MINUTES:
				sequence_NormalJobTimeout_45minutes(context, (NormalJobTimeout_45minutes) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS:
				sequence_Permissions(context, (Permissions) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_ADDITIONAL_PROPERTIES:
				sequence_PermissionsAdditionalProperties(context, (PermissionsAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_ITEMS:
				sequence_PermissionsItems(context, (PermissionsItems) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_TYPE_ARRAY:
				sequence_PermissionsTypeArray(context, (PermissionsTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_TYPE_BOOLEAN:
				sequence_PermissionsTypeBoolean(context, (PermissionsTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_TYPE_INTEGER:
				sequence_PermissionsTypeInteger(context, (PermissionsTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_TYPE_NULL:
				sequence_PermissionsTypeNull(context, (PermissionsTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_TYPE_NUMBER:
				sequence_PermissionsTypeNumber(context, (PermissionsTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_TYPE_OBJECT:
				sequence_PermissionsTypeObject(context, (PermissionsTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_TYPE_STRING:
				sequence_PermissionsTypeString(context, (PermissionsTypeString) semanticObject); 
				return; 
			case GithubwfPackage.SHELL:
				sequence_Shell(context, (Shell) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_ADDITIONAL_PROPERTIES:
				sequence_ShellAdditionalProperties(context, (ShellAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_ITEMS:
				sequence_ShellItems(context, (ShellItems) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_TYPE_ARRAY:
				sequence_ShellTypeArray(context, (ShellTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_TYPE_BOOLEAN:
				sequence_ShellTypeBoolean(context, (ShellTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_TYPE_INTEGER:
				sequence_ShellTypeInteger(context, (ShellTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_TYPE_NULL:
				sequence_ShellTypeNull(context, (ShellTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_TYPE_NUMBER:
				sequence_ShellTypeNumber(context, (ShellTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_TYPE_OBJECT:
				sequence_ShellTypeObject(context, (ShellTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_TYPE_STRING:
				sequence_ShellTypeString(context, (ShellTypeString) semanticObject); 
				return; 
			case GithubwfPackage.WORKING_45DIRECTORY:
				sequence_Working_45directory(context, (Working_45directory) semanticObject); 
				return; 
			}
		else if (epackage == JsonMMPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JsonMMPackage.ARRAY_VALUE:
				sequence_ArrayValue(context, (ArrayValue) semanticObject); 
				return; 
			case JsonMMPackage.BOOLEAN_VALUE:
				sequence_BooleanValue(context, (BooleanValue) semanticObject); 
				return; 
			case JsonMMPackage.JSON_DOCUMENT:
				sequence_JsonDocument(context, (JsonDocument) semanticObject); 
				return; 
			case JsonMMPackage.KEY_VALUE_PAIR:
				sequence_KeyValuePair(context, (KeyValuePair) semanticObject); 
				return; 
			case JsonMMPackage.NULL_VALUE:
				sequence_NullValue(context, (NullValue) semanticObject); 
				return; 
			case JsonMMPackage.NUMBER_VALUE:
				sequence_NumberValue(context, (NumberValue) semanticObject); 
				return; 
			case JsonMMPackage.OBJECT_VALUE:
				sequence_ObjectValue(context, (ObjectValue) semanticObject); 
				return; 
			case JsonMMPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Value returns ArrayValue
	 *     ArrayValue returns ArrayValue
	 *
	 * Constraint:
	 *     (value+=Value value+=Value*)?
	 */
	protected void sequence_ArrayValue(ISerializationContext context, ArrayValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns BooleanValue
	 *     BooleanValue returns BooleanValue
	 *
	 * Constraint:
	 *     value=EBoolean
	 */
	protected void sequence_BooleanValue(ISerializationContext context, BooleanValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanValueAccess().getValueEBooleanParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationPropertiesAbstract returns ConfigurationAdditionalProperties
	 *     ConfigurationAdditionalProperties returns ConfigurationAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_ConfigurationAdditionalProperties(ISerializationContext context, ConfigurationAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getConfigurationAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationItems returns ConfigurationItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_ConfigurationItems(ISerializationContext context, ConfigurationItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationAbstract returns ConfigurationTypeArray
	 *     ConfigurationTypeArray returns ConfigurationTypeArray
	 *
	 * Constraint:
	 *     (configuration+=ConfigurationItems configuration+=ConfigurationItems*)?
	 */
	protected void sequence_ConfigurationTypeArray(ISerializationContext context, ConfigurationTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationAbstract returns ConfigurationTypeBoolean
	 *     ConfigurationTypeBoolean returns ConfigurationTypeBoolean
	 *
	 * Constraint:
	 *     configuration=EBooleanObject
	 */
	protected void sequence_ConfigurationTypeBoolean(ISerializationContext context, ConfigurationTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeBoolean_Configuration()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeBoolean_Configuration()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationTypeBooleanAccess().getConfigurationEBooleanObjectParserRuleCall_0(), semanticObject.getConfiguration());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationAbstract returns ConfigurationTypeInteger
	 *     ConfigurationTypeInteger returns ConfigurationTypeInteger
	 *
	 * Constraint:
	 *     configuration=EDoubleObject
	 */
	protected void sequence_ConfigurationTypeInteger(ISerializationContext context, ConfigurationTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeInteger_Configuration()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeInteger_Configuration()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationTypeIntegerAccess().getConfigurationEDoubleObjectParserRuleCall_0(), semanticObject.getConfiguration());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationAbstract returns ConfigurationTypeNull
	 *     ConfigurationTypeNull returns ConfigurationTypeNull
	 *
	 * Constraint:
	 *     configuration=NullValue
	 */
	protected void sequence_ConfigurationTypeNull(ISerializationContext context, ConfigurationTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeNull_Configuration()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeNull_Configuration()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationTypeNullAccess().getConfigurationNullValueParserRuleCall_0(), semanticObject.getConfiguration());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationAbstract returns ConfigurationTypeNumber
	 *     ConfigurationTypeNumber returns ConfigurationTypeNumber
	 *
	 * Constraint:
	 *     configuration=EDoubleObject
	 */
	protected void sequence_ConfigurationTypeNumber(ISerializationContext context, ConfigurationTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeNumber_Configuration()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeNumber_Configuration()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationTypeNumberAccess().getConfigurationEDoubleObjectParserRuleCall_0(), semanticObject.getConfiguration());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationAbstract returns ConfigurationTypeObject
	 *     ConfigurationTypeObject returns ConfigurationTypeObject
	 *
	 * Constraint:
	 *     (configuration+=ConfigurationPropertiesAbstract configuration+=ConfigurationPropertiesAbstract*)?
	 */
	protected void sequence_ConfigurationTypeObject(ISerializationContext context, ConfigurationTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationAbstract returns ConfigurationTypeString
	 *     ConfigurationTypeString returns ConfigurationTypeString
	 *
	 * Constraint:
	 *     configuration=EString
	 */
	protected void sequence_ConfigurationTypeString(ISerializationContext context, ConfigurationTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeString_Configuration()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeString_Configuration()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationTypeStringAccess().getConfigurationEStringParserRuleCall_0(), semanticObject.getConfiguration());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Configuration returns Configuration
	 *
	 * Constraint:
	 *     configuration=ConfigurationAbstract
	 */
	protected void sequence_Configuration(ISerializationContext context, Configuration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfiguration_Configuration()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfiguration_Configuration()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationAccess().getConfigurationConfigurationAbstractParserRuleCall_0(), semanticObject.getConfiguration());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerCredentialsPropertiesAbstract returns ContainerCredentialsAdditionalProperties
	 *     ContainerCredentialsAdditionalProperties returns ContainerCredentialsAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_ContainerCredentialsAdditionalProperties(ISerializationContext context, ContainerCredentialsAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerCredentialsAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerCredentialsAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerCredentialsAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerCredentialsAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerCredentialsAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getContainerCredentialsAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerCredentialsPropertiesAbstract returns ContainerCredentialsPassword
	 *     ContainerCredentialsPassword returns ContainerCredentialsPassword
	 *
	 * Constraint:
	 *     password=EString
	 */
	protected void sequence_ContainerCredentialsPassword(ISerializationContext context, ContainerCredentialsPassword semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerCredentialsPassword_Password()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerCredentialsPassword_Password()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerCredentialsPasswordAccess().getPasswordEStringParserRuleCall_2_0(), semanticObject.getPassword());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerCredentialsPropertiesAbstract returns ContainerCredentialsUsername
	 *     ContainerCredentialsUsername returns ContainerCredentialsUsername
	 *
	 * Constraint:
	 *     username=EString
	 */
	protected void sequence_ContainerCredentialsUsername(ISerializationContext context, ContainerCredentialsUsername semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerCredentialsUsername_Username()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerCredentialsUsername_Username()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerCredentialsUsernameAccess().getUsernameEStringParserRuleCall_2_0(), semanticObject.getUsername());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPropertiesAbstract returns ContainerCredentials
	 *     ContainerCredentials returns ContainerCredentials
	 *
	 * Constraint:
	 *     (credentials+=ContainerCredentialsPropertiesAbstract credentials+=ContainerCredentialsPropertiesAbstract*)?
	 */
	protected void sequence_ContainerCredentials(ISerializationContext context, ContainerCredentials semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPropertiesAbstract returns ContainerEnv
	 *     ContainerEnv returns ContainerEnv
	 *
	 * Constraint:
	 *     env=Env
	 */
	protected void sequence_ContainerEnv(ISerializationContext context, ContainerEnv semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerEnv_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerEnv_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerEnvAccess().getEnvEnvParserRuleCall_2_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPropertiesAbstract returns ContainerImage
	 *     ContainerImage returns ContainerImage
	 *
	 * Constraint:
	 *     image=EString
	 */
	protected void sequence_ContainerImage(ISerializationContext context, ContainerImage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerImage_Image()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerImage_Image()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerImageAccess().getImageEStringParserRuleCall_2_0(), semanticObject.getImage());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPropertiesAbstract returns ContainerOptions
	 *     ContainerOptions returns ContainerOptions
	 *
	 * Constraint:
	 *     options=EString
	 */
	protected void sequence_ContainerOptions(ISerializationContext context, ContainerOptions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerOptions_Options()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerOptions_Options()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerOptionsAccess().getOptionsEStringParserRuleCall_2_0(), semanticObject.getOptions());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPortsItemsPropertiesAbstract returns ContainerPortsItemsAdditionalProperties
	 *     ContainerPortsItemsAdditionalProperties returns ContainerPortsItemsAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_ContainerPortsItemsAdditionalProperties(ISerializationContext context, ContainerPortsItemsAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerPortsItemsAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getContainerPortsItemsAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPortsItemsItems returns ContainerPortsItemsItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_ContainerPortsItemsItems(ISerializationContext context, ContainerPortsItemsItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerPortsItemsItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPortsItemsAbstract returns ContainerPortsItemsTypeArray
	 *     ContainerPortsItemsTypeArray returns ContainerPortsItemsTypeArray
	 *
	 * Constraint:
	 *     (items+=ContainerPortsItemsItems items+=ContainerPortsItemsItems*)?
	 */
	protected void sequence_ContainerPortsItemsTypeArray(ISerializationContext context, ContainerPortsItemsTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPortsItemsAbstract returns ContainerPortsItemsTypeBoolean
	 *     ContainerPortsItemsTypeBoolean returns ContainerPortsItemsTypeBoolean
	 *
	 * Constraint:
	 *     items=EBooleanObject
	 */
	protected void sequence_ContainerPortsItemsTypeBoolean(ISerializationContext context, ContainerPortsItemsTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsTypeBoolean_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsTypeBoolean_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerPortsItemsTypeBooleanAccess().getItemsEBooleanObjectParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPortsItemsAbstract returns ContainerPortsItemsTypeInteger
	 *     ContainerPortsItemsTypeInteger returns ContainerPortsItemsTypeInteger
	 *
	 * Constraint:
	 *     items=EDoubleObject
	 */
	protected void sequence_ContainerPortsItemsTypeInteger(ISerializationContext context, ContainerPortsItemsTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsTypeInteger_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsTypeInteger_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerPortsItemsTypeIntegerAccess().getItemsEDoubleObjectParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPortsItemsAbstract returns ContainerPortsItemsTypeNull
	 *     ContainerPortsItemsTypeNull returns ContainerPortsItemsTypeNull
	 *
	 * Constraint:
	 *     items=NullValue
	 */
	protected void sequence_ContainerPortsItemsTypeNull(ISerializationContext context, ContainerPortsItemsTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsTypeNull_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsTypeNull_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerPortsItemsTypeNullAccess().getItemsNullValueParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPortsItemsAbstract returns ContainerPortsItemsTypeNumber
	 *     ContainerPortsItemsTypeNumber returns ContainerPortsItemsTypeNumber
	 *
	 * Constraint:
	 *     items=EDoubleObject
	 */
	protected void sequence_ContainerPortsItemsTypeNumber(ISerializationContext context, ContainerPortsItemsTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsTypeNumber_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsTypeNumber_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerPortsItemsTypeNumberAccess().getItemsEDoubleObjectParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPortsItemsAbstract returns ContainerPortsItemsTypeObject
	 *     ContainerPortsItemsTypeObject returns ContainerPortsItemsTypeObject
	 *
	 * Constraint:
	 *     (items+=ContainerPortsItemsPropertiesAbstract items+=ContainerPortsItemsPropertiesAbstract*)?
	 */
	protected void sequence_ContainerPortsItemsTypeObject(ISerializationContext context, ContainerPortsItemsTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPortsItemsAbstract returns ContainerPortsItemsTypeString
	 *     ContainerPortsItemsTypeString returns ContainerPortsItemsTypeString
	 *
	 * Constraint:
	 *     items=EString
	 */
	protected void sequence_ContainerPortsItemsTypeString(ISerializationContext context, ContainerPortsItemsTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsTypeString_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsTypeString_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerPortsItemsTypeStringAccess().getItemsEStringParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPortsItems returns ContainerPortsItems
	 *
	 * Constraint:
	 *     items=ContainerPortsItemsAbstract
	 */
	protected void sequence_ContainerPortsItems(ISerializationContext context, ContainerPortsItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerPortsItemsAccess().getItemsContainerPortsItemsAbstractParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPropertiesAbstract returns ContainerPorts
	 *     ContainerPorts returns ContainerPorts
	 *
	 * Constraint:
	 *     (ports+=ContainerPortsItems ports+=ContainerPortsItems*)
	 */
	protected void sequence_ContainerPorts(ISerializationContext context, ContainerPorts semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ContainerVolumesItems returns ContainerVolumesItems
	 *
	 * Constraint:
	 *     items=EString
	 */
	protected void sequence_ContainerVolumesItems(ISerializationContext context, ContainerVolumesItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerVolumesItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerVolumesItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerVolumesItemsAccess().getItemsEStringParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPropertiesAbstract returns ContainerVolumes
	 *     ContainerVolumes returns ContainerVolumes
	 *
	 * Constraint:
	 *     (volumes+=ContainerVolumesItems volumes+=ContainerVolumesItems*)
	 */
	protected void sequence_ContainerVolumes(ISerializationContext context, ContainerVolumes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Container returns Container
	 *
	 * Constraint:
	 *     (container+=ContainerPropertiesAbstract container+=ContainerPropertiesAbstract*)?
	 */
	protected void sequence_Container(ISerializationContext context, Container semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefaultsRunPropertiesAbstract returns DefaultsRunShell
	 *     DefaultsRunShell returns DefaultsRunShell
	 *
	 * Constraint:
	 *     shell=Shell
	 */
	protected void sequence_DefaultsRunShell(ISerializationContext context, DefaultsRunShell semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getDefaultsRunShell_Shell()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getDefaultsRunShell_Shell()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefaultsRunShellAccess().getShellShellParserRuleCall_2_0(), semanticObject.getShell());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DefaultsRunPropertiesAbstract returns DefaultsRunWorking_45directory
	 *     DefaultsRunWorking_45directory returns DefaultsRunWorking_45directory
	 *
	 * Constraint:
	 *     working_45directory=Working_45directory
	 */
	protected void sequence_DefaultsRunWorking_45directory(ISerializationContext context, DefaultsRunWorking_45directory semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getDefaultsRunWorking_45directory_Working_45directory()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getDefaultsRunWorking_45directory_Working_45directory()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefaultsRunWorking_45directoryAccess().getWorking_45directoryWorking_45directoryParserRuleCall_2_0(), semanticObject.getWorking_45directory());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DefaultsPropertiesAbstract returns DefaultsRun
	 *     DefaultsRun returns DefaultsRun
	 *
	 * Constraint:
	 *     (run+=DefaultsRunPropertiesAbstract run+=DefaultsRunPropertiesAbstract*)
	 */
	protected void sequence_DefaultsRun(ISerializationContext context, DefaultsRun semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Defaults returns Defaults
	 *
	 * Constraint:
	 *     (defaults+=DefaultsPropertiesAbstract defaults+=DefaultsPropertiesAbstract*)
	 */
	protected void sequence_Defaults(ISerializationContext context, Defaults semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnvPropertiesAbstract returns EnvAdditionalProperties
	 *     EnvAdditionalProperties returns EnvAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_EnvAdditionalProperties(ISerializationContext context, EnvAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getEnvAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvItems returns EnvItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_EnvItems(ISerializationContext context, EnvItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeArray
	 *     EnvTypeArray returns EnvTypeArray
	 *
	 * Constraint:
	 *     (env+=EnvItems env+=EnvItems*)?
	 */
	protected void sequence_EnvTypeArray(ISerializationContext context, EnvTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeBoolean
	 *     EnvTypeBoolean returns EnvTypeBoolean
	 *
	 * Constraint:
	 *     env=EBooleanObject
	 */
	protected void sequence_EnvTypeBoolean(ISerializationContext context, EnvTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeBoolean_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeBoolean_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeBooleanAccess().getEnvEBooleanObjectParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeInteger
	 *     EnvTypeInteger returns EnvTypeInteger
	 *
	 * Constraint:
	 *     env=EDoubleObject
	 */
	protected void sequence_EnvTypeInteger(ISerializationContext context, EnvTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeInteger_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeInteger_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeIntegerAccess().getEnvEDoubleObjectParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeNull
	 *     EnvTypeNull returns EnvTypeNull
	 *
	 * Constraint:
	 *     env=NullValue
	 */
	protected void sequence_EnvTypeNull(ISerializationContext context, EnvTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNull_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNull_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeNullAccess().getEnvNullValueParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeNumber
	 *     EnvTypeNumber returns EnvTypeNumber
	 *
	 * Constraint:
	 *     env=EDoubleObject
	 */
	protected void sequence_EnvTypeNumber(ISerializationContext context, EnvTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNumber_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNumber_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeNumberAccess().getEnvEDoubleObjectParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeObject
	 *     EnvTypeObject returns EnvTypeObject
	 *
	 * Constraint:
	 *     (env+=EnvPropertiesAbstract env+=EnvPropertiesAbstract*)?
	 */
	protected void sequence_EnvTypeObject(ISerializationContext context, EnvTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeString
	 *     EnvTypeString returns EnvTypeString
	 *
	 * Constraint:
	 *     env=EString
	 */
	protected void sequence_EnvTypeString(ISerializationContext context, EnvTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeString_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeString_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeStringAccess().getEnvEStringParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Env returns Env
	 *
	 * Constraint:
	 *     env=EnvAbstract
	 */
	protected void sequence_Env(ISerializationContext context, Env semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnv_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnv_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvAccess().getEnvEnvAbstractParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GithubwfRootJobsPatternProperties0OneOf0 returns GithubwfRootJobsPatternProperties0OneOf0
	 *
	 * Constraint:
	 *     patternProperties0=NormalJob
	 */
	protected void sequence_GithubwfRootJobsPatternProperties0OneOf0(ISerializationContext context, GithubwfRootJobsPatternProperties0OneOf0 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0OneOf0_PatternProperties0()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0OneOf0_PatternProperties0()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootJobsPatternProperties0OneOf0Access().getPatternProperties0NormalJobParserRuleCall_0(), semanticObject.getPatternProperties0());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JobNeedsPropertiesAbstract returns JobNeedsAdditionalProperties
	 *     JobNeedsAdditionalProperties returns JobNeedsAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_JobNeedsAdditionalProperties(ISerializationContext context, JobNeedsAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJobNeedsAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getJobNeedsAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JobNeedsItems returns JobNeedsItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_JobNeedsItems(ISerializationContext context, JobNeedsItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJobNeedsItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JobNeedsAbstract returns JobNeedsTypeArray
	 *     JobNeedsTypeArray returns JobNeedsTypeArray
	 *
	 * Constraint:
	 *     (jobNeeds+=JobNeedsItems jobNeeds+=JobNeedsItems*)?
	 */
	protected void sequence_JobNeedsTypeArray(ISerializationContext context, JobNeedsTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JobNeedsAbstract returns JobNeedsTypeBoolean
	 *     JobNeedsTypeBoolean returns JobNeedsTypeBoolean
	 *
	 * Constraint:
	 *     jobNeeds=EBooleanObject
	 */
	protected void sequence_JobNeedsTypeBoolean(ISerializationContext context, JobNeedsTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsTypeBoolean_JobNeeds()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsTypeBoolean_JobNeeds()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJobNeedsTypeBooleanAccess().getJobNeedsEBooleanObjectParserRuleCall_0(), semanticObject.getJobNeeds());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JobNeedsAbstract returns JobNeedsTypeInteger
	 *     JobNeedsTypeInteger returns JobNeedsTypeInteger
	 *
	 * Constraint:
	 *     jobNeeds=EDoubleObject
	 */
	protected void sequence_JobNeedsTypeInteger(ISerializationContext context, JobNeedsTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsTypeInteger_JobNeeds()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsTypeInteger_JobNeeds()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJobNeedsTypeIntegerAccess().getJobNeedsEDoubleObjectParserRuleCall_0(), semanticObject.getJobNeeds());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JobNeedsAbstract returns JobNeedsTypeNull
	 *     JobNeedsTypeNull returns JobNeedsTypeNull
	 *
	 * Constraint:
	 *     jobNeeds=NullValue
	 */
	protected void sequence_JobNeedsTypeNull(ISerializationContext context, JobNeedsTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsTypeNull_JobNeeds()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsTypeNull_JobNeeds()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJobNeedsTypeNullAccess().getJobNeedsNullValueParserRuleCall_0(), semanticObject.getJobNeeds());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JobNeedsAbstract returns JobNeedsTypeNumber
	 *     JobNeedsTypeNumber returns JobNeedsTypeNumber
	 *
	 * Constraint:
	 *     jobNeeds=EDoubleObject
	 */
	protected void sequence_JobNeedsTypeNumber(ISerializationContext context, JobNeedsTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsTypeNumber_JobNeeds()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsTypeNumber_JobNeeds()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJobNeedsTypeNumberAccess().getJobNeedsEDoubleObjectParserRuleCall_0(), semanticObject.getJobNeeds());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JobNeedsAbstract returns JobNeedsTypeObject
	 *     JobNeedsTypeObject returns JobNeedsTypeObject
	 *
	 * Constraint:
	 *     (jobNeeds+=JobNeedsPropertiesAbstract jobNeeds+=JobNeedsPropertiesAbstract*)?
	 */
	protected void sequence_JobNeedsTypeObject(ISerializationContext context, JobNeedsTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JobNeedsAbstract returns JobNeedsTypeString
	 *     JobNeedsTypeString returns JobNeedsTypeString
	 *
	 * Constraint:
	 *     jobNeeds=EString
	 */
	protected void sequence_JobNeedsTypeString(ISerializationContext context, JobNeedsTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsTypeString_JobNeeds()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsTypeString_JobNeeds()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJobNeedsTypeStringAccess().getJobNeedsEStringParserRuleCall_0(), semanticObject.getJobNeeds());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JobNeeds returns JobNeeds
	 *
	 * Constraint:
	 *     jobNeeds=JobNeedsAbstract
	 */
	protected void sequence_JobNeeds(ISerializationContext context, JobNeeds semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getJobNeeds_JobNeeds()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getJobNeeds_JobNeeds()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJobNeedsAccess().getJobNeedsJobNeedsAbstractParserRuleCall_0(), semanticObject.getJobNeeds());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JsonDocument returns JsonDocument
	 *
	 * Constraint:
	 *     value=Value
	 */
	protected void sequence_JsonDocument(ISerializationContext context, JsonDocument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonDocumentAccess().getValueValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeyValuePair returns KeyValuePair
	 *
	 * Constraint:
	 *     (key=EString value=Value)
	 */
	protected void sequence_KeyValuePair(ISerializationContext context, KeyValuePair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeyValuePairAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getKeyValuePairAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobConcurrencyPropertiesAbstract returns NormalJobConcurrencyAdditionalProperties
	 *     NormalJobConcurrencyAdditionalProperties returns NormalJobConcurrencyAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_NormalJobConcurrencyAdditionalProperties(ISerializationContext context, NormalJobConcurrencyAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobConcurrencyAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobConcurrencyAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobConcurrencyAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobConcurrencyAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobConcurrencyAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getNormalJobConcurrencyAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobConcurrencyItems returns NormalJobConcurrencyItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_NormalJobConcurrencyItems(ISerializationContext context, NormalJobConcurrencyItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobConcurrencyItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobConcurrencyItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobConcurrencyItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobConcurrencyAbstract returns NormalJobConcurrencyTypeArray
	 *     NormalJobConcurrencyTypeArray returns NormalJobConcurrencyTypeArray
	 *
	 * Constraint:
	 *     (concurrency+=NormalJobConcurrencyItems concurrency+=NormalJobConcurrencyItems*)?
	 */
	protected void sequence_NormalJobConcurrencyTypeArray(ISerializationContext context, NormalJobConcurrencyTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobConcurrencyAbstract returns NormalJobConcurrencyTypeBoolean
	 *     NormalJobConcurrencyTypeBoolean returns NormalJobConcurrencyTypeBoolean
	 *
	 * Constraint:
	 *     concurrency=EBooleanObject
	 */
	protected void sequence_NormalJobConcurrencyTypeBoolean(ISerializationContext context, NormalJobConcurrencyTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobConcurrencyTypeBoolean_Concurrency()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobConcurrencyTypeBoolean_Concurrency()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobConcurrencyTypeBooleanAccess().getConcurrencyEBooleanObjectParserRuleCall_2_0(), semanticObject.getConcurrency());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobConcurrencyAbstract returns NormalJobConcurrencyTypeInteger
	 *     NormalJobConcurrencyTypeInteger returns NormalJobConcurrencyTypeInteger
	 *
	 * Constraint:
	 *     concurrency=EDoubleObject
	 */
	protected void sequence_NormalJobConcurrencyTypeInteger(ISerializationContext context, NormalJobConcurrencyTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobConcurrencyTypeInteger_Concurrency()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobConcurrencyTypeInteger_Concurrency()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobConcurrencyTypeIntegerAccess().getConcurrencyEDoubleObjectParserRuleCall_2_0(), semanticObject.getConcurrency());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobConcurrencyAbstract returns NormalJobConcurrencyTypeNull
	 *     NormalJobConcurrencyTypeNull returns NormalJobConcurrencyTypeNull
	 *
	 * Constraint:
	 *     concurrency=NullValue
	 */
	protected void sequence_NormalJobConcurrencyTypeNull(ISerializationContext context, NormalJobConcurrencyTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobConcurrencyTypeNull_Concurrency()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobConcurrencyTypeNull_Concurrency()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobConcurrencyTypeNullAccess().getConcurrencyNullValueParserRuleCall_2_0(), semanticObject.getConcurrency());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobConcurrencyAbstract returns NormalJobConcurrencyTypeNumber
	 *     NormalJobConcurrencyTypeNumber returns NormalJobConcurrencyTypeNumber
	 *
	 * Constraint:
	 *     concurrency=EDoubleObject
	 */
	protected void sequence_NormalJobConcurrencyTypeNumber(ISerializationContext context, NormalJobConcurrencyTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobConcurrencyTypeNumber_Concurrency()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobConcurrencyTypeNumber_Concurrency()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobConcurrencyTypeNumberAccess().getConcurrencyEDoubleObjectParserRuleCall_2_0(), semanticObject.getConcurrency());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobConcurrencyAbstract returns NormalJobConcurrencyTypeObject
	 *     NormalJobConcurrencyTypeObject returns NormalJobConcurrencyTypeObject
	 *
	 * Constraint:
	 *     (concurrency+=NormalJobConcurrencyPropertiesAbstract concurrency+=NormalJobConcurrencyPropertiesAbstract*)?
	 */
	protected void sequence_NormalJobConcurrencyTypeObject(ISerializationContext context, NormalJobConcurrencyTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobConcurrencyAbstract returns NormalJobConcurrencyTypeString
	 *     NormalJobConcurrencyTypeString returns NormalJobConcurrencyTypeString
	 *
	 * Constraint:
	 *     concurrency=EString
	 */
	protected void sequence_NormalJobConcurrencyTypeString(ISerializationContext context, NormalJobConcurrencyTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobConcurrencyTypeString_Concurrency()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobConcurrencyTypeString_Concurrency()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobConcurrencyTypeStringAccess().getConcurrencyEStringParserRuleCall_2_0(), semanticObject.getConcurrency());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobPropertiesAbstract returns NormalJobConcurrency
	 *     NormalJobConcurrency returns NormalJobConcurrency
	 *
	 * Constraint:
	 *     concurrency=NormalJobConcurrencyAbstract
	 */
	protected void sequence_NormalJobConcurrency(ISerializationContext context, NormalJobConcurrency semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobConcurrency_Concurrency()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobConcurrency_Concurrency()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobConcurrencyAccess().getConcurrencyNormalJobConcurrencyAbstractParserRuleCall_0(), semanticObject.getConcurrency());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobContainerPropertiesAbstract returns NormalJobContainerAdditionalProperties
	 *     NormalJobContainerAdditionalProperties returns NormalJobContainerAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_NormalJobContainerAdditionalProperties(ISerializationContext context, NormalJobContainerAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContainerAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContainerAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContainerAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContainerAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobContainerAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getNormalJobContainerAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobContainerItems returns NormalJobContainerItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_NormalJobContainerItems(ISerializationContext context, NormalJobContainerItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContainerItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContainerItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobContainerItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobContainerAbstract returns NormalJobContainerTypeArray
	 *     NormalJobContainerTypeArray returns NormalJobContainerTypeArray
	 *
	 * Constraint:
	 *     (container+=NormalJobContainerItems container+=NormalJobContainerItems*)?
	 */
	protected void sequence_NormalJobContainerTypeArray(ISerializationContext context, NormalJobContainerTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobContainerAbstract returns NormalJobContainerTypeBoolean
	 *     NormalJobContainerTypeBoolean returns NormalJobContainerTypeBoolean
	 *
	 * Constraint:
	 *     container=EBooleanObject
	 */
	protected void sequence_NormalJobContainerTypeBoolean(ISerializationContext context, NormalJobContainerTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContainerTypeBoolean_Container()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContainerTypeBoolean_Container()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobContainerTypeBooleanAccess().getContainerEBooleanObjectParserRuleCall_2_0(), semanticObject.getContainer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobContainerAbstract returns NormalJobContainerTypeInteger
	 *     NormalJobContainerTypeInteger returns NormalJobContainerTypeInteger
	 *
	 * Constraint:
	 *     container=EDoubleObject
	 */
	protected void sequence_NormalJobContainerTypeInteger(ISerializationContext context, NormalJobContainerTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContainerTypeInteger_Container()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContainerTypeInteger_Container()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobContainerTypeIntegerAccess().getContainerEDoubleObjectParserRuleCall_2_0(), semanticObject.getContainer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobContainerAbstract returns NormalJobContainerTypeNull
	 *     NormalJobContainerTypeNull returns NormalJobContainerTypeNull
	 *
	 * Constraint:
	 *     container=NullValue
	 */
	protected void sequence_NormalJobContainerTypeNull(ISerializationContext context, NormalJobContainerTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContainerTypeNull_Container()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContainerTypeNull_Container()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobContainerTypeNullAccess().getContainerNullValueParserRuleCall_2_0(), semanticObject.getContainer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobContainerAbstract returns NormalJobContainerTypeNumber
	 *     NormalJobContainerTypeNumber returns NormalJobContainerTypeNumber
	 *
	 * Constraint:
	 *     container=EDoubleObject
	 */
	protected void sequence_NormalJobContainerTypeNumber(ISerializationContext context, NormalJobContainerTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContainerTypeNumber_Container()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContainerTypeNumber_Container()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobContainerTypeNumberAccess().getContainerEDoubleObjectParserRuleCall_2_0(), semanticObject.getContainer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobContainerAbstract returns NormalJobContainerTypeObject
	 *     NormalJobContainerTypeObject returns NormalJobContainerTypeObject
	 *
	 * Constraint:
	 *     (container+=NormalJobContainerPropertiesAbstract container+=NormalJobContainerPropertiesAbstract*)?
	 */
	protected void sequence_NormalJobContainerTypeObject(ISerializationContext context, NormalJobContainerTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobContainerAbstract returns NormalJobContainerTypeString
	 *     NormalJobContainerTypeString returns NormalJobContainerTypeString
	 *
	 * Constraint:
	 *     container=EString
	 */
	protected void sequence_NormalJobContainerTypeString(ISerializationContext context, NormalJobContainerTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContainerTypeString_Container()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContainerTypeString_Container()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobContainerTypeStringAccess().getContainerEStringParserRuleCall_2_0(), semanticObject.getContainer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobPropertiesAbstract returns NormalJobContainer
	 *     NormalJobContainer returns NormalJobContainer
	 *
	 * Constraint:
	 *     container=NormalJobContainerAbstract
	 */
	protected void sequence_NormalJobContainer(ISerializationContext context, NormalJobContainer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContainer_Container()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContainer_Container()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobContainerAccess().getContainerNormalJobContainerAbstractParserRuleCall_0(), semanticObject.getContainer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobContinue_45on_45errorPropertiesAbstract returns NormalJobContinue_45on_45errorAdditionalProperties
	 *     NormalJobContinue_45on_45errorAdditionalProperties returns NormalJobContinue_45on_45errorAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_NormalJobContinue_45on_45errorAdditionalProperties(ISerializationContext context, NormalJobContinue_45on_45errorAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContinue_45on_45errorAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContinue_45on_45errorAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContinue_45on_45errorAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContinue_45on_45errorAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobContinue_45on_45errorAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getNormalJobContinue_45on_45errorAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobContinue_45on_45errorItems returns NormalJobContinue_45on_45errorItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_NormalJobContinue_45on_45errorItems(ISerializationContext context, NormalJobContinue_45on_45errorItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContinue_45on_45errorItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContinue_45on_45errorItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobContinue_45on_45errorItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobContinue_45on_45errorAbstract returns NormalJobContinue_45on_45errorTypeArray
	 *     NormalJobContinue_45on_45errorTypeArray returns NormalJobContinue_45on_45errorTypeArray
	 *
	 * Constraint:
	 *     (continue_45on_45error+=NormalJobContinue_45on_45errorItems continue_45on_45error+=NormalJobContinue_45on_45errorItems*)?
	 */
	protected void sequence_NormalJobContinue_45on_45errorTypeArray(ISerializationContext context, NormalJobContinue_45on_45errorTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobContinue_45on_45errorAbstract returns NormalJobContinue_45on_45errorTypeBoolean
	 *     NormalJobContinue_45on_45errorTypeBoolean returns NormalJobContinue_45on_45errorTypeBoolean
	 *
	 * Constraint:
	 *     continue_45on_45error=EBooleanObject
	 */
	protected void sequence_NormalJobContinue_45on_45errorTypeBoolean(ISerializationContext context, NormalJobContinue_45on_45errorTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContinue_45on_45errorTypeBoolean_Continue_45on_45error()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContinue_45on_45errorTypeBoolean_Continue_45on_45error()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobContinue_45on_45errorTypeBooleanAccess().getContinue_45on_45errorEBooleanObjectParserRuleCall_2_0(), semanticObject.getContinue_45on_45error());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobContinue_45on_45errorAbstract returns NormalJobContinue_45on_45errorTypeInteger
	 *     NormalJobContinue_45on_45errorTypeInteger returns NormalJobContinue_45on_45errorTypeInteger
	 *
	 * Constraint:
	 *     continue_45on_45error=EDoubleObject
	 */
	protected void sequence_NormalJobContinue_45on_45errorTypeInteger(ISerializationContext context, NormalJobContinue_45on_45errorTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContinue_45on_45errorTypeInteger_Continue_45on_45error()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContinue_45on_45errorTypeInteger_Continue_45on_45error()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobContinue_45on_45errorTypeIntegerAccess().getContinue_45on_45errorEDoubleObjectParserRuleCall_2_0(), semanticObject.getContinue_45on_45error());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobContinue_45on_45errorAbstract returns NormalJobContinue_45on_45errorTypeNull
	 *     NormalJobContinue_45on_45errorTypeNull returns NormalJobContinue_45on_45errorTypeNull
	 *
	 * Constraint:
	 *     continue_45on_45error=NullValue
	 */
	protected void sequence_NormalJobContinue_45on_45errorTypeNull(ISerializationContext context, NormalJobContinue_45on_45errorTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContinue_45on_45errorTypeNull_Continue_45on_45error()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContinue_45on_45errorTypeNull_Continue_45on_45error()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobContinue_45on_45errorTypeNullAccess().getContinue_45on_45errorNullValueParserRuleCall_2_0(), semanticObject.getContinue_45on_45error());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobContinue_45on_45errorAbstract returns NormalJobContinue_45on_45errorTypeNumber
	 *     NormalJobContinue_45on_45errorTypeNumber returns NormalJobContinue_45on_45errorTypeNumber
	 *
	 * Constraint:
	 *     continue_45on_45error=EDoubleObject
	 */
	protected void sequence_NormalJobContinue_45on_45errorTypeNumber(ISerializationContext context, NormalJobContinue_45on_45errorTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContinue_45on_45errorTypeNumber_Continue_45on_45error()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContinue_45on_45errorTypeNumber_Continue_45on_45error()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobContinue_45on_45errorTypeNumberAccess().getContinue_45on_45errorEDoubleObjectParserRuleCall_2_0(), semanticObject.getContinue_45on_45error());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobContinue_45on_45errorAbstract returns NormalJobContinue_45on_45errorTypeObject
	 *     NormalJobContinue_45on_45errorTypeObject returns NormalJobContinue_45on_45errorTypeObject
	 *
	 * Constraint:
	 *     (
	 *         continue_45on_45error+=NormalJobContinue_45on_45errorPropertiesAbstract 
	 *         continue_45on_45error+=NormalJobContinue_45on_45errorPropertiesAbstract*
	 *     )?
	 */
	protected void sequence_NormalJobContinue_45on_45errorTypeObject(ISerializationContext context, NormalJobContinue_45on_45errorTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobContinue_45on_45errorAbstract returns NormalJobContinue_45on_45errorTypeString
	 *     NormalJobContinue_45on_45errorTypeString returns NormalJobContinue_45on_45errorTypeString
	 *
	 * Constraint:
	 *     continue_45on_45error=EString
	 */
	protected void sequence_NormalJobContinue_45on_45errorTypeString(ISerializationContext context, NormalJobContinue_45on_45errorTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContinue_45on_45errorTypeString_Continue_45on_45error()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContinue_45on_45errorTypeString_Continue_45on_45error()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobContinue_45on_45errorTypeStringAccess().getContinue_45on_45errorEStringParserRuleCall_2_0(), semanticObject.getContinue_45on_45error());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobPropertiesAbstract returns NormalJobContinue_45on_45error
	 *     NormalJobContinue_45on_45error returns NormalJobContinue_45on_45error
	 *
	 * Constraint:
	 *     continue_45on_45error=NormalJobContinue_45on_45errorAbstract
	 */
	protected void sequence_NormalJobContinue_45on_45error(ISerializationContext context, NormalJobContinue_45on_45error semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContinue_45on_45error_Continue_45on_45error()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContinue_45on_45error_Continue_45on_45error()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobContinue_45on_45errorAccess().getContinue_45on_45errorNormalJobContinue_45on_45errorAbstractParserRuleCall_0(), semanticObject.getContinue_45on_45error());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobPropertiesAbstract returns NormalJobDefaults
	 *     NormalJobDefaults returns NormalJobDefaults
	 *
	 * Constraint:
	 *     defaults=Defaults
	 */
	protected void sequence_NormalJobDefaults(ISerializationContext context, NormalJobDefaults semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobDefaults_Defaults()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobDefaults_Defaults()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobDefaultsAccess().getDefaultsDefaultsParserRuleCall_2_0(), semanticObject.getDefaults());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobPropertiesAbstract returns NormalJobEnv
	 *     NormalJobEnv returns NormalJobEnv
	 *
	 * Constraint:
	 *     env=Env
	 */
	protected void sequence_NormalJobEnv(ISerializationContext context, NormalJobEnv semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnv_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnv_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobEnvAccess().getEnvEnvParserRuleCall_2_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobEnvironmentPropertiesAbstract returns NormalJobEnvironmentAdditionalProperties
	 *     NormalJobEnvironmentAdditionalProperties returns NormalJobEnvironmentAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_NormalJobEnvironmentAdditionalProperties(ISerializationContext context, NormalJobEnvironmentAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnvironmentAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnvironmentAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnvironmentAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnvironmentAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobEnvironmentAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getNormalJobEnvironmentAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobEnvironmentItems returns NormalJobEnvironmentItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_NormalJobEnvironmentItems(ISerializationContext context, NormalJobEnvironmentItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnvironmentItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnvironmentItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobEnvironmentItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobEnvironmentAbstract returns NormalJobEnvironmentTypeArray
	 *     NormalJobEnvironmentTypeArray returns NormalJobEnvironmentTypeArray
	 *
	 * Constraint:
	 *     (environment+=NormalJobEnvironmentItems environment+=NormalJobEnvironmentItems*)?
	 */
	protected void sequence_NormalJobEnvironmentTypeArray(ISerializationContext context, NormalJobEnvironmentTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobEnvironmentAbstract returns NormalJobEnvironmentTypeBoolean
	 *     NormalJobEnvironmentTypeBoolean returns NormalJobEnvironmentTypeBoolean
	 *
	 * Constraint:
	 *     environment=EBooleanObject
	 */
	protected void sequence_NormalJobEnvironmentTypeBoolean(ISerializationContext context, NormalJobEnvironmentTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnvironmentTypeBoolean_Environment()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnvironmentTypeBoolean_Environment()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobEnvironmentTypeBooleanAccess().getEnvironmentEBooleanObjectParserRuleCall_2_0(), semanticObject.getEnvironment());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobEnvironmentAbstract returns NormalJobEnvironmentTypeInteger
	 *     NormalJobEnvironmentTypeInteger returns NormalJobEnvironmentTypeInteger
	 *
	 * Constraint:
	 *     environment=EDoubleObject
	 */
	protected void sequence_NormalJobEnvironmentTypeInteger(ISerializationContext context, NormalJobEnvironmentTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnvironmentTypeInteger_Environment()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnvironmentTypeInteger_Environment()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobEnvironmentTypeIntegerAccess().getEnvironmentEDoubleObjectParserRuleCall_2_0(), semanticObject.getEnvironment());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobEnvironmentAbstract returns NormalJobEnvironmentTypeNull
	 *     NormalJobEnvironmentTypeNull returns NormalJobEnvironmentTypeNull
	 *
	 * Constraint:
	 *     environment=NullValue
	 */
	protected void sequence_NormalJobEnvironmentTypeNull(ISerializationContext context, NormalJobEnvironmentTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnvironmentTypeNull_Environment()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnvironmentTypeNull_Environment()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobEnvironmentTypeNullAccess().getEnvironmentNullValueParserRuleCall_2_0(), semanticObject.getEnvironment());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobEnvironmentAbstract returns NormalJobEnvironmentTypeNumber
	 *     NormalJobEnvironmentTypeNumber returns NormalJobEnvironmentTypeNumber
	 *
	 * Constraint:
	 *     environment=EDoubleObject
	 */
	protected void sequence_NormalJobEnvironmentTypeNumber(ISerializationContext context, NormalJobEnvironmentTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnvironmentTypeNumber_Environment()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnvironmentTypeNumber_Environment()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobEnvironmentTypeNumberAccess().getEnvironmentEDoubleObjectParserRuleCall_2_0(), semanticObject.getEnvironment());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobEnvironmentAbstract returns NormalJobEnvironmentTypeObject
	 *     NormalJobEnvironmentTypeObject returns NormalJobEnvironmentTypeObject
	 *
	 * Constraint:
	 *     (environment+=NormalJobEnvironmentPropertiesAbstract environment+=NormalJobEnvironmentPropertiesAbstract*)?
	 */
	protected void sequence_NormalJobEnvironmentTypeObject(ISerializationContext context, NormalJobEnvironmentTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobEnvironmentAbstract returns NormalJobEnvironmentTypeString
	 *     NormalJobEnvironmentTypeString returns NormalJobEnvironmentTypeString
	 *
	 * Constraint:
	 *     environment=EString
	 */
	protected void sequence_NormalJobEnvironmentTypeString(ISerializationContext context, NormalJobEnvironmentTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnvironmentTypeString_Environment()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnvironmentTypeString_Environment()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobEnvironmentTypeStringAccess().getEnvironmentEStringParserRuleCall_2_0(), semanticObject.getEnvironment());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobPropertiesAbstract returns NormalJobEnvironment
	 *     NormalJobEnvironment returns NormalJobEnvironment
	 *
	 * Constraint:
	 *     environment=NormalJobEnvironmentAbstract
	 */
	protected void sequence_NormalJobEnvironment(ISerializationContext context, NormalJobEnvironment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnvironment_Environment()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnvironment_Environment()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobEnvironmentAccess().getEnvironmentNormalJobEnvironmentAbstractParserRuleCall_0(), semanticObject.getEnvironment());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobIfAbstract returns NormalJobIfTypeBoolean
	 *     NormalJobIfTypeBoolean returns NormalJobIfTypeBoolean
	 *
	 * Constraint:
	 *     if_=EBooleanObject
	 */
	protected void sequence_NormalJobIfTypeBoolean(ISerializationContext context, NormalJobIfTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobIfTypeBoolean_If_()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobIfTypeBoolean_If_()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobIfTypeBooleanAccess().getIf_EBooleanObjectParserRuleCall_2_0(), semanticObject.getIf_());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobIfAbstract returns NormalJobIfTypeNumber
	 *     NormalJobIfTypeNumber returns NormalJobIfTypeNumber
	 *
	 * Constraint:
	 *     if_=EDoubleObject
	 */
	protected void sequence_NormalJobIfTypeNumber(ISerializationContext context, NormalJobIfTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobIfTypeNumber_If_()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobIfTypeNumber_If_()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobIfTypeNumberAccess().getIf_EDoubleObjectParserRuleCall_2_0(), semanticObject.getIf_());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobIfAbstract returns NormalJobIfTypeString
	 *     NormalJobIfTypeString returns NormalJobIfTypeString
	 *
	 * Constraint:
	 *     if_=EString
	 */
	protected void sequence_NormalJobIfTypeString(ISerializationContext context, NormalJobIfTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobIfTypeString_If_()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobIfTypeString_If_()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobIfTypeStringAccess().getIf_EStringParserRuleCall_2_0(), semanticObject.getIf_());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobPropertiesAbstract returns NormalJobIf
	 *     NormalJobIf returns NormalJobIf
	 *
	 * Constraint:
	 *     if_=NormalJobIfAbstract
	 */
	protected void sequence_NormalJobIf(ISerializationContext context, NormalJobIf semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobIf_If_()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobIf_If_()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobIfAccess().getIf_NormalJobIfAbstractParserRuleCall_0(), semanticObject.getIf_());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobPropertiesAbstract returns NormalJobName
	 *     NormalJobName returns NormalJobName
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_NormalJobName(ISerializationContext context, NormalJobName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobName_Name()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobName_Name()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobNameAccess().getNameEStringParserRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobPropertiesAbstract returns NormalJobNeeds
	 *     NormalJobNeeds returns NormalJobNeeds
	 *
	 * Constraint:
	 *     needs=JobNeeds
	 */
	protected void sequence_NormalJobNeeds(ISerializationContext context, NormalJobNeeds semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobNeeds_Needs()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobNeeds_Needs()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobNeedsAccess().getNeedsJobNeedsParserRuleCall_2_0(), semanticObject.getNeeds());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobOutputsPropertiesAbstract returns NormalJobOutputsAdditionalProperties
	 *     NormalJobOutputsAdditionalProperties returns NormalJobOutputsAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=EString)
	 */
	protected void sequence_NormalJobOutputsAdditionalProperties(ISerializationContext context, NormalJobOutputsAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobOutputsAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobOutputsAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobOutputsAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobOutputsAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobOutputsAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getNormalJobOutputsAdditionalPropertiesAccess().getAdditionalPropertiesEStringParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobPropertiesAbstract returns NormalJobOutputs
	 *     NormalJobOutputs returns NormalJobOutputs
	 *
	 * Constraint:
	 *     (outputs+=NormalJobOutputsPropertiesAbstract outputs+=NormalJobOutputsPropertiesAbstract*)
	 */
	protected void sequence_NormalJobOutputs(ISerializationContext context, NormalJobOutputs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobPropertiesAbstract returns NormalJobPermissions
	 *     NormalJobPermissions returns NormalJobPermissions
	 *
	 * Constraint:
	 *     permissions=Permissions
	 */
	protected void sequence_NormalJobPermissions(ISerializationContext context, NormalJobPermissions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobPermissions_Permissions()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobPermissions_Permissions()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobPermissionsAccess().getPermissionsPermissionsParserRuleCall_2_0(), semanticObject.getPermissions());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobRuns_45onPropertiesAbstract returns NormalJobRuns_45onAdditionalProperties
	 *     NormalJobRuns_45onAdditionalProperties returns NormalJobRuns_45onAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_NormalJobRuns_45onAdditionalProperties(ISerializationContext context, NormalJobRuns_45onAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobRuns_45onAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getNormalJobRuns_45onAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobRuns_45onItems returns NormalJobRuns_45onItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_NormalJobRuns_45onItems(ISerializationContext context, NormalJobRuns_45onItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobRuns_45onItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobRuns_45onAbstract returns NormalJobRuns_45onTypeArray
	 *     NormalJobRuns_45onTypeArray returns NormalJobRuns_45onTypeArray
	 *
	 * Constraint:
	 *     (runs_45on+=NormalJobRuns_45onItems runs_45on+=NormalJobRuns_45onItems*)?
	 */
	protected void sequence_NormalJobRuns_45onTypeArray(ISerializationContext context, NormalJobRuns_45onTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobRuns_45onAbstract returns NormalJobRuns_45onTypeBoolean
	 *     NormalJobRuns_45onTypeBoolean returns NormalJobRuns_45onTypeBoolean
	 *
	 * Constraint:
	 *     runs_45on=EBooleanObject
	 */
	protected void sequence_NormalJobRuns_45onTypeBoolean(ISerializationContext context, NormalJobRuns_45onTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onTypeBoolean_Runs_45on()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onTypeBoolean_Runs_45on()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobRuns_45onTypeBooleanAccess().getRuns_45onEBooleanObjectParserRuleCall_2_0(), semanticObject.getRuns_45on());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobRuns_45onAbstract returns NormalJobRuns_45onTypeInteger
	 *     NormalJobRuns_45onTypeInteger returns NormalJobRuns_45onTypeInteger
	 *
	 * Constraint:
	 *     runs_45on=EDoubleObject
	 */
	protected void sequence_NormalJobRuns_45onTypeInteger(ISerializationContext context, NormalJobRuns_45onTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onTypeInteger_Runs_45on()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onTypeInteger_Runs_45on()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobRuns_45onTypeIntegerAccess().getRuns_45onEDoubleObjectParserRuleCall_2_0(), semanticObject.getRuns_45on());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobRuns_45onAbstract returns NormalJobRuns_45onTypeNull
	 *     NormalJobRuns_45onTypeNull returns NormalJobRuns_45onTypeNull
	 *
	 * Constraint:
	 *     runs_45on=NullValue
	 */
	protected void sequence_NormalJobRuns_45onTypeNull(ISerializationContext context, NormalJobRuns_45onTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onTypeNull_Runs_45on()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onTypeNull_Runs_45on()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobRuns_45onTypeNullAccess().getRuns_45onNullValueParserRuleCall_2_0(), semanticObject.getRuns_45on());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobRuns_45onAbstract returns NormalJobRuns_45onTypeNumber
	 *     NormalJobRuns_45onTypeNumber returns NormalJobRuns_45onTypeNumber
	 *
	 * Constraint:
	 *     runs_45on=EDoubleObject
	 */
	protected void sequence_NormalJobRuns_45onTypeNumber(ISerializationContext context, NormalJobRuns_45onTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onTypeNumber_Runs_45on()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onTypeNumber_Runs_45on()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobRuns_45onTypeNumberAccess().getRuns_45onEDoubleObjectParserRuleCall_2_0(), semanticObject.getRuns_45on());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobRuns_45onAbstract returns NormalJobRuns_45onTypeObject
	 *     NormalJobRuns_45onTypeObject returns NormalJobRuns_45onTypeObject
	 *
	 * Constraint:
	 *     (runs_45on+=NormalJobRuns_45onPropertiesAbstract runs_45on+=NormalJobRuns_45onPropertiesAbstract*)?
	 */
	protected void sequence_NormalJobRuns_45onTypeObject(ISerializationContext context, NormalJobRuns_45onTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobRuns_45onAbstract returns NormalJobRuns_45onTypeString
	 *     NormalJobRuns_45onTypeString returns NormalJobRuns_45onTypeString
	 *
	 * Constraint:
	 *     runs_45on=EString
	 */
	protected void sequence_NormalJobRuns_45onTypeString(ISerializationContext context, NormalJobRuns_45onTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onTypeString_Runs_45on()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45onTypeString_Runs_45on()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobRuns_45onTypeStringAccess().getRuns_45onEStringParserRuleCall_2_0(), semanticObject.getRuns_45on());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobPropertiesAbstract returns NormalJobRuns_45on
	 *     NormalJobRuns_45on returns NormalJobRuns_45on
	 *
	 * Constraint:
	 *     runs_45on=NormalJobRuns_45onAbstract
	 */
	protected void sequence_NormalJobRuns_45on(ISerializationContext context, NormalJobRuns_45on semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45on_Runs_45on()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobRuns_45on_Runs_45on()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobRuns_45onAccess().getRuns_45onNormalJobRuns_45onAbstractParserRuleCall_0(), semanticObject.getRuns_45on());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobServicesPropertiesAbstract returns NormalJobServicesAdditionalProperties
	 *     NormalJobServicesAdditionalProperties returns NormalJobServicesAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=Container)
	 */
	protected void sequence_NormalJobServicesAdditionalProperties(ISerializationContext context, NormalJobServicesAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobServicesAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobServicesAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobServicesAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobServicesAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobServicesAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getNormalJobServicesAdditionalPropertiesAccess().getAdditionalPropertiesContainerParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobPropertiesAbstract returns NormalJobServices
	 *     NormalJobServices returns NormalJobServices
	 *
	 * Constraint:
	 *     (services+=NormalJobServicesPropertiesAbstract services+=NormalJobServicesPropertiesAbstract*)?
	 */
	protected void sequence_NormalJobServices(ISerializationContext context, NormalJobServices semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsPropertiesAbstract returns NormalJobStepsItemsAdditionalProperties
	 *     NormalJobStepsItemsAdditionalProperties returns NormalJobStepsItemsAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_NormalJobStepsItemsAdditionalProperties(ISerializationContext context, NormalJobStepsItemsAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getNormalJobStepsItemsAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsItems returns NormalJobStepsItemsItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_NormalJobStepsItemsItems(ISerializationContext context, NormalJobStepsItemsItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAbstract returns NormalJobStepsItemsTypeArray
	 *     NormalJobStepsItemsTypeArray returns NormalJobStepsItemsTypeArray
	 *
	 * Constraint:
	 *     (items+=NormalJobStepsItemsItems items+=NormalJobStepsItemsItems*)?
	 */
	protected void sequence_NormalJobStepsItemsTypeArray(ISerializationContext context, NormalJobStepsItemsTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAbstract returns NormalJobStepsItemsTypeBoolean
	 *     NormalJobStepsItemsTypeBoolean returns NormalJobStepsItemsTypeBoolean
	 *
	 * Constraint:
	 *     items=EBooleanObject
	 */
	protected void sequence_NormalJobStepsItemsTypeBoolean(ISerializationContext context, NormalJobStepsItemsTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsTypeBoolean_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsTypeBoolean_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsTypeBooleanAccess().getItemsEBooleanObjectParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAbstract returns NormalJobStepsItemsTypeInteger
	 *     NormalJobStepsItemsTypeInteger returns NormalJobStepsItemsTypeInteger
	 *
	 * Constraint:
	 *     items=EDoubleObject
	 */
	protected void sequence_NormalJobStepsItemsTypeInteger(ISerializationContext context, NormalJobStepsItemsTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsTypeInteger_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsTypeInteger_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsTypeIntegerAccess().getItemsEDoubleObjectParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAbstract returns NormalJobStepsItemsTypeNull
	 *     NormalJobStepsItemsTypeNull returns NormalJobStepsItemsTypeNull
	 *
	 * Constraint:
	 *     items=NullValue
	 */
	protected void sequence_NormalJobStepsItemsTypeNull(ISerializationContext context, NormalJobStepsItemsTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsTypeNull_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsTypeNull_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsTypeNullAccess().getItemsNullValueParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAbstract returns NormalJobStepsItemsTypeNumber
	 *     NormalJobStepsItemsTypeNumber returns NormalJobStepsItemsTypeNumber
	 *
	 * Constraint:
	 *     items=EDoubleObject
	 */
	protected void sequence_NormalJobStepsItemsTypeNumber(ISerializationContext context, NormalJobStepsItemsTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsTypeNumber_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsTypeNumber_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsTypeNumberAccess().getItemsEDoubleObjectParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAbstract returns NormalJobStepsItemsTypeObject
	 *     NormalJobStepsItemsTypeObject returns NormalJobStepsItemsTypeObject
	 *
	 * Constraint:
	 *     (items+=NormalJobStepsItemsPropertiesAbstract items+=NormalJobStepsItemsPropertiesAbstract*)?
	 */
	protected void sequence_NormalJobStepsItemsTypeObject(ISerializationContext context, NormalJobStepsItemsTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAbstract returns NormalJobStepsItemsTypeString
	 *     NormalJobStepsItemsTypeString returns NormalJobStepsItemsTypeString
	 *
	 * Constraint:
	 *     items=EString
	 */
	protected void sequence_NormalJobStepsItemsTypeString(ISerializationContext context, NormalJobStepsItemsTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsTypeString_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsTypeString_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsTypeStringAccess().getItemsEStringParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItems returns NormalJobStepsItems
	 *
	 * Constraint:
	 *     items=NormalJobStepsItemsAbstract
	 */
	protected void sequence_NormalJobStepsItems(ISerializationContext context, NormalJobStepsItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAccess().getItemsNormalJobStepsItemsAbstractParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobPropertiesAbstract returns NormalJobSteps
	 *     NormalJobSteps returns NormalJobSteps
	 *
	 * Constraint:
	 *     (steps+=NormalJobStepsItems steps+=NormalJobStepsItems*)
	 */
	protected void sequence_NormalJobSteps(ISerializationContext context, NormalJobSteps semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyPropertiesAbstract returns NormalJobStrategyFail_45fast
	 *     NormalJobStrategyFail_45fast returns NormalJobStrategyFail_45fast
	 *
	 * Constraint:
	 *     fail_45fast=EBooleanObject
	 */
	protected void sequence_NormalJobStrategyFail_45fast(ISerializationContext context, NormalJobStrategyFail_45fast semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyFail_45fast_Fail_45fast()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyFail_45fast_Fail_45fast()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStrategyFail_45fastAccess().getFail_45fastEBooleanObjectParserRuleCall_2_0(), semanticObject.getFail_45fast());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixAdditionalPropertiesPropertiesAbstract returns NormalJobStrategyMatrixAdditionalPropertiesAdditionalProperties
	 *     NormalJobStrategyMatrixAdditionalPropertiesAdditionalProperties returns NormalJobStrategyMatrixAdditionalPropertiesAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_NormalJobStrategyMatrixAdditionalPropertiesAdditionalProperties(ISerializationContext context, NormalJobStrategyMatrixAdditionalPropertiesAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalPropertiesAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalPropertiesAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalPropertiesAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalPropertiesAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStrategyMatrixAdditionalPropertiesAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getNormalJobStrategyMatrixAdditionalPropertiesAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixAdditionalPropertiesItems returns NormalJobStrategyMatrixAdditionalPropertiesItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_NormalJobStrategyMatrixAdditionalPropertiesItems(ISerializationContext context, NormalJobStrategyMatrixAdditionalPropertiesItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalPropertiesItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalPropertiesItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStrategyMatrixAdditionalPropertiesItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixAdditionalPropertiesAbstract returns NormalJobStrategyMatrixAdditionalPropertiesTypeArray
	 *     NormalJobStrategyMatrixAdditionalPropertiesTypeArray returns NormalJobStrategyMatrixAdditionalPropertiesTypeArray
	 *
	 * Constraint:
	 *     (
	 *         additionalProperties+=NormalJobStrategyMatrixAdditionalPropertiesItems 
	 *         additionalProperties+=NormalJobStrategyMatrixAdditionalPropertiesItems*
	 *     )?
	 */
	protected void sequence_NormalJobStrategyMatrixAdditionalPropertiesTypeArray(ISerializationContext context, NormalJobStrategyMatrixAdditionalPropertiesTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixAdditionalPropertiesAbstract returns NormalJobStrategyMatrixAdditionalPropertiesTypeBoolean
	 *     NormalJobStrategyMatrixAdditionalPropertiesTypeBoolean returns NormalJobStrategyMatrixAdditionalPropertiesTypeBoolean
	 *
	 * Constraint:
	 *     additionalProperties=EBooleanObject
	 */
	protected void sequence_NormalJobStrategyMatrixAdditionalPropertiesTypeBoolean(ISerializationContext context, NormalJobStrategyMatrixAdditionalPropertiesTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalPropertiesTypeBoolean_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalPropertiesTypeBoolean_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStrategyMatrixAdditionalPropertiesTypeBooleanAccess().getAdditionalPropertiesEBooleanObjectParserRuleCall_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixAdditionalPropertiesAbstract returns NormalJobStrategyMatrixAdditionalPropertiesTypeInteger
	 *     NormalJobStrategyMatrixAdditionalPropertiesTypeInteger returns NormalJobStrategyMatrixAdditionalPropertiesTypeInteger
	 *
	 * Constraint:
	 *     additionalProperties=EDoubleObject
	 */
	protected void sequence_NormalJobStrategyMatrixAdditionalPropertiesTypeInteger(ISerializationContext context, NormalJobStrategyMatrixAdditionalPropertiesTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalPropertiesTypeInteger_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalPropertiesTypeInteger_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStrategyMatrixAdditionalPropertiesTypeIntegerAccess().getAdditionalPropertiesEDoubleObjectParserRuleCall_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixAdditionalPropertiesAbstract returns NormalJobStrategyMatrixAdditionalPropertiesTypeNull
	 *     NormalJobStrategyMatrixAdditionalPropertiesTypeNull returns NormalJobStrategyMatrixAdditionalPropertiesTypeNull
	 *
	 * Constraint:
	 *     additionalProperties=NullValue
	 */
	protected void sequence_NormalJobStrategyMatrixAdditionalPropertiesTypeNull(ISerializationContext context, NormalJobStrategyMatrixAdditionalPropertiesTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalPropertiesTypeNull_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalPropertiesTypeNull_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStrategyMatrixAdditionalPropertiesTypeNullAccess().getAdditionalPropertiesNullValueParserRuleCall_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixAdditionalPropertiesAbstract returns NormalJobStrategyMatrixAdditionalPropertiesTypeNumber
	 *     NormalJobStrategyMatrixAdditionalPropertiesTypeNumber returns NormalJobStrategyMatrixAdditionalPropertiesTypeNumber
	 *
	 * Constraint:
	 *     additionalProperties=EDoubleObject
	 */
	protected void sequence_NormalJobStrategyMatrixAdditionalPropertiesTypeNumber(ISerializationContext context, NormalJobStrategyMatrixAdditionalPropertiesTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalPropertiesTypeNumber_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalPropertiesTypeNumber_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStrategyMatrixAdditionalPropertiesTypeNumberAccess().getAdditionalPropertiesEDoubleObjectParserRuleCall_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixAdditionalPropertiesAbstract returns NormalJobStrategyMatrixAdditionalPropertiesTypeObject
	 *     NormalJobStrategyMatrixAdditionalPropertiesTypeObject returns NormalJobStrategyMatrixAdditionalPropertiesTypeObject
	 *
	 * Constraint:
	 *     (
	 *         additionalProperties+=NormalJobStrategyMatrixAdditionalPropertiesPropertiesAbstract 
	 *         additionalProperties+=NormalJobStrategyMatrixAdditionalPropertiesPropertiesAbstract*
	 *     )?
	 */
	protected void sequence_NormalJobStrategyMatrixAdditionalPropertiesTypeObject(ISerializationContext context, NormalJobStrategyMatrixAdditionalPropertiesTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixAdditionalPropertiesAbstract returns NormalJobStrategyMatrixAdditionalPropertiesTypeString
	 *     NormalJobStrategyMatrixAdditionalPropertiesTypeString returns NormalJobStrategyMatrixAdditionalPropertiesTypeString
	 *
	 * Constraint:
	 *     additionalProperties=EString
	 */
	protected void sequence_NormalJobStrategyMatrixAdditionalPropertiesTypeString(ISerializationContext context, NormalJobStrategyMatrixAdditionalPropertiesTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalPropertiesTypeString_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalPropertiesTypeString_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStrategyMatrixAdditionalPropertiesTypeStringAccess().getAdditionalPropertiesEStringParserRuleCall_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixPropertiesAbstract returns NormalJobStrategyMatrixAdditionalProperties
	 *     NormalJobStrategyMatrixAdditionalProperties returns NormalJobStrategyMatrixAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=NormalJobStrategyMatrixAdditionalPropertiesAbstract)
	 */
	protected void sequence_NormalJobStrategyMatrixAdditionalProperties(ISerializationContext context, NormalJobStrategyMatrixAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStrategyMatrixAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getNormalJobStrategyMatrixAdditionalPropertiesAccess().getAdditionalPropertiesNormalJobStrategyMatrixAdditionalPropertiesAbstractParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixItems returns NormalJobStrategyMatrixItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_NormalJobStrategyMatrixItems(ISerializationContext context, NormalJobStrategyMatrixItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStrategyMatrixItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixPatternProperties0ItemsPropertiesAbstract returns NormalJobStrategyMatrixPatternProperties0ItemsAdditionalProperties
	 *     NormalJobStrategyMatrixPatternProperties0ItemsAdditionalProperties returns NormalJobStrategyMatrixPatternProperties0ItemsAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=Configuration)
	 */
	protected void sequence_NormalJobStrategyMatrixPatternProperties0ItemsAdditionalProperties(ISerializationContext context, NormalJobStrategyMatrixPatternProperties0ItemsAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixPatternProperties0ItemsAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixPatternProperties0ItemsAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixPatternProperties0ItemsAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixPatternProperties0ItemsAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStrategyMatrixPatternProperties0ItemsAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getNormalJobStrategyMatrixPatternProperties0ItemsAdditionalPropertiesAccess().getAdditionalPropertiesConfigurationParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixPatternProperties0Items returns NormalJobStrategyMatrixPatternProperties0Items
	 *
	 * Constraint:
	 *     (
	 *         items+=NormalJobStrategyMatrixPatternProperties0ItemsPropertiesAbstract 
	 *         items+=NormalJobStrategyMatrixPatternProperties0ItemsPropertiesAbstract*
	 *     )?
	 */
	protected void sequence_NormalJobStrategyMatrixPatternProperties0Items(ISerializationContext context, NormalJobStrategyMatrixPatternProperties0Items semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixPropertiesAbstract returns NormalJobStrategyMatrixPatternProperties0
	 *     NormalJobStrategyMatrixPatternProperties0 returns NormalJobStrategyMatrixPatternProperties0
	 *
	 * Constraint:
	 *     (
	 *         key=EString 
	 *         patternProperties0+=NormalJobStrategyMatrixPatternProperties0Items 
	 *         patternProperties0+=NormalJobStrategyMatrixPatternProperties0Items*
	 *     )
	 */
	protected void sequence_NormalJobStrategyMatrixPatternProperties0(ISerializationContext context, NormalJobStrategyMatrixPatternProperties0 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixAbstract returns NormalJobStrategyMatrixTypeArray
	 *     NormalJobStrategyMatrixTypeArray returns NormalJobStrategyMatrixTypeArray
	 *
	 * Constraint:
	 *     (matrix+=NormalJobStrategyMatrixItems matrix+=NormalJobStrategyMatrixItems*)?
	 */
	protected void sequence_NormalJobStrategyMatrixTypeArray(ISerializationContext context, NormalJobStrategyMatrixTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixAbstract returns NormalJobStrategyMatrixTypeBoolean
	 *     NormalJobStrategyMatrixTypeBoolean returns NormalJobStrategyMatrixTypeBoolean
	 *
	 * Constraint:
	 *     matrix=EBooleanObject
	 */
	protected void sequence_NormalJobStrategyMatrixTypeBoolean(ISerializationContext context, NormalJobStrategyMatrixTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixTypeBoolean_Matrix()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixTypeBoolean_Matrix()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStrategyMatrixTypeBooleanAccess().getMatrixEBooleanObjectParserRuleCall_2_0(), semanticObject.getMatrix());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixAbstract returns NormalJobStrategyMatrixTypeInteger
	 *     NormalJobStrategyMatrixTypeInteger returns NormalJobStrategyMatrixTypeInteger
	 *
	 * Constraint:
	 *     matrix=EDoubleObject
	 */
	protected void sequence_NormalJobStrategyMatrixTypeInteger(ISerializationContext context, NormalJobStrategyMatrixTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixTypeInteger_Matrix()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixTypeInteger_Matrix()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStrategyMatrixTypeIntegerAccess().getMatrixEDoubleObjectParserRuleCall_2_0(), semanticObject.getMatrix());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixAbstract returns NormalJobStrategyMatrixTypeNull
	 *     NormalJobStrategyMatrixTypeNull returns NormalJobStrategyMatrixTypeNull
	 *
	 * Constraint:
	 *     matrix=NullValue
	 */
	protected void sequence_NormalJobStrategyMatrixTypeNull(ISerializationContext context, NormalJobStrategyMatrixTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixTypeNull_Matrix()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixTypeNull_Matrix()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStrategyMatrixTypeNullAccess().getMatrixNullValueParserRuleCall_2_0(), semanticObject.getMatrix());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixAbstract returns NormalJobStrategyMatrixTypeNumber
	 *     NormalJobStrategyMatrixTypeNumber returns NormalJobStrategyMatrixTypeNumber
	 *
	 * Constraint:
	 *     matrix=EDoubleObject
	 */
	protected void sequence_NormalJobStrategyMatrixTypeNumber(ISerializationContext context, NormalJobStrategyMatrixTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixTypeNumber_Matrix()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixTypeNumber_Matrix()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStrategyMatrixTypeNumberAccess().getMatrixEDoubleObjectParserRuleCall_2_0(), semanticObject.getMatrix());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixAbstract returns NormalJobStrategyMatrixTypeObject
	 *     NormalJobStrategyMatrixTypeObject returns NormalJobStrategyMatrixTypeObject
	 *
	 * Constraint:
	 *     (matrix+=NormalJobStrategyMatrixPropertiesAbstract matrix+=NormalJobStrategyMatrixPropertiesAbstract*)
	 */
	protected void sequence_NormalJobStrategyMatrixTypeObject(ISerializationContext context, NormalJobStrategyMatrixTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixAbstract returns NormalJobStrategyMatrixTypeString
	 *     NormalJobStrategyMatrixTypeString returns NormalJobStrategyMatrixTypeString
	 *
	 * Constraint:
	 *     matrix=EString
	 */
	protected void sequence_NormalJobStrategyMatrixTypeString(ISerializationContext context, NormalJobStrategyMatrixTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixTypeString_Matrix()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixTypeString_Matrix()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStrategyMatrixTypeStringAccess().getMatrixEStringParserRuleCall_2_0(), semanticObject.getMatrix());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyPropertiesAbstract returns NormalJobStrategyMatrix
	 *     NormalJobStrategyMatrix returns NormalJobStrategyMatrix
	 *
	 * Constraint:
	 *     matrix=NormalJobStrategyMatrixAbstract
	 */
	protected void sequence_NormalJobStrategyMatrix(ISerializationContext context, NormalJobStrategyMatrix semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrix_Matrix()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrix_Matrix()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStrategyMatrixAccess().getMatrixNormalJobStrategyMatrixAbstractParserRuleCall_0(), semanticObject.getMatrix());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyPropertiesAbstract returns NormalJobStrategyMax_45parallel
	 *     NormalJobStrategyMax_45parallel returns NormalJobStrategyMax_45parallel
	 *
	 * Constraint:
	 *     max_45parallel=EDoubleObject
	 */
	protected void sequence_NormalJobStrategyMax_45parallel(ISerializationContext context, NormalJobStrategyMax_45parallel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMax_45parallel_Max_45parallel()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMax_45parallel_Max_45parallel()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStrategyMax_45parallelAccess().getMax_45parallelEDoubleObjectParserRuleCall_2_0(), semanticObject.getMax_45parallel());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobPropertiesAbstract returns NormalJobStrategy
	 *     NormalJobStrategy returns NormalJobStrategy
	 *
	 * Constraint:
	 *     (strategy+=NormalJobStrategyPropertiesAbstract strategy+=NormalJobStrategyPropertiesAbstract*)?
	 */
	protected void sequence_NormalJobStrategy(ISerializationContext context, NormalJobStrategy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobPropertiesAbstract returns NormalJobTimeout_45minutes
	 *     NormalJobTimeout_45minutes returns NormalJobTimeout_45minutes
	 *
	 * Constraint:
	 *     timeout_45minutes=EDoubleObject
	 */
	protected void sequence_NormalJobTimeout_45minutes(ISerializationContext context, NormalJobTimeout_45minutes semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobTimeout_45minutes_Timeout_45minutes()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobTimeout_45minutes_Timeout_45minutes()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobTimeout_45minutesAccess().getTimeout_45minutesEDoubleObjectParserRuleCall_2_0(), semanticObject.getTimeout_45minutes());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJob returns NormalJob
	 *
	 * Constraint:
	 *     (normalJob+=NormalJobPropertiesAbstract normalJob+=NormalJobPropertiesAbstract*)?
	 */
	protected void sequence_NormalJob(ISerializationContext context, NormalJob semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NullValue
	 *     NullValue returns NullValue
	 *
	 * Constraint:
	 *     value=NullEnum
	 */
	protected void sequence_NullValue(ISerializationContext context, NullValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNullValueAccess().getValueNullEnumEnumRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NumberValue
	 *     NumberValue returns NumberValue
	 *
	 * Constraint:
	 *     value=EDouble
	 */
	protected void sequence_NumberValue(ISerializationContext context, NumberValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberValueAccess().getValueEDoubleParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns ObjectValue
	 *     ObjectValue returns ObjectValue
	 *
	 * Constraint:
	 *     (keyvaluepair+=KeyValuePair keyvaluepair+=KeyValuePair*)?
	 */
	protected void sequence_ObjectValue(ISerializationContext context, ObjectValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PermissionsPropertiesAbstract returns PermissionsAdditionalProperties
	 *     PermissionsAdditionalProperties returns PermissionsAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_PermissionsAdditionalProperties(ISerializationContext context, PermissionsAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissionsAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getPermissionsAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PermissionsItems returns PermissionsItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_PermissionsItems(ISerializationContext context, PermissionsItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissionsItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PermissionsAbstract returns PermissionsTypeArray
	 *     PermissionsTypeArray returns PermissionsTypeArray
	 *
	 * Constraint:
	 *     (permissions+=PermissionsItems permissions+=PermissionsItems*)?
	 */
	protected void sequence_PermissionsTypeArray(ISerializationContext context, PermissionsTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PermissionsAbstract returns PermissionsTypeBoolean
	 *     PermissionsTypeBoolean returns PermissionsTypeBoolean
	 *
	 * Constraint:
	 *     permissions=EBooleanObject
	 */
	protected void sequence_PermissionsTypeBoolean(ISerializationContext context, PermissionsTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsTypeBoolean_Permissions()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsTypeBoolean_Permissions()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissionsTypeBooleanAccess().getPermissionsEBooleanObjectParserRuleCall_0(), semanticObject.getPermissions());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PermissionsAbstract returns PermissionsTypeInteger
	 *     PermissionsTypeInteger returns PermissionsTypeInteger
	 *
	 * Constraint:
	 *     permissions=EDoubleObject
	 */
	protected void sequence_PermissionsTypeInteger(ISerializationContext context, PermissionsTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsTypeInteger_Permissions()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsTypeInteger_Permissions()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissionsTypeIntegerAccess().getPermissionsEDoubleObjectParserRuleCall_0(), semanticObject.getPermissions());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PermissionsAbstract returns PermissionsTypeNull
	 *     PermissionsTypeNull returns PermissionsTypeNull
	 *
	 * Constraint:
	 *     permissions=NullValue
	 */
	protected void sequence_PermissionsTypeNull(ISerializationContext context, PermissionsTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsTypeNull_Permissions()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsTypeNull_Permissions()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissionsTypeNullAccess().getPermissionsNullValueParserRuleCall_0(), semanticObject.getPermissions());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PermissionsAbstract returns PermissionsTypeNumber
	 *     PermissionsTypeNumber returns PermissionsTypeNumber
	 *
	 * Constraint:
	 *     permissions=EDoubleObject
	 */
	protected void sequence_PermissionsTypeNumber(ISerializationContext context, PermissionsTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsTypeNumber_Permissions()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsTypeNumber_Permissions()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissionsTypeNumberAccess().getPermissionsEDoubleObjectParserRuleCall_0(), semanticObject.getPermissions());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PermissionsAbstract returns PermissionsTypeObject
	 *     PermissionsTypeObject returns PermissionsTypeObject
	 *
	 * Constraint:
	 *     (permissions+=PermissionsPropertiesAbstract permissions+=PermissionsPropertiesAbstract*)?
	 */
	protected void sequence_PermissionsTypeObject(ISerializationContext context, PermissionsTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PermissionsAbstract returns PermissionsTypeString
	 *     PermissionsTypeString returns PermissionsTypeString
	 *
	 * Constraint:
	 *     permissions=EString
	 */
	protected void sequence_PermissionsTypeString(ISerializationContext context, PermissionsTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsTypeString_Permissions()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsTypeString_Permissions()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissionsTypeStringAccess().getPermissionsEStringParserRuleCall_0(), semanticObject.getPermissions());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Permissions returns Permissions
	 *
	 * Constraint:
	 *     permissions=PermissionsAbstract
	 */
	protected void sequence_Permissions(ISerializationContext context, Permissions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_Permissions()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_Permissions()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissionsAccess().getPermissionsPermissionsAbstractParserRuleCall_0(), semanticObject.getPermissions());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ShellPropertiesAbstract returns ShellAdditionalProperties
	 *     ShellAdditionalProperties returns ShellAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_ShellAdditionalProperties(ISerializationContext context, ShellAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getShellAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ShellItems returns ShellItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_ShellItems(ISerializationContext context, ShellItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ShellAbstract returns ShellTypeArray
	 *     ShellTypeArray returns ShellTypeArray
	 *
	 * Constraint:
	 *     (shell+=ShellItems shell+=ShellItems*)?
	 */
	protected void sequence_ShellTypeArray(ISerializationContext context, ShellTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShellAbstract returns ShellTypeBoolean
	 *     ShellTypeBoolean returns ShellTypeBoolean
	 *
	 * Constraint:
	 *     shell=EBooleanObject
	 */
	protected void sequence_ShellTypeBoolean(ISerializationContext context, ShellTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeBoolean_Shell()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeBoolean_Shell()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellTypeBooleanAccess().getShellEBooleanObjectParserRuleCall_0(), semanticObject.getShell());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ShellAbstract returns ShellTypeInteger
	 *     ShellTypeInteger returns ShellTypeInteger
	 *
	 * Constraint:
	 *     shell=EDoubleObject
	 */
	protected void sequence_ShellTypeInteger(ISerializationContext context, ShellTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeInteger_Shell()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeInteger_Shell()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellTypeIntegerAccess().getShellEDoubleObjectParserRuleCall_0(), semanticObject.getShell());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ShellAbstract returns ShellTypeNull
	 *     ShellTypeNull returns ShellTypeNull
	 *
	 * Constraint:
	 *     shell=NullValue
	 */
	protected void sequence_ShellTypeNull(ISerializationContext context, ShellTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeNull_Shell()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeNull_Shell()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellTypeNullAccess().getShellNullValueParserRuleCall_0(), semanticObject.getShell());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ShellAbstract returns ShellTypeNumber
	 *     ShellTypeNumber returns ShellTypeNumber
	 *
	 * Constraint:
	 *     shell=EDoubleObject
	 */
	protected void sequence_ShellTypeNumber(ISerializationContext context, ShellTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeNumber_Shell()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeNumber_Shell()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellTypeNumberAccess().getShellEDoubleObjectParserRuleCall_0(), semanticObject.getShell());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ShellAbstract returns ShellTypeObject
	 *     ShellTypeObject returns ShellTypeObject
	 *
	 * Constraint:
	 *     (shell+=ShellPropertiesAbstract shell+=ShellPropertiesAbstract*)?
	 */
	protected void sequence_ShellTypeObject(ISerializationContext context, ShellTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShellAbstract returns ShellTypeString
	 *     ShellTypeString returns ShellTypeString
	 *
	 * Constraint:
	 *     shell=EString
	 */
	protected void sequence_ShellTypeString(ISerializationContext context, ShellTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeString_Shell()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeString_Shell()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellTypeStringAccess().getShellEStringParserRuleCall_0(), semanticObject.getShell());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Shell returns Shell
	 *
	 * Constraint:
	 *     shell=ShellAbstract
	 */
	protected void sequence_Shell(ISerializationContext context, Shell semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShell_Shell()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShell_Shell()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellAccess().getShellShellAbstractParserRuleCall_0(), semanticObject.getShell());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=EString
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueEStringParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Working_45directory returns Working_45directory
	 *
	 * Constraint:
	 *     working_45directory=EString
	 */
	protected void sequence_Working_45directory(ISerializationContext context, Working_45directory semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getWorking_45directory_Working_45directory()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getWorking_45directory_Working_45directory()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWorking_45directoryAccess().getWorking_45directoryEStringParserRuleCall_0(), semanticObject.getWorking_45directory());
		feeder.finish();
	}
	
	
}
