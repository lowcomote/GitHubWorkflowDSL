/*
 * generated by Xtext 2.23.0
 */
package githubwf.githubwf.serializer;

import com.google.inject.Inject;
import githubwf.Container;
import githubwf.ContainerCredentials;
import githubwf.ContainerCredentialsAdditionalProperties;
import githubwf.ContainerCredentialsPassword;
import githubwf.ContainerCredentialsUsername;
import githubwf.ContainerEnv;
import githubwf.ContainerImage;
import githubwf.ContainerOptions;
import githubwf.ContainerPorts;
import githubwf.ContainerPortsItems;
import githubwf.ContainerPortsItemsAdditionalProperties;
import githubwf.ContainerPortsItemsItems;
import githubwf.ContainerPortsItemsTypeArray;
import githubwf.ContainerPortsItemsTypeBoolean;
import githubwf.ContainerPortsItemsTypeInteger;
import githubwf.ContainerPortsItemsTypeNull;
import githubwf.ContainerPortsItemsTypeNumber;
import githubwf.ContainerPortsItemsTypeObject;
import githubwf.ContainerPortsItemsTypeString;
import githubwf.ContainerVolumes;
import githubwf.ContainerVolumesItems;
import githubwf.Env;
import githubwf.EnvAdditionalProperties;
import githubwf.EnvItems;
import githubwf.EnvTypeArray;
import githubwf.EnvTypeBoolean;
import githubwf.EnvTypeInteger;
import githubwf.EnvTypeNull;
import githubwf.EnvTypeNumber;
import githubwf.EnvTypeObject;
import githubwf.EnvTypeString;
import githubwf.GithubwfPackage;
import githubwf.NormalJobContainerOneOf1;
import githubwf.githubwf.services.NormalJobContainerOneOf1GrammarAccess;
import java.util.Set;
import jsonMM.ArrayValue;
import jsonMM.BooleanValue;
import jsonMM.JsonDocument;
import jsonMM.JsonMMPackage;
import jsonMM.KeyValuePair;
import jsonMM.NullValue;
import jsonMM.NumberValue;
import jsonMM.ObjectValue;
import jsonMM.StringValue;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class NormalJobContainerOneOf1SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private NormalJobContainerOneOf1GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GithubwfPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GithubwfPackage.CONTAINER:
				sequence_Container(context, (Container) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_CREDENTIALS:
				sequence_ContainerCredentials(context, (ContainerCredentials) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_CREDENTIALS_ADDITIONAL_PROPERTIES:
				sequence_ContainerCredentialsAdditionalProperties(context, (ContainerCredentialsAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_CREDENTIALS_PASSWORD:
				sequence_ContainerCredentialsPassword(context, (ContainerCredentialsPassword) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_CREDENTIALS_USERNAME:
				sequence_ContainerCredentialsUsername(context, (ContainerCredentialsUsername) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_ENV:
				sequence_ContainerEnv(context, (ContainerEnv) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_IMAGE:
				sequence_ContainerImage(context, (ContainerImage) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_OPTIONS:
				sequence_ContainerOptions(context, (ContainerOptions) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS:
				sequence_ContainerPorts(context, (ContainerPorts) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS_ITEMS:
				sequence_ContainerPortsItems(context, (ContainerPortsItems) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS_ITEMS_ADDITIONAL_PROPERTIES:
				sequence_ContainerPortsItemsAdditionalProperties(context, (ContainerPortsItemsAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS_ITEMS_ITEMS:
				sequence_ContainerPortsItemsItems(context, (ContainerPortsItemsItems) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS_ITEMS_TYPE_ARRAY:
				sequence_ContainerPortsItemsTypeArray(context, (ContainerPortsItemsTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS_ITEMS_TYPE_BOOLEAN:
				sequence_ContainerPortsItemsTypeBoolean(context, (ContainerPortsItemsTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS_ITEMS_TYPE_INTEGER:
				sequence_ContainerPortsItemsTypeInteger(context, (ContainerPortsItemsTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS_ITEMS_TYPE_NULL:
				sequence_ContainerPortsItemsTypeNull(context, (ContainerPortsItemsTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS_ITEMS_TYPE_NUMBER:
				sequence_ContainerPortsItemsTypeNumber(context, (ContainerPortsItemsTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS_ITEMS_TYPE_OBJECT:
				sequence_ContainerPortsItemsTypeObject(context, (ContainerPortsItemsTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_PORTS_ITEMS_TYPE_STRING:
				sequence_ContainerPortsItemsTypeString(context, (ContainerPortsItemsTypeString) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_VOLUMES:
				sequence_ContainerVolumes(context, (ContainerVolumes) semanticObject); 
				return; 
			case GithubwfPackage.CONTAINER_VOLUMES_ITEMS:
				sequence_ContainerVolumesItems(context, (ContainerVolumesItems) semanticObject); 
				return; 
			case GithubwfPackage.ENV:
				sequence_Env(context, (Env) semanticObject); 
				return; 
			case GithubwfPackage.ENV_ADDITIONAL_PROPERTIES:
				sequence_EnvAdditionalProperties(context, (EnvAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.ENV_ITEMS:
				sequence_EnvItems(context, (EnvItems) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_ARRAY:
				sequence_EnvTypeArray(context, (EnvTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_BOOLEAN:
				sequence_EnvTypeBoolean(context, (EnvTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_INTEGER:
				sequence_EnvTypeInteger(context, (EnvTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_NULL:
				sequence_EnvTypeNull(context, (EnvTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_NUMBER:
				sequence_EnvTypeNumber(context, (EnvTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_OBJECT:
				sequence_EnvTypeObject(context, (EnvTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_STRING:
				sequence_EnvTypeString(context, (EnvTypeString) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_CONTAINER_ONE_OF1:
				sequence_NormalJobContainerOneOf1(context, (NormalJobContainerOneOf1) semanticObject); 
				return; 
			}
		else if (epackage == JsonMMPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JsonMMPackage.ARRAY_VALUE:
				sequence_ArrayValue(context, (ArrayValue) semanticObject); 
				return; 
			case JsonMMPackage.BOOLEAN_VALUE:
				sequence_BooleanValue(context, (BooleanValue) semanticObject); 
				return; 
			case JsonMMPackage.JSON_DOCUMENT:
				sequence_JsonDocument(context, (JsonDocument) semanticObject); 
				return; 
			case JsonMMPackage.KEY_VALUE_PAIR:
				sequence_KeyValuePair(context, (KeyValuePair) semanticObject); 
				return; 
			case JsonMMPackage.NULL_VALUE:
				sequence_NullValue(context, (NullValue) semanticObject); 
				return; 
			case JsonMMPackage.NUMBER_VALUE:
				sequence_NumberValue(context, (NumberValue) semanticObject); 
				return; 
			case JsonMMPackage.OBJECT_VALUE:
				sequence_ObjectValue(context, (ObjectValue) semanticObject); 
				return; 
			case JsonMMPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Value returns ArrayValue
	 *     ArrayValue returns ArrayValue
	 *
	 * Constraint:
	 *     (value+=Value value+=Value*)?
	 */
	protected void sequence_ArrayValue(ISerializationContext context, ArrayValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns BooleanValue
	 *     BooleanValue returns BooleanValue
	 *
	 * Constraint:
	 *     value=EBoolean
	 */
	protected void sequence_BooleanValue(ISerializationContext context, BooleanValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanValueAccess().getValueEBooleanParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerCredentialsPropertiesAbstract returns ContainerCredentialsAdditionalProperties
	 *     ContainerCredentialsAdditionalProperties returns ContainerCredentialsAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_ContainerCredentialsAdditionalProperties(ISerializationContext context, ContainerCredentialsAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerCredentialsAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerCredentialsAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerCredentialsAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerCredentialsAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerCredentialsAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getContainerCredentialsAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerCredentialsPropertiesAbstract returns ContainerCredentialsPassword
	 *     ContainerCredentialsPassword returns ContainerCredentialsPassword
	 *
	 * Constraint:
	 *     password=EString
	 */
	protected void sequence_ContainerCredentialsPassword(ISerializationContext context, ContainerCredentialsPassword semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerCredentialsPassword_Password()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerCredentialsPassword_Password()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerCredentialsPasswordAccess().getPasswordEStringParserRuleCall_2_0(), semanticObject.getPassword());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerCredentialsPropertiesAbstract returns ContainerCredentialsUsername
	 *     ContainerCredentialsUsername returns ContainerCredentialsUsername
	 *
	 * Constraint:
	 *     username=EString
	 */
	protected void sequence_ContainerCredentialsUsername(ISerializationContext context, ContainerCredentialsUsername semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerCredentialsUsername_Username()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerCredentialsUsername_Username()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerCredentialsUsernameAccess().getUsernameEStringParserRuleCall_2_0(), semanticObject.getUsername());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPropertiesAbstract returns ContainerCredentials
	 *     ContainerCredentials returns ContainerCredentials
	 *
	 * Constraint:
	 *     (credentials+=ContainerCredentialsPropertiesAbstract credentials+=ContainerCredentialsPropertiesAbstract*)?
	 */
	protected void sequence_ContainerCredentials(ISerializationContext context, ContainerCredentials semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPropertiesAbstract returns ContainerEnv
	 *     ContainerEnv returns ContainerEnv
	 *
	 * Constraint:
	 *     env=Env
	 */
	protected void sequence_ContainerEnv(ISerializationContext context, ContainerEnv semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerEnv_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerEnv_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerEnvAccess().getEnvEnvParserRuleCall_2_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPropertiesAbstract returns ContainerImage
	 *     ContainerImage returns ContainerImage
	 *
	 * Constraint:
	 *     image=EString
	 */
	protected void sequence_ContainerImage(ISerializationContext context, ContainerImage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerImage_Image()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerImage_Image()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerImageAccess().getImageEStringParserRuleCall_2_0(), semanticObject.getImage());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPropertiesAbstract returns ContainerOptions
	 *     ContainerOptions returns ContainerOptions
	 *
	 * Constraint:
	 *     options=EString
	 */
	protected void sequence_ContainerOptions(ISerializationContext context, ContainerOptions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerOptions_Options()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerOptions_Options()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerOptionsAccess().getOptionsEStringParserRuleCall_2_0(), semanticObject.getOptions());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPortsItemsPropertiesAbstract returns ContainerPortsItemsAdditionalProperties
	 *     ContainerPortsItemsAdditionalProperties returns ContainerPortsItemsAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_ContainerPortsItemsAdditionalProperties(ISerializationContext context, ContainerPortsItemsAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerPortsItemsAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getContainerPortsItemsAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPortsItemsItems returns ContainerPortsItemsItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_ContainerPortsItemsItems(ISerializationContext context, ContainerPortsItemsItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerPortsItemsItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPortsItemsAbstract returns ContainerPortsItemsTypeArray
	 *     ContainerPortsItemsTypeArray returns ContainerPortsItemsTypeArray
	 *
	 * Constraint:
	 *     (items+=ContainerPortsItemsItems items+=ContainerPortsItemsItems*)?
	 */
	protected void sequence_ContainerPortsItemsTypeArray(ISerializationContext context, ContainerPortsItemsTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPortsItemsAbstract returns ContainerPortsItemsTypeBoolean
	 *     ContainerPortsItemsTypeBoolean returns ContainerPortsItemsTypeBoolean
	 *
	 * Constraint:
	 *     items=EBooleanObject
	 */
	protected void sequence_ContainerPortsItemsTypeBoolean(ISerializationContext context, ContainerPortsItemsTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsTypeBoolean_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsTypeBoolean_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerPortsItemsTypeBooleanAccess().getItemsEBooleanObjectParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPortsItemsAbstract returns ContainerPortsItemsTypeInteger
	 *     ContainerPortsItemsTypeInteger returns ContainerPortsItemsTypeInteger
	 *
	 * Constraint:
	 *     items=EDoubleObject
	 */
	protected void sequence_ContainerPortsItemsTypeInteger(ISerializationContext context, ContainerPortsItemsTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsTypeInteger_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsTypeInteger_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerPortsItemsTypeIntegerAccess().getItemsEDoubleObjectParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPortsItemsAbstract returns ContainerPortsItemsTypeNull
	 *     ContainerPortsItemsTypeNull returns ContainerPortsItemsTypeNull
	 *
	 * Constraint:
	 *     items=NullValue
	 */
	protected void sequence_ContainerPortsItemsTypeNull(ISerializationContext context, ContainerPortsItemsTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsTypeNull_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsTypeNull_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerPortsItemsTypeNullAccess().getItemsNullValueParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPortsItemsAbstract returns ContainerPortsItemsTypeNumber
	 *     ContainerPortsItemsTypeNumber returns ContainerPortsItemsTypeNumber
	 *
	 * Constraint:
	 *     items=EDoubleObject
	 */
	protected void sequence_ContainerPortsItemsTypeNumber(ISerializationContext context, ContainerPortsItemsTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsTypeNumber_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsTypeNumber_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerPortsItemsTypeNumberAccess().getItemsEDoubleObjectParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPortsItemsAbstract returns ContainerPortsItemsTypeObject
	 *     ContainerPortsItemsTypeObject returns ContainerPortsItemsTypeObject
	 *
	 * Constraint:
	 *     (items+=ContainerPortsItemsPropertiesAbstract items+=ContainerPortsItemsPropertiesAbstract*)?
	 */
	protected void sequence_ContainerPortsItemsTypeObject(ISerializationContext context, ContainerPortsItemsTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPortsItemsAbstract returns ContainerPortsItemsTypeString
	 *     ContainerPortsItemsTypeString returns ContainerPortsItemsTypeString
	 *
	 * Constraint:
	 *     items=EString
	 */
	protected void sequence_ContainerPortsItemsTypeString(ISerializationContext context, ContainerPortsItemsTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsTypeString_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItemsTypeString_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerPortsItemsTypeStringAccess().getItemsEStringParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPortsItems returns ContainerPortsItems
	 *
	 * Constraint:
	 *     items=ContainerPortsItemsAbstract
	 */
	protected void sequence_ContainerPortsItems(ISerializationContext context, ContainerPortsItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerPortsItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerPortsItemsAccess().getItemsContainerPortsItemsAbstractParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPropertiesAbstract returns ContainerPorts
	 *     ContainerPorts returns ContainerPorts
	 *
	 * Constraint:
	 *     (ports+=ContainerPortsItems ports+=ContainerPortsItems*)
	 */
	protected void sequence_ContainerPorts(ISerializationContext context, ContainerPorts semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ContainerVolumesItems returns ContainerVolumesItems
	 *
	 * Constraint:
	 *     items=EString
	 */
	protected void sequence_ContainerVolumesItems(ISerializationContext context, ContainerVolumesItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getContainerVolumesItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getContainerVolumesItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerVolumesItemsAccess().getItemsEStringParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContainerPropertiesAbstract returns ContainerVolumes
	 *     ContainerVolumes returns ContainerVolumes
	 *
	 * Constraint:
	 *     (volumes+=ContainerVolumesItems volumes+=ContainerVolumesItems*)
	 */
	protected void sequence_ContainerVolumes(ISerializationContext context, ContainerVolumes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Container returns Container
	 *
	 * Constraint:
	 *     (container+=ContainerPropertiesAbstract container+=ContainerPropertiesAbstract*)?
	 */
	protected void sequence_Container(ISerializationContext context, Container semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnvPropertiesAbstract returns EnvAdditionalProperties
	 *     EnvAdditionalProperties returns EnvAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_EnvAdditionalProperties(ISerializationContext context, EnvAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getEnvAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvItems returns EnvItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_EnvItems(ISerializationContext context, EnvItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeArray
	 *     EnvTypeArray returns EnvTypeArray
	 *
	 * Constraint:
	 *     (env+=EnvItems env+=EnvItems*)?
	 */
	protected void sequence_EnvTypeArray(ISerializationContext context, EnvTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeBoolean
	 *     EnvTypeBoolean returns EnvTypeBoolean
	 *
	 * Constraint:
	 *     env=EBooleanObject
	 */
	protected void sequence_EnvTypeBoolean(ISerializationContext context, EnvTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeBoolean_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeBoolean_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeBooleanAccess().getEnvEBooleanObjectParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeInteger
	 *     EnvTypeInteger returns EnvTypeInteger
	 *
	 * Constraint:
	 *     env=EDoubleObject
	 */
	protected void sequence_EnvTypeInteger(ISerializationContext context, EnvTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeInteger_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeInteger_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeIntegerAccess().getEnvEDoubleObjectParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeNull
	 *     EnvTypeNull returns EnvTypeNull
	 *
	 * Constraint:
	 *     env=NullValue
	 */
	protected void sequence_EnvTypeNull(ISerializationContext context, EnvTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNull_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNull_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeNullAccess().getEnvNullValueParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeNumber
	 *     EnvTypeNumber returns EnvTypeNumber
	 *
	 * Constraint:
	 *     env=EDoubleObject
	 */
	protected void sequence_EnvTypeNumber(ISerializationContext context, EnvTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNumber_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNumber_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeNumberAccess().getEnvEDoubleObjectParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeObject
	 *     EnvTypeObject returns EnvTypeObject
	 *
	 * Constraint:
	 *     (env+=EnvPropertiesAbstract env+=EnvPropertiesAbstract*)?
	 */
	protected void sequence_EnvTypeObject(ISerializationContext context, EnvTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeString
	 *     EnvTypeString returns EnvTypeString
	 *
	 * Constraint:
	 *     env=EString
	 */
	protected void sequence_EnvTypeString(ISerializationContext context, EnvTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeString_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeString_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeStringAccess().getEnvEStringParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Env returns Env
	 *
	 * Constraint:
	 *     env=EnvAbstract
	 */
	protected void sequence_Env(ISerializationContext context, Env semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnv_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnv_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvAccess().getEnvEnvAbstractParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JsonDocument returns JsonDocument
	 *
	 * Constraint:
	 *     value=Value
	 */
	protected void sequence_JsonDocument(ISerializationContext context, JsonDocument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonDocumentAccess().getValueValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeyValuePair returns KeyValuePair
	 *
	 * Constraint:
	 *     (key=EString value=Value)
	 */
	protected void sequence_KeyValuePair(ISerializationContext context, KeyValuePair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeyValuePairAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getKeyValuePairAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobContainerOneOf1 returns NormalJobContainerOneOf1
	 *
	 * Constraint:
	 *     container=Container
	 */
	protected void sequence_NormalJobContainerOneOf1(ISerializationContext context, NormalJobContainerOneOf1 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContainerOneOf1_Container()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobContainerOneOf1_Container()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobContainerOneOf1Access().getContainerContainerParserRuleCall_2_0(), semanticObject.getContainer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NullValue
	 *     NullValue returns NullValue
	 *
	 * Constraint:
	 *     value=NullEnum
	 */
	protected void sequence_NullValue(ISerializationContext context, NullValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNullValueAccess().getValueNullEnumEnumRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NumberValue
	 *     NumberValue returns NumberValue
	 *
	 * Constraint:
	 *     value=EDouble
	 */
	protected void sequence_NumberValue(ISerializationContext context, NumberValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberValueAccess().getValueEDoubleParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns ObjectValue
	 *     ObjectValue returns ObjectValue
	 *
	 * Constraint:
	 *     (keyvaluepair+=KeyValuePair keyvaluepair+=KeyValuePair*)?
	 */
	protected void sequence_ObjectValue(ISerializationContext context, ObjectValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=EString
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueEStringParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
