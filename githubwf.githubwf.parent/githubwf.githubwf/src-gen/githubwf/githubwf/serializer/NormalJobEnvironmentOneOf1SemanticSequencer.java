/*
 * generated by Xtext 2.29.0
 */
package githubwf.githubwf.serializer;

import com.google.inject.Inject;
import githubwf.Environment;
import githubwf.EnvironmentName;
import githubwf.EnvironmentUrl;
import githubwf.GithubwfPackage;
import githubwf.NormalJobEnvironmentOneOf1;
import githubwf.githubwf.services.NormalJobEnvironmentOneOf1GrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class NormalJobEnvironmentOneOf1SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private NormalJobEnvironmentOneOf1GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GithubwfPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GithubwfPackage.ENVIRONMENT:
				sequence_Environment(context, (Environment) semanticObject); 
				return; 
			case GithubwfPackage.ENVIRONMENT_NAME:
				sequence_EnvironmentName(context, (EnvironmentName) semanticObject); 
				return; 
			case GithubwfPackage.ENVIRONMENT_URL:
				sequence_EnvironmentUrl(context, (EnvironmentUrl) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_ENVIRONMENT_ONE_OF1:
				sequence_NormalJobEnvironmentOneOf1(context, (NormalJobEnvironmentOneOf1) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnvironmentPropertiesAbstract returns EnvironmentName
	 *     EnvironmentName returns EnvironmentName
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_EnvironmentName(ISerializationContext context, EnvironmentName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvironmentName_Name()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvironmentName_Name()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvironmentNameAccess().getNameEStringParserRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnvironmentPropertiesAbstract returns EnvironmentUrl
	 *     EnvironmentUrl returns EnvironmentUrl
	 *
	 * Constraint:
	 *     url=EString
	 * </pre>
	 */
	protected void sequence_EnvironmentUrl(ISerializationContext context, EnvironmentUrl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvironmentUrl_Url()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvironmentUrl_Url()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvironmentUrlAccess().getUrlEStringParserRuleCall_2_0(), semanticObject.getUrl());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Environment returns Environment
	 *
	 * Constraint:
	 *     (environment+=EnvironmentPropertiesAbstract environment+=EnvironmentPropertiesAbstract*)?
	 * </pre>
	 */
	protected void sequence_Environment(ISerializationContext context, Environment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NormalJobEnvironmentOneOf1 returns NormalJobEnvironmentOneOf1
	 *
	 * Constraint:
	 *     environment=Environment
	 * </pre>
	 */
	protected void sequence_NormalJobEnvironmentOneOf1(ISerializationContext context, NormalJobEnvironmentOneOf1 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnvironmentOneOf1_Environment()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobEnvironmentOneOf1_Environment()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobEnvironmentOneOf1Access().getEnvironmentEnvironmentParserRuleCall_2_0(), semanticObject.getEnvironment());
		feeder.finish();
	}
	
	
}
