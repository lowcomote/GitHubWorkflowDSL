/*
 * generated by Xtext 2.23.0
 */
package githubwf.githubwf.serializer;

import com.google.inject.Inject;
import githubwf.GithubwfPackage;
import githubwf.RefOneOf0AllOf1Not;
import githubwf.RefOneOf0AllOf1NotAdditionalProperties;
import githubwf.RefOneOf0AllOf1NotItems;
import githubwf.RefOneOf0AllOf1NotTypeArray;
import githubwf.RefOneOf0AllOf1NotTypeBoolean;
import githubwf.RefOneOf0AllOf1NotTypeInteger;
import githubwf.RefOneOf0AllOf1NotTypeNull;
import githubwf.RefOneOf0AllOf1NotTypeNumber;
import githubwf.RefOneOf0AllOf1NotTypeObject;
import githubwf.RefOneOf0AllOf1NotTypeString;
import githubwf.githubwf.services.RefOneOf0AllOf1NotGrammarAccess;
import java.util.Set;
import jsonMM.ArrayValue;
import jsonMM.BooleanValue;
import jsonMM.JsonDocument;
import jsonMM.JsonMMPackage;
import jsonMM.KeyValuePair;
import jsonMM.NullValue;
import jsonMM.NumberValue;
import jsonMM.ObjectValue;
import jsonMM.StringValue;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class RefOneOf0AllOf1NotSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RefOneOf0AllOf1NotGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GithubwfPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GithubwfPackage.REF_ONE_OF0_ALL_OF1_NOT:
				sequence_RefOneOf0AllOf1Not(context, (RefOneOf0AllOf1Not) semanticObject); 
				return; 
			case GithubwfPackage.REF_ONE_OF0_ALL_OF1_NOT_ADDITIONAL_PROPERTIES:
				sequence_RefOneOf0AllOf1NotAdditionalProperties(context, (RefOneOf0AllOf1NotAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.REF_ONE_OF0_ALL_OF1_NOT_ITEMS:
				sequence_RefOneOf0AllOf1NotItems(context, (RefOneOf0AllOf1NotItems) semanticObject); 
				return; 
			case GithubwfPackage.REF_ONE_OF0_ALL_OF1_NOT_TYPE_ARRAY:
				sequence_RefOneOf0AllOf1NotTypeArray(context, (RefOneOf0AllOf1NotTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.REF_ONE_OF0_ALL_OF1_NOT_TYPE_BOOLEAN:
				sequence_RefOneOf0AllOf1NotTypeBoolean(context, (RefOneOf0AllOf1NotTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.REF_ONE_OF0_ALL_OF1_NOT_TYPE_INTEGER:
				sequence_RefOneOf0AllOf1NotTypeInteger(context, (RefOneOf0AllOf1NotTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.REF_ONE_OF0_ALL_OF1_NOT_TYPE_NULL:
				sequence_RefOneOf0AllOf1NotTypeNull(context, (RefOneOf0AllOf1NotTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.REF_ONE_OF0_ALL_OF1_NOT_TYPE_NUMBER:
				sequence_RefOneOf0AllOf1NotTypeNumber(context, (RefOneOf0AllOf1NotTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.REF_ONE_OF0_ALL_OF1_NOT_TYPE_OBJECT:
				sequence_RefOneOf0AllOf1NotTypeObject(context, (RefOneOf0AllOf1NotTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.REF_ONE_OF0_ALL_OF1_NOT_TYPE_STRING:
				sequence_RefOneOf0AllOf1NotTypeString(context, (RefOneOf0AllOf1NotTypeString) semanticObject); 
				return; 
			}
		else if (epackage == JsonMMPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JsonMMPackage.ARRAY_VALUE:
				sequence_ArrayValue(context, (ArrayValue) semanticObject); 
				return; 
			case JsonMMPackage.BOOLEAN_VALUE:
				sequence_BooleanValue(context, (BooleanValue) semanticObject); 
				return; 
			case JsonMMPackage.JSON_DOCUMENT:
				sequence_JsonDocument(context, (JsonDocument) semanticObject); 
				return; 
			case JsonMMPackage.KEY_VALUE_PAIR:
				sequence_KeyValuePair(context, (KeyValuePair) semanticObject); 
				return; 
			case JsonMMPackage.NULL_VALUE:
				sequence_NullValue(context, (NullValue) semanticObject); 
				return; 
			case JsonMMPackage.NUMBER_VALUE:
				sequence_NumberValue(context, (NumberValue) semanticObject); 
				return; 
			case JsonMMPackage.OBJECT_VALUE:
				sequence_ObjectValue(context, (ObjectValue) semanticObject); 
				return; 
			case JsonMMPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Value returns ArrayValue
	 *     ArrayValue returns ArrayValue
	 *
	 * Constraint:
	 *     (value+=Value value+=Value*)?
	 */
	protected void sequence_ArrayValue(ISerializationContext context, ArrayValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns BooleanValue
	 *     BooleanValue returns BooleanValue
	 *
	 * Constraint:
	 *     value=EBoolean
	 */
	protected void sequence_BooleanValue(ISerializationContext context, BooleanValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanValueAccess().getValueEBooleanParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JsonDocument returns JsonDocument
	 *
	 * Constraint:
	 *     value=Value
	 */
	protected void sequence_JsonDocument(ISerializationContext context, JsonDocument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonDocumentAccess().getValueValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeyValuePair returns KeyValuePair
	 *
	 * Constraint:
	 *     (key=EString value=Value)
	 */
	protected void sequence_KeyValuePair(ISerializationContext context, KeyValuePair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeyValuePairAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getKeyValuePairAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NullValue
	 *     NullValue returns NullValue
	 *
	 * Constraint:
	 *     value=NullEnum
	 */
	protected void sequence_NullValue(ISerializationContext context, NullValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNullValueAccess().getValueNullEnumEnumRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NumberValue
	 *     NumberValue returns NumberValue
	 *
	 * Constraint:
	 *     value=EDouble
	 */
	protected void sequence_NumberValue(ISerializationContext context, NumberValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberValueAccess().getValueEDoubleParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns ObjectValue
	 *     ObjectValue returns ObjectValue
	 *
	 * Constraint:
	 *     (keyvaluepair+=KeyValuePair keyvaluepair+=KeyValuePair*)?
	 */
	protected void sequence_ObjectValue(ISerializationContext context, ObjectValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RefOneOf0AllOf1NotPropertiesAbstract returns RefOneOf0AllOf1NotAdditionalProperties
	 *     RefOneOf0AllOf1NotAdditionalProperties returns RefOneOf0AllOf1NotAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_RefOneOf0AllOf1NotAdditionalProperties(ISerializationContext context, RefOneOf0AllOf1NotAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf1NotAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf1NotAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf1NotAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf1NotAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefOneOf0AllOf1NotAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getRefOneOf0AllOf1NotAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RefOneOf0AllOf1NotItems returns RefOneOf0AllOf1NotItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_RefOneOf0AllOf1NotItems(ISerializationContext context, RefOneOf0AllOf1NotItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf1NotItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf1NotItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefOneOf0AllOf1NotItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RefOneOf0AllOf1NotAbstract returns RefOneOf0AllOf1NotTypeArray
	 *     RefOneOf0AllOf1NotTypeArray returns RefOneOf0AllOf1NotTypeArray
	 *
	 * Constraint:
	 *     (ref+=RefOneOf0AllOf1NotItems ref+=RefOneOf0AllOf1NotItems*)?
	 */
	protected void sequence_RefOneOf0AllOf1NotTypeArray(ISerializationContext context, RefOneOf0AllOf1NotTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RefOneOf0AllOf1NotAbstract returns RefOneOf0AllOf1NotTypeBoolean
	 *     RefOneOf0AllOf1NotTypeBoolean returns RefOneOf0AllOf1NotTypeBoolean
	 *
	 * Constraint:
	 *     ref=EBooleanObject
	 */
	protected void sequence_RefOneOf0AllOf1NotTypeBoolean(ISerializationContext context, RefOneOf0AllOf1NotTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf1NotTypeBoolean_Ref()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf1NotTypeBoolean_Ref()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefOneOf0AllOf1NotTypeBooleanAccess().getRefEBooleanObjectParserRuleCall_0(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RefOneOf0AllOf1NotAbstract returns RefOneOf0AllOf1NotTypeInteger
	 *     RefOneOf0AllOf1NotTypeInteger returns RefOneOf0AllOf1NotTypeInteger
	 *
	 * Constraint:
	 *     ref=EDoubleObject
	 */
	protected void sequence_RefOneOf0AllOf1NotTypeInteger(ISerializationContext context, RefOneOf0AllOf1NotTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf1NotTypeInteger_Ref()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf1NotTypeInteger_Ref()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefOneOf0AllOf1NotTypeIntegerAccess().getRefEDoubleObjectParserRuleCall_0(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RefOneOf0AllOf1NotAbstract returns RefOneOf0AllOf1NotTypeNull
	 *     RefOneOf0AllOf1NotTypeNull returns RefOneOf0AllOf1NotTypeNull
	 *
	 * Constraint:
	 *     ref=NullValue
	 */
	protected void sequence_RefOneOf0AllOf1NotTypeNull(ISerializationContext context, RefOneOf0AllOf1NotTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf1NotTypeNull_Ref()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf1NotTypeNull_Ref()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefOneOf0AllOf1NotTypeNullAccess().getRefNullValueParserRuleCall_0(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RefOneOf0AllOf1NotAbstract returns RefOneOf0AllOf1NotTypeNumber
	 *     RefOneOf0AllOf1NotTypeNumber returns RefOneOf0AllOf1NotTypeNumber
	 *
	 * Constraint:
	 *     ref=EDoubleObject
	 */
	protected void sequence_RefOneOf0AllOf1NotTypeNumber(ISerializationContext context, RefOneOf0AllOf1NotTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf1NotTypeNumber_Ref()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf1NotTypeNumber_Ref()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefOneOf0AllOf1NotTypeNumberAccess().getRefEDoubleObjectParserRuleCall_0(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RefOneOf0AllOf1NotAbstract returns RefOneOf0AllOf1NotTypeObject
	 *     RefOneOf0AllOf1NotTypeObject returns RefOneOf0AllOf1NotTypeObject
	 *
	 * Constraint:
	 *     (ref+=RefOneOf0AllOf1NotPropertiesAbstract ref+=RefOneOf0AllOf1NotPropertiesAbstract*)?
	 */
	protected void sequence_RefOneOf0AllOf1NotTypeObject(ISerializationContext context, RefOneOf0AllOf1NotTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RefOneOf0AllOf1NotAbstract returns RefOneOf0AllOf1NotTypeString
	 *     RefOneOf0AllOf1NotTypeString returns RefOneOf0AllOf1NotTypeString
	 *
	 * Constraint:
	 *     ref=EString
	 */
	protected void sequence_RefOneOf0AllOf1NotTypeString(ISerializationContext context, RefOneOf0AllOf1NotTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf1NotTypeString_Ref()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf1NotTypeString_Ref()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefOneOf0AllOf1NotTypeStringAccess().getRefEStringParserRuleCall_0(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RefOneOf0AllOf1Not returns RefOneOf0AllOf1Not
	 *
	 * Constraint:
	 *     ref=RefOneOf0AllOf1NotAbstract
	 */
	protected void sequence_RefOneOf0AllOf1Not(ISerializationContext context, RefOneOf0AllOf1Not semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf1Not_Ref()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getRefOneOf0AllOf1Not_Ref()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRefOneOf0AllOf1NotAccess().getRefRefOneOf0AllOf1NotAbstractParserRuleCall_0(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=EString
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueEStringParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
