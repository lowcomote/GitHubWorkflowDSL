/*
 * generated by Xtext 2.29.0
 */
package githubwf.githubwf.serializer;

import com.google.inject.Inject;
import githubwf.Configuration;
import githubwf.ConfigurationAdditionalProperties;
import githubwf.ConfigurationItems;
import githubwf.ConfigurationTypeArray;
import githubwf.ConfigurationTypeBoolean;
import githubwf.ConfigurationTypeInteger;
import githubwf.ConfigurationTypeNull;
import githubwf.ConfigurationTypeNumber;
import githubwf.ConfigurationTypeObject;
import githubwf.ConfigurationTypeString;
import githubwf.Env;
import githubwf.EnvAdditionalProperties;
import githubwf.EnvItems;
import githubwf.EnvTypeArray;
import githubwf.EnvTypeBoolean;
import githubwf.EnvTypeInteger;
import githubwf.EnvTypeNull;
import githubwf.EnvTypeNumber;
import githubwf.EnvTypeObject;
import githubwf.EnvTypeString;
import githubwf.GithubwfPackage;
import githubwf.GithubwfRootJobsPatternProperties0OneOf1;
import githubwf.JobNeeds;
import githubwf.JobNeedsAdditionalProperties;
import githubwf.JobNeedsItems;
import githubwf.JobNeedsTypeArray;
import githubwf.JobNeedsTypeBoolean;
import githubwf.JobNeedsTypeInteger;
import githubwf.JobNeedsTypeNull;
import githubwf.JobNeedsTypeNumber;
import githubwf.JobNeedsTypeObject;
import githubwf.JobNeedsTypeString;
import githubwf.Permissions_45event;
import githubwf.Permissions_45eventActions;
import githubwf.Permissions_45eventChecks;
import githubwf.Permissions_45eventContents;
import githubwf.Permissions_45eventDeployments;
import githubwf.Permissions_45eventDiscussions;
import githubwf.Permissions_45eventId_45token;
import githubwf.Permissions_45eventIssues;
import githubwf.Permissions_45eventPackages;
import githubwf.Permissions_45eventPages;
import githubwf.Permissions_45eventPull_45requests;
import githubwf.Permissions_45eventRepository_45projects;
import githubwf.Permissions_45eventSecurity_45events;
import githubwf.Permissions_45eventStatuses;
import githubwf.Permissions_45level;
import githubwf.ReusableWorkflowCallJob;
import githubwf.ReusableWorkflowCallJobConcurrency;
import githubwf.ReusableWorkflowCallJobConcurrencyAdditionalProperties;
import githubwf.ReusableWorkflowCallJobConcurrencyItems;
import githubwf.ReusableWorkflowCallJobConcurrencyTypeArray;
import githubwf.ReusableWorkflowCallJobConcurrencyTypeBoolean;
import githubwf.ReusableWorkflowCallJobConcurrencyTypeInteger;
import githubwf.ReusableWorkflowCallJobConcurrencyTypeNull;
import githubwf.ReusableWorkflowCallJobConcurrencyTypeNumber;
import githubwf.ReusableWorkflowCallJobConcurrencyTypeObject;
import githubwf.ReusableWorkflowCallJobConcurrencyTypeString;
import githubwf.ReusableWorkflowCallJobIf;
import githubwf.ReusableWorkflowCallJobIfTypeBoolean;
import githubwf.ReusableWorkflowCallJobIfTypeNumber;
import githubwf.ReusableWorkflowCallJobIfTypeString;
import githubwf.ReusableWorkflowCallJobName;
import githubwf.ReusableWorkflowCallJobNeeds;
import githubwf.ReusableWorkflowCallJobPermissions;
import githubwf.ReusableWorkflowCallJobSecrets;
import githubwf.ReusableWorkflowCallJobSecretsAdditionalProperties;
import githubwf.ReusableWorkflowCallJobSecretsItems;
import githubwf.ReusableWorkflowCallJobSecretsTypeArray;
import githubwf.ReusableWorkflowCallJobSecretsTypeBoolean;
import githubwf.ReusableWorkflowCallJobSecretsTypeInteger;
import githubwf.ReusableWorkflowCallJobSecretsTypeNull;
import githubwf.ReusableWorkflowCallJobSecretsTypeNumber;
import githubwf.ReusableWorkflowCallJobSecretsTypeObject;
import githubwf.ReusableWorkflowCallJobSecretsTypeString;
import githubwf.ReusableWorkflowCallJobStrategy;
import githubwf.ReusableWorkflowCallJobStrategyFail_45fast;
import githubwf.ReusableWorkflowCallJobStrategyMatrix;
import githubwf.ReusableWorkflowCallJobStrategyMatrixAdditionalProperties;
import githubwf.ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAdditionalProperties;
import githubwf.ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesItems;
import githubwf.ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeArray;
import githubwf.ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeBoolean;
import githubwf.ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeInteger;
import githubwf.ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNull;
import githubwf.ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNumber;
import githubwf.ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeObject;
import githubwf.ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeString;
import githubwf.ReusableWorkflowCallJobStrategyMatrixItems;
import githubwf.ReusableWorkflowCallJobStrategyMatrixPatternProperties0;
import githubwf.ReusableWorkflowCallJobStrategyMatrixPatternProperties0Items;
import githubwf.ReusableWorkflowCallJobStrategyMatrixPatternProperties0ItemsAdditionalProperties;
import githubwf.ReusableWorkflowCallJobStrategyMatrixTypeArray;
import githubwf.ReusableWorkflowCallJobStrategyMatrixTypeBoolean;
import githubwf.ReusableWorkflowCallJobStrategyMatrixTypeInteger;
import githubwf.ReusableWorkflowCallJobStrategyMatrixTypeNull;
import githubwf.ReusableWorkflowCallJobStrategyMatrixTypeNumber;
import githubwf.ReusableWorkflowCallJobStrategyMatrixTypeObject;
import githubwf.ReusableWorkflowCallJobStrategyMatrixTypeString;
import githubwf.ReusableWorkflowCallJobStrategyMax_45parallel;
import githubwf.ReusableWorkflowCallJobUses;
import githubwf.ReusableWorkflowCallJobWith;
import githubwf.githubwf.services.GithubwfRootJobsPatternProperties0OneOf1GrammarAccess;
import java.util.Set;
import jsonMM.ArrayValue;
import jsonMM.BooleanValue;
import jsonMM.JsonDocument;
import jsonMM.JsonMMPackage;
import jsonMM.KeyValuePair;
import jsonMM.NullValue;
import jsonMM.NumberValue;
import jsonMM.ObjectValue;
import jsonMM.StringValue;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GithubwfRootJobsPatternProperties0OneOf1SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GithubwfRootJobsPatternProperties0OneOf1GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GithubwfPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GithubwfPackage.CONFIGURATION:
				sequence_Configuration(context, (Configuration) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_ADDITIONAL_PROPERTIES:
				sequence_ConfigurationAdditionalProperties(context, (ConfigurationAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_ITEMS:
				sequence_ConfigurationItems(context, (ConfigurationItems) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_TYPE_ARRAY:
				sequence_ConfigurationTypeArray(context, (ConfigurationTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_TYPE_BOOLEAN:
				sequence_ConfigurationTypeBoolean(context, (ConfigurationTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_TYPE_INTEGER:
				sequence_ConfigurationTypeInteger(context, (ConfigurationTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_TYPE_NULL:
				sequence_ConfigurationTypeNull(context, (ConfigurationTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_TYPE_NUMBER:
				sequence_ConfigurationTypeNumber(context, (ConfigurationTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_TYPE_OBJECT:
				sequence_ConfigurationTypeObject(context, (ConfigurationTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_TYPE_STRING:
				sequence_ConfigurationTypeString(context, (ConfigurationTypeString) semanticObject); 
				return; 
			case GithubwfPackage.ENV:
				sequence_Env(context, (Env) semanticObject); 
				return; 
			case GithubwfPackage.ENV_ADDITIONAL_PROPERTIES:
				sequence_EnvAdditionalProperties(context, (EnvAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.ENV_ITEMS:
				sequence_EnvItems(context, (EnvItems) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_ARRAY:
				sequence_EnvTypeArray(context, (EnvTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_BOOLEAN:
				sequence_EnvTypeBoolean(context, (EnvTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_INTEGER:
				sequence_EnvTypeInteger(context, (EnvTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_NULL:
				sequence_EnvTypeNull(context, (EnvTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_NUMBER:
				sequence_EnvTypeNumber(context, (EnvTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_OBJECT:
				sequence_EnvTypeObject(context, (EnvTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_STRING:
				sequence_EnvTypeString(context, (EnvTypeString) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_JOBS_PATTERN_PROPERTIES0_ONE_OF1:
				sequence_GithubwfRootJobsPatternProperties0OneOf1(context, (GithubwfRootJobsPatternProperties0OneOf1) semanticObject); 
				return; 
			case GithubwfPackage.JOB_NEEDS:
				sequence_JobNeeds(context, (JobNeeds) semanticObject); 
				return; 
			case GithubwfPackage.JOB_NEEDS_ADDITIONAL_PROPERTIES:
				sequence_JobNeedsAdditionalProperties(context, (JobNeedsAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.JOB_NEEDS_ITEMS:
				sequence_JobNeedsItems(context, (JobNeedsItems) semanticObject); 
				return; 
			case GithubwfPackage.JOB_NEEDS_TYPE_ARRAY:
				sequence_JobNeedsTypeArray(context, (JobNeedsTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.JOB_NEEDS_TYPE_BOOLEAN:
				sequence_JobNeedsTypeBoolean(context, (JobNeedsTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.JOB_NEEDS_TYPE_INTEGER:
				sequence_JobNeedsTypeInteger(context, (JobNeedsTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.JOB_NEEDS_TYPE_NULL:
				sequence_JobNeedsTypeNull(context, (JobNeedsTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.JOB_NEEDS_TYPE_NUMBER:
				sequence_JobNeedsTypeNumber(context, (JobNeedsTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.JOB_NEEDS_TYPE_OBJECT:
				sequence_JobNeedsTypeObject(context, (JobNeedsTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.JOB_NEEDS_TYPE_STRING:
				sequence_JobNeedsTypeString(context, (JobNeedsTypeString) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT:
				sequence_Permissions_45event(context, (Permissions_45event) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_ACTIONS:
				sequence_Permissions_45eventActions(context, (Permissions_45eventActions) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_CHECKS:
				sequence_Permissions_45eventChecks(context, (Permissions_45eventChecks) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_CONTENTS:
				sequence_Permissions_45eventContents(context, (Permissions_45eventContents) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_DEPLOYMENTS:
				sequence_Permissions_45eventDeployments(context, (Permissions_45eventDeployments) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_DISCUSSIONS:
				sequence_Permissions_45eventDiscussions(context, (Permissions_45eventDiscussions) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_ID_45TOKEN:
				sequence_Permissions_45eventId_45token(context, (Permissions_45eventId_45token) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_ISSUES:
				sequence_Permissions_45eventIssues(context, (Permissions_45eventIssues) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_PACKAGES:
				sequence_Permissions_45eventPackages(context, (Permissions_45eventPackages) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_PAGES:
				sequence_Permissions_45eventPages(context, (Permissions_45eventPages) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_PULL_45REQUESTS:
				sequence_Permissions_45eventPull_45requests(context, (Permissions_45eventPull_45requests) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_REPOSITORY_45PROJECTS:
				sequence_Permissions_45eventRepository_45projects(context, (Permissions_45eventRepository_45projects) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_SECURITY_45EVENTS:
				sequence_Permissions_45eventSecurity_45events(context, (Permissions_45eventSecurity_45events) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_STATUSES:
				sequence_Permissions_45eventStatuses(context, (Permissions_45eventStatuses) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45LEVEL:
				sequence_Permissions_45level(context, (Permissions_45level) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB:
				sequence_ReusableWorkflowCallJob(context, (ReusableWorkflowCallJob) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_CONCURRENCY:
				sequence_ReusableWorkflowCallJobConcurrency(context, (ReusableWorkflowCallJobConcurrency) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_CONCURRENCY_ADDITIONAL_PROPERTIES:
				sequence_ReusableWorkflowCallJobConcurrencyAdditionalProperties(context, (ReusableWorkflowCallJobConcurrencyAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_CONCURRENCY_ITEMS:
				sequence_ReusableWorkflowCallJobConcurrencyItems(context, (ReusableWorkflowCallJobConcurrencyItems) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_CONCURRENCY_TYPE_ARRAY:
				sequence_ReusableWorkflowCallJobConcurrencyTypeArray(context, (ReusableWorkflowCallJobConcurrencyTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_CONCURRENCY_TYPE_BOOLEAN:
				sequence_ReusableWorkflowCallJobConcurrencyTypeBoolean(context, (ReusableWorkflowCallJobConcurrencyTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_CONCURRENCY_TYPE_INTEGER:
				sequence_ReusableWorkflowCallJobConcurrencyTypeInteger(context, (ReusableWorkflowCallJobConcurrencyTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_CONCURRENCY_TYPE_NULL:
				sequence_ReusableWorkflowCallJobConcurrencyTypeNull(context, (ReusableWorkflowCallJobConcurrencyTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_CONCURRENCY_TYPE_NUMBER:
				sequence_ReusableWorkflowCallJobConcurrencyTypeNumber(context, (ReusableWorkflowCallJobConcurrencyTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_CONCURRENCY_TYPE_OBJECT:
				sequence_ReusableWorkflowCallJobConcurrencyTypeObject(context, (ReusableWorkflowCallJobConcurrencyTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_CONCURRENCY_TYPE_STRING:
				sequence_ReusableWorkflowCallJobConcurrencyTypeString(context, (ReusableWorkflowCallJobConcurrencyTypeString) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_IF:
				sequence_ReusableWorkflowCallJobIf(context, (ReusableWorkflowCallJobIf) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_IF_TYPE_BOOLEAN:
				sequence_ReusableWorkflowCallJobIfTypeBoolean(context, (ReusableWorkflowCallJobIfTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_IF_TYPE_NUMBER:
				sequence_ReusableWorkflowCallJobIfTypeNumber(context, (ReusableWorkflowCallJobIfTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_IF_TYPE_STRING:
				sequence_ReusableWorkflowCallJobIfTypeString(context, (ReusableWorkflowCallJobIfTypeString) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_NAME:
				sequence_ReusableWorkflowCallJobName(context, (ReusableWorkflowCallJobName) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_NEEDS:
				sequence_ReusableWorkflowCallJobNeeds(context, (ReusableWorkflowCallJobNeeds) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_PERMISSIONS:
				sequence_ReusableWorkflowCallJobPermissions(context, (ReusableWorkflowCallJobPermissions) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_SECRETS:
				sequence_ReusableWorkflowCallJobSecrets(context, (ReusableWorkflowCallJobSecrets) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_SECRETS_ADDITIONAL_PROPERTIES:
				sequence_ReusableWorkflowCallJobSecretsAdditionalProperties(context, (ReusableWorkflowCallJobSecretsAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_SECRETS_ITEMS:
				sequence_ReusableWorkflowCallJobSecretsItems(context, (ReusableWorkflowCallJobSecretsItems) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_SECRETS_TYPE_ARRAY:
				sequence_ReusableWorkflowCallJobSecretsTypeArray(context, (ReusableWorkflowCallJobSecretsTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_SECRETS_TYPE_BOOLEAN:
				sequence_ReusableWorkflowCallJobSecretsTypeBoolean(context, (ReusableWorkflowCallJobSecretsTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_SECRETS_TYPE_INTEGER:
				sequence_ReusableWorkflowCallJobSecretsTypeInteger(context, (ReusableWorkflowCallJobSecretsTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_SECRETS_TYPE_NULL:
				sequence_ReusableWorkflowCallJobSecretsTypeNull(context, (ReusableWorkflowCallJobSecretsTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_SECRETS_TYPE_NUMBER:
				sequence_ReusableWorkflowCallJobSecretsTypeNumber(context, (ReusableWorkflowCallJobSecretsTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_SECRETS_TYPE_OBJECT:
				sequence_ReusableWorkflowCallJobSecretsTypeObject(context, (ReusableWorkflowCallJobSecretsTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_SECRETS_TYPE_STRING:
				sequence_ReusableWorkflowCallJobSecretsTypeString(context, (ReusableWorkflowCallJobSecretsTypeString) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY:
				sequence_ReusableWorkflowCallJobStrategy(context, (ReusableWorkflowCallJobStrategy) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_FAIL_45FAST:
				sequence_ReusableWorkflowCallJobStrategyFail_45fast(context, (ReusableWorkflowCallJobStrategyFail_45fast) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX:
				sequence_ReusableWorkflowCallJobStrategyMatrix(context, (ReusableWorkflowCallJobStrategyMatrix) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES:
				sequence_ReusableWorkflowCallJobStrategyMatrixAdditionalProperties(context, (ReusableWorkflowCallJobStrategyMatrixAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES_ADDITIONAL_PROPERTIES:
				sequence_ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAdditionalProperties(context, (ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES_ITEMS:
				sequence_ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesItems(context, (ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesItems) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES_TYPE_ARRAY:
				sequence_ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeArray(context, (ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES_TYPE_BOOLEAN:
				sequence_ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeBoolean(context, (ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES_TYPE_INTEGER:
				sequence_ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeInteger(context, (ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES_TYPE_NULL:
				sequence_ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNull(context, (ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES_TYPE_NUMBER:
				sequence_ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNumber(context, (ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES_TYPE_OBJECT:
				sequence_ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeObject(context, (ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES_TYPE_STRING:
				sequence_ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeString(context, (ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeString) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX_ITEMS:
				sequence_ReusableWorkflowCallJobStrategyMatrixItems(context, (ReusableWorkflowCallJobStrategyMatrixItems) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX_PATTERN_PROPERTIES0:
				sequence_ReusableWorkflowCallJobStrategyMatrixPatternProperties0(context, (ReusableWorkflowCallJobStrategyMatrixPatternProperties0) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX_PATTERN_PROPERTIES0_ITEMS:
				sequence_ReusableWorkflowCallJobStrategyMatrixPatternProperties0Items(context, (ReusableWorkflowCallJobStrategyMatrixPatternProperties0Items) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX_PATTERN_PROPERTIES0_ITEMS_ADDITIONAL_PROPERTIES:
				sequence_ReusableWorkflowCallJobStrategyMatrixPatternProperties0ItemsAdditionalProperties(context, (ReusableWorkflowCallJobStrategyMatrixPatternProperties0ItemsAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX_TYPE_ARRAY:
				sequence_ReusableWorkflowCallJobStrategyMatrixTypeArray(context, (ReusableWorkflowCallJobStrategyMatrixTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX_TYPE_BOOLEAN:
				sequence_ReusableWorkflowCallJobStrategyMatrixTypeBoolean(context, (ReusableWorkflowCallJobStrategyMatrixTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX_TYPE_INTEGER:
				sequence_ReusableWorkflowCallJobStrategyMatrixTypeInteger(context, (ReusableWorkflowCallJobStrategyMatrixTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX_TYPE_NULL:
				sequence_ReusableWorkflowCallJobStrategyMatrixTypeNull(context, (ReusableWorkflowCallJobStrategyMatrixTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX_TYPE_NUMBER:
				sequence_ReusableWorkflowCallJobStrategyMatrixTypeNumber(context, (ReusableWorkflowCallJobStrategyMatrixTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX_TYPE_OBJECT:
				sequence_ReusableWorkflowCallJobStrategyMatrixTypeObject(context, (ReusableWorkflowCallJobStrategyMatrixTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MATRIX_TYPE_STRING:
				sequence_ReusableWorkflowCallJobStrategyMatrixTypeString(context, (ReusableWorkflowCallJobStrategyMatrixTypeString) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_STRATEGY_MAX_45PARALLEL:
				sequence_ReusableWorkflowCallJobStrategyMax_45parallel(context, (ReusableWorkflowCallJobStrategyMax_45parallel) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_USES:
				sequence_ReusableWorkflowCallJobUses(context, (ReusableWorkflowCallJobUses) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_WITH:
				sequence_ReusableWorkflowCallJobWith(context, (ReusableWorkflowCallJobWith) semanticObject); 
				return; 
			}
		else if (epackage == JsonMMPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JsonMMPackage.ARRAY_VALUE:
				sequence_ArrayValue(context, (ArrayValue) semanticObject); 
				return; 
			case JsonMMPackage.BOOLEAN_VALUE:
				sequence_BooleanValue(context, (BooleanValue) semanticObject); 
				return; 
			case JsonMMPackage.JSON_DOCUMENT:
				sequence_JsonDocument(context, (JsonDocument) semanticObject); 
				return; 
			case JsonMMPackage.KEY_VALUE_PAIR:
				sequence_KeyValuePair(context, (KeyValuePair) semanticObject); 
				return; 
			case JsonMMPackage.NULL_VALUE:
				sequence_NullValue(context, (NullValue) semanticObject); 
				return; 
			case JsonMMPackage.NUMBER_VALUE:
				sequence_NumberValue(context, (NumberValue) semanticObject); 
				return; 
			case JsonMMPackage.OBJECT_VALUE:
				sequence_ObjectValue(context, (ObjectValue) semanticObject); 
				return; 
			case JsonMMPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns ArrayValue
	 *     ArrayValue returns ArrayValue
	 *
	 * Constraint:
	 *     (value+=Value value+=Value*)?
	 * </pre>
	 */
	protected void sequence_ArrayValue(ISerializationContext context, ArrayValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns BooleanValue
	 *     BooleanValue returns BooleanValue
	 *
	 * Constraint:
	 *     value=EBoolean
	 * </pre>
	 */
	protected void sequence_BooleanValue(ISerializationContext context, BooleanValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanValueAccess().getValueEBooleanParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConfigurationPropertiesAbstract returns ConfigurationAdditionalProperties
	 *     ConfigurationAdditionalProperties returns ConfigurationAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 * </pre>
	 */
	protected void sequence_ConfigurationAdditionalProperties(ISerializationContext context, ConfigurationAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getConfigurationAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConfigurationItems returns ConfigurationItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 * </pre>
	 */
	protected void sequence_ConfigurationItems(ISerializationContext context, ConfigurationItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConfigurationAbstract returns ConfigurationTypeArray
	 *     ConfigurationTypeArray returns ConfigurationTypeArray
	 *
	 * Constraint:
	 *     (configuration+=ConfigurationItems configuration+=ConfigurationItems*)?
	 * </pre>
	 */
	protected void sequence_ConfigurationTypeArray(ISerializationContext context, ConfigurationTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConfigurationAbstract returns ConfigurationTypeBoolean
	 *     ConfigurationTypeBoolean returns ConfigurationTypeBoolean
	 *
	 * Constraint:
	 *     configuration=EBooleanObject
	 * </pre>
	 */
	protected void sequence_ConfigurationTypeBoolean(ISerializationContext context, ConfigurationTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeBoolean_Configuration()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeBoolean_Configuration()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationTypeBooleanAccess().getConfigurationEBooleanObjectParserRuleCall_0(), semanticObject.getConfiguration());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConfigurationAbstract returns ConfigurationTypeInteger
	 *     ConfigurationTypeInteger returns ConfigurationTypeInteger
	 *
	 * Constraint:
	 *     configuration=EDoubleObject
	 * </pre>
	 */
	protected void sequence_ConfigurationTypeInteger(ISerializationContext context, ConfigurationTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeInteger_Configuration()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeInteger_Configuration()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationTypeIntegerAccess().getConfigurationEDoubleObjectParserRuleCall_0(), semanticObject.getConfiguration());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConfigurationAbstract returns ConfigurationTypeNull
	 *     ConfigurationTypeNull returns ConfigurationTypeNull
	 *
	 * Constraint:
	 *     configuration=NullValue
	 * </pre>
	 */
	protected void sequence_ConfigurationTypeNull(ISerializationContext context, ConfigurationTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeNull_Configuration()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeNull_Configuration()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationTypeNullAccess().getConfigurationNullValueParserRuleCall_0(), semanticObject.getConfiguration());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConfigurationAbstract returns ConfigurationTypeNumber
	 *     ConfigurationTypeNumber returns ConfigurationTypeNumber
	 *
	 * Constraint:
	 *     configuration=EDoubleObject
	 * </pre>
	 */
	protected void sequence_ConfigurationTypeNumber(ISerializationContext context, ConfigurationTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeNumber_Configuration()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeNumber_Configuration()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationTypeNumberAccess().getConfigurationEDoubleObjectParserRuleCall_0(), semanticObject.getConfiguration());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConfigurationAbstract returns ConfigurationTypeObject
	 *     ConfigurationTypeObject returns ConfigurationTypeObject
	 *
	 * Constraint:
	 *     (configuration+=ConfigurationPropertiesAbstract configuration+=ConfigurationPropertiesAbstract*)?
	 * </pre>
	 */
	protected void sequence_ConfigurationTypeObject(ISerializationContext context, ConfigurationTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConfigurationAbstract returns ConfigurationTypeString
	 *     ConfigurationTypeString returns ConfigurationTypeString
	 *
	 * Constraint:
	 *     configuration=EString
	 * </pre>
	 */
	protected void sequence_ConfigurationTypeString(ISerializationContext context, ConfigurationTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeString_Configuration()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeString_Configuration()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationTypeStringAccess().getConfigurationEStringParserRuleCall_0(), semanticObject.getConfiguration());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Configuration returns Configuration
	 *
	 * Constraint:
	 *     configuration=ConfigurationAbstract
	 * </pre>
	 */
	protected void sequence_Configuration(ISerializationContext context, Configuration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfiguration_Configuration()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfiguration_Configuration()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationAccess().getConfigurationConfigurationAbstractParserRuleCall_0(), semanticObject.getConfiguration());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnvPropertiesAbstract returns EnvAdditionalProperties
	 *     EnvAdditionalProperties returns EnvAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 * </pre>
	 */
	protected void sequence_EnvAdditionalProperties(ISerializationContext context, EnvAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getEnvAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnvItems returns EnvItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 * </pre>
	 */
	protected void sequence_EnvItems(ISerializationContext context, EnvItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnvAbstract returns EnvTypeArray
	 *     EnvTypeArray returns EnvTypeArray
	 *
	 * Constraint:
	 *     (env+=EnvItems env+=EnvItems*)?
	 * </pre>
	 */
	protected void sequence_EnvTypeArray(ISerializationContext context, EnvTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnvAbstract returns EnvTypeBoolean
	 *     EnvTypeBoolean returns EnvTypeBoolean
	 *
	 * Constraint:
	 *     env=EBooleanObject
	 * </pre>
	 */
	protected void sequence_EnvTypeBoolean(ISerializationContext context, EnvTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeBoolean_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeBoolean_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeBooleanAccess().getEnvEBooleanObjectParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnvAbstract returns EnvTypeInteger
	 *     EnvTypeInteger returns EnvTypeInteger
	 *
	 * Constraint:
	 *     env=EDoubleObject
	 * </pre>
	 */
	protected void sequence_EnvTypeInteger(ISerializationContext context, EnvTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeInteger_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeInteger_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeIntegerAccess().getEnvEDoubleObjectParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnvAbstract returns EnvTypeNull
	 *     EnvTypeNull returns EnvTypeNull
	 *
	 * Constraint:
	 *     env=NullValue
	 * </pre>
	 */
	protected void sequence_EnvTypeNull(ISerializationContext context, EnvTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNull_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNull_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeNullAccess().getEnvNullValueParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnvAbstract returns EnvTypeNumber
	 *     EnvTypeNumber returns EnvTypeNumber
	 *
	 * Constraint:
	 *     env=EDoubleObject
	 * </pre>
	 */
	protected void sequence_EnvTypeNumber(ISerializationContext context, EnvTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNumber_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNumber_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeNumberAccess().getEnvEDoubleObjectParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnvAbstract returns EnvTypeObject
	 *     EnvTypeObject returns EnvTypeObject
	 *
	 * Constraint:
	 *     (env+=EnvPropertiesAbstract env+=EnvPropertiesAbstract*)?
	 * </pre>
	 */
	protected void sequence_EnvTypeObject(ISerializationContext context, EnvTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnvAbstract returns EnvTypeString
	 *     EnvTypeString returns EnvTypeString
	 *
	 * Constraint:
	 *     env=EString
	 * </pre>
	 */
	protected void sequence_EnvTypeString(ISerializationContext context, EnvTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeString_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeString_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeStringAccess().getEnvEStringParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Env returns Env
	 *
	 * Constraint:
	 *     env=EnvAbstract
	 * </pre>
	 */
	protected void sequence_Env(ISerializationContext context, Env semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnv_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnv_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvAccess().getEnvEnvAbstractParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootJobsPatternProperties0OneOf1 returns GithubwfRootJobsPatternProperties0OneOf1
	 *
	 * Constraint:
	 *     patternProperties0=ReusableWorkflowCallJob
	 * </pre>
	 */
	protected void sequence_GithubwfRootJobsPatternProperties0OneOf1(ISerializationContext context, GithubwfRootJobsPatternProperties0OneOf1 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0OneOf1_PatternProperties0()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0OneOf1_PatternProperties0()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootJobsPatternProperties0OneOf1Access().getPatternProperties0ReusableWorkflowCallJobParserRuleCall_0(), semanticObject.getPatternProperties0());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JobNeedsPropertiesAbstract returns JobNeedsAdditionalProperties
	 *     JobNeedsAdditionalProperties returns JobNeedsAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 * </pre>
	 */
	protected void sequence_JobNeedsAdditionalProperties(ISerializationContext context, JobNeedsAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJobNeedsAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getJobNeedsAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JobNeedsItems returns JobNeedsItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 * </pre>
	 */
	protected void sequence_JobNeedsItems(ISerializationContext context, JobNeedsItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJobNeedsItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JobNeedsAbstract returns JobNeedsTypeArray
	 *     JobNeedsTypeArray returns JobNeedsTypeArray
	 *
	 * Constraint:
	 *     (jobNeeds+=JobNeedsItems jobNeeds+=JobNeedsItems*)?
	 * </pre>
	 */
	protected void sequence_JobNeedsTypeArray(ISerializationContext context, JobNeedsTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JobNeedsAbstract returns JobNeedsTypeBoolean
	 *     JobNeedsTypeBoolean returns JobNeedsTypeBoolean
	 *
	 * Constraint:
	 *     jobNeeds=EBooleanObject
	 * </pre>
	 */
	protected void sequence_JobNeedsTypeBoolean(ISerializationContext context, JobNeedsTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsTypeBoolean_JobNeeds()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsTypeBoolean_JobNeeds()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJobNeedsTypeBooleanAccess().getJobNeedsEBooleanObjectParserRuleCall_0(), semanticObject.getJobNeeds());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JobNeedsAbstract returns JobNeedsTypeInteger
	 *     JobNeedsTypeInteger returns JobNeedsTypeInteger
	 *
	 * Constraint:
	 *     jobNeeds=EDoubleObject
	 * </pre>
	 */
	protected void sequence_JobNeedsTypeInteger(ISerializationContext context, JobNeedsTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsTypeInteger_JobNeeds()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsTypeInteger_JobNeeds()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJobNeedsTypeIntegerAccess().getJobNeedsEDoubleObjectParserRuleCall_0(), semanticObject.getJobNeeds());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JobNeedsAbstract returns JobNeedsTypeNull
	 *     JobNeedsTypeNull returns JobNeedsTypeNull
	 *
	 * Constraint:
	 *     jobNeeds=NullValue
	 * </pre>
	 */
	protected void sequence_JobNeedsTypeNull(ISerializationContext context, JobNeedsTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsTypeNull_JobNeeds()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsTypeNull_JobNeeds()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJobNeedsTypeNullAccess().getJobNeedsNullValueParserRuleCall_0(), semanticObject.getJobNeeds());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JobNeedsAbstract returns JobNeedsTypeNumber
	 *     JobNeedsTypeNumber returns JobNeedsTypeNumber
	 *
	 * Constraint:
	 *     jobNeeds=EDoubleObject
	 * </pre>
	 */
	protected void sequence_JobNeedsTypeNumber(ISerializationContext context, JobNeedsTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsTypeNumber_JobNeeds()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsTypeNumber_JobNeeds()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJobNeedsTypeNumberAccess().getJobNeedsEDoubleObjectParserRuleCall_0(), semanticObject.getJobNeeds());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JobNeedsAbstract returns JobNeedsTypeObject
	 *     JobNeedsTypeObject returns JobNeedsTypeObject
	 *
	 * Constraint:
	 *     (jobNeeds+=JobNeedsPropertiesAbstract jobNeeds+=JobNeedsPropertiesAbstract*)?
	 * </pre>
	 */
	protected void sequence_JobNeedsTypeObject(ISerializationContext context, JobNeedsTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JobNeedsAbstract returns JobNeedsTypeString
	 *     JobNeedsTypeString returns JobNeedsTypeString
	 *
	 * Constraint:
	 *     jobNeeds=EString
	 * </pre>
	 */
	protected void sequence_JobNeedsTypeString(ISerializationContext context, JobNeedsTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsTypeString_JobNeeds()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getJobNeedsTypeString_JobNeeds()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJobNeedsTypeStringAccess().getJobNeedsEStringParserRuleCall_0(), semanticObject.getJobNeeds());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JobNeeds returns JobNeeds
	 *
	 * Constraint:
	 *     jobNeeds=JobNeedsAbstract
	 * </pre>
	 */
	protected void sequence_JobNeeds(ISerializationContext context, JobNeeds semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getJobNeeds_JobNeeds()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getJobNeeds_JobNeeds()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJobNeedsAccess().getJobNeedsJobNeedsAbstractParserRuleCall_0(), semanticObject.getJobNeeds());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JsonDocument returns JsonDocument
	 *
	 * Constraint:
	 *     value=Value
	 * </pre>
	 */
	protected void sequence_JsonDocument(ISerializationContext context, JsonDocument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonDocumentAccess().getValueValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     KeyValuePair returns KeyValuePair
	 *
	 * Constraint:
	 *     (key=EString value=Value)
	 * </pre>
	 */
	protected void sequence_KeyValuePair(ISerializationContext context, KeyValuePair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeyValuePairAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getKeyValuePairAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns NullValue
	 *     NullValue returns NullValue
	 *
	 * Constraint:
	 *     value=NullEnum
	 * </pre>
	 */
	protected void sequence_NullValue(ISerializationContext context, NullValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNullValueAccess().getValueNullEnumEnumRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns NumberValue
	 *     NumberValue returns NumberValue
	 *
	 * Constraint:
	 *     value=EDouble
	 * </pre>
	 */
	protected void sequence_NumberValue(ISerializationContext context, NumberValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberValueAccess().getValueEDoubleParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns ObjectValue
	 *     ObjectValue returns ObjectValue
	 *
	 * Constraint:
	 *     (keyvaluepair+=KeyValuePair keyvaluepair+=KeyValuePair*)?
	 * </pre>
	 */
	protected void sequence_ObjectValue(ISerializationContext context, ObjectValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventActions
	 *     Permissions_45eventActions returns Permissions_45eventActions
	 *
	 * Constraint:
	 *     actions=Permissions_45level
	 * </pre>
	 */
	protected void sequence_Permissions_45eventActions(ISerializationContext context, Permissions_45eventActions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventActions_Actions()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventActions_Actions()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventActionsAccess().getActionsPermissions_45levelParserRuleCall_2_0(), semanticObject.getActions());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventChecks
	 *     Permissions_45eventChecks returns Permissions_45eventChecks
	 *
	 * Constraint:
	 *     checks=Permissions_45level
	 * </pre>
	 */
	protected void sequence_Permissions_45eventChecks(ISerializationContext context, Permissions_45eventChecks semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventChecks_Checks()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventChecks_Checks()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventChecksAccess().getChecksPermissions_45levelParserRuleCall_2_0(), semanticObject.getChecks());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventContents
	 *     Permissions_45eventContents returns Permissions_45eventContents
	 *
	 * Constraint:
	 *     contents=Permissions_45level
	 * </pre>
	 */
	protected void sequence_Permissions_45eventContents(ISerializationContext context, Permissions_45eventContents semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventContents_Contents()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventContents_Contents()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventContentsAccess().getContentsPermissions_45levelParserRuleCall_2_0(), semanticObject.getContents());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventDeployments
	 *     Permissions_45eventDeployments returns Permissions_45eventDeployments
	 *
	 * Constraint:
	 *     deployments=Permissions_45level
	 * </pre>
	 */
	protected void sequence_Permissions_45eventDeployments(ISerializationContext context, Permissions_45eventDeployments semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventDeployments_Deployments()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventDeployments_Deployments()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventDeploymentsAccess().getDeploymentsPermissions_45levelParserRuleCall_2_0(), semanticObject.getDeployments());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventDiscussions
	 *     Permissions_45eventDiscussions returns Permissions_45eventDiscussions
	 *
	 * Constraint:
	 *     discussions=Permissions_45level
	 * </pre>
	 */
	protected void sequence_Permissions_45eventDiscussions(ISerializationContext context, Permissions_45eventDiscussions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventDiscussions_Discussions()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventDiscussions_Discussions()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventDiscussionsAccess().getDiscussionsPermissions_45levelParserRuleCall_2_0(), semanticObject.getDiscussions());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventId_45token
	 *     Permissions_45eventId_45token returns Permissions_45eventId_45token
	 *
	 * Constraint:
	 *     id_45token=Permissions_45level
	 * </pre>
	 */
	protected void sequence_Permissions_45eventId_45token(ISerializationContext context, Permissions_45eventId_45token semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventId_45token_Id_45token()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventId_45token_Id_45token()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventId_45tokenAccess().getId_45tokenPermissions_45levelParserRuleCall_2_0(), semanticObject.getId_45token());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventIssues
	 *     Permissions_45eventIssues returns Permissions_45eventIssues
	 *
	 * Constraint:
	 *     issues=Permissions_45level
	 * </pre>
	 */
	protected void sequence_Permissions_45eventIssues(ISerializationContext context, Permissions_45eventIssues semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventIssues_Issues()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventIssues_Issues()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventIssuesAccess().getIssuesPermissions_45levelParserRuleCall_2_0(), semanticObject.getIssues());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventPackages
	 *     Permissions_45eventPackages returns Permissions_45eventPackages
	 *
	 * Constraint:
	 *     packages=Permissions_45level
	 * </pre>
	 */
	protected void sequence_Permissions_45eventPackages(ISerializationContext context, Permissions_45eventPackages semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventPackages_Packages()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventPackages_Packages()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventPackagesAccess().getPackagesPermissions_45levelParserRuleCall_2_0(), semanticObject.getPackages());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventPages
	 *     Permissions_45eventPages returns Permissions_45eventPages
	 *
	 * Constraint:
	 *     pages=Permissions_45level
	 * </pre>
	 */
	protected void sequence_Permissions_45eventPages(ISerializationContext context, Permissions_45eventPages semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventPages_Pages()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventPages_Pages()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventPagesAccess().getPagesPermissions_45levelParserRuleCall_2_0(), semanticObject.getPages());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventPull_45requests
	 *     Permissions_45eventPull_45requests returns Permissions_45eventPull_45requests
	 *
	 * Constraint:
	 *     pull_45requests=Permissions_45level
	 * </pre>
	 */
	protected void sequence_Permissions_45eventPull_45requests(ISerializationContext context, Permissions_45eventPull_45requests semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventPull_45requests_Pull_45requests()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventPull_45requests_Pull_45requests()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventPull_45requestsAccess().getPull_45requestsPermissions_45levelParserRuleCall_2_0(), semanticObject.getPull_45requests());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventRepository_45projects
	 *     Permissions_45eventRepository_45projects returns Permissions_45eventRepository_45projects
	 *
	 * Constraint:
	 *     repository_45projects=Permissions_45level
	 * </pre>
	 */
	protected void sequence_Permissions_45eventRepository_45projects(ISerializationContext context, Permissions_45eventRepository_45projects semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventRepository_45projects_Repository_45projects()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventRepository_45projects_Repository_45projects()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventRepository_45projectsAccess().getRepository_45projectsPermissions_45levelParserRuleCall_2_0(), semanticObject.getRepository_45projects());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventSecurity_45events
	 *     Permissions_45eventSecurity_45events returns Permissions_45eventSecurity_45events
	 *
	 * Constraint:
	 *     security_45events=Permissions_45level
	 * </pre>
	 */
	protected void sequence_Permissions_45eventSecurity_45events(ISerializationContext context, Permissions_45eventSecurity_45events semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventSecurity_45events_Security_45events()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventSecurity_45events_Security_45events()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventSecurity_45eventsAccess().getSecurity_45eventsPermissions_45levelParserRuleCall_2_0(), semanticObject.getSecurity_45events());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventStatuses
	 *     Permissions_45eventStatuses returns Permissions_45eventStatuses
	 *
	 * Constraint:
	 *     statuses=Permissions_45level
	 * </pre>
	 */
	protected void sequence_Permissions_45eventStatuses(ISerializationContext context, Permissions_45eventStatuses semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventStatuses_Statuses()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventStatuses_Statuses()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventStatusesAccess().getStatusesPermissions_45levelParserRuleCall_2_0(), semanticObject.getStatuses());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Permissions_45event returns Permissions_45event
	 *
	 * Constraint:
	 *     (permissions_45event+=Permissions_45eventPropertiesAbstract permissions_45event+=Permissions_45eventPropertiesAbstract*)?
	 * </pre>
	 */
	protected void sequence_Permissions_45event(ISerializationContext context, Permissions_45event semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Permissions_45level returns Permissions_45level
	 *
	 * Constraint:
	 *     permissions_45level=JsonDocument
	 * </pre>
	 */
	protected void sequence_Permissions_45level(ISerializationContext context, Permissions_45level semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45level_Permissions_45level()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45level_Permissions_45level()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45levelAccess().getPermissions_45levelJsonDocumentParserRuleCall_0(), semanticObject.getPermissions_45level());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobConcurrencyPropertiesAbstract returns ReusableWorkflowCallJobConcurrencyAdditionalProperties
	 *     ReusableWorkflowCallJobConcurrencyAdditionalProperties returns ReusableWorkflowCallJobConcurrencyAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobConcurrencyAdditionalProperties(ISerializationContext context, ReusableWorkflowCallJobConcurrencyAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobConcurrencyAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobConcurrencyAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobConcurrencyAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobConcurrencyAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobConcurrencyAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getReusableWorkflowCallJobConcurrencyAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobConcurrencyItems returns ReusableWorkflowCallJobConcurrencyItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobConcurrencyItems(ISerializationContext context, ReusableWorkflowCallJobConcurrencyItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobConcurrencyItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobConcurrencyItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobConcurrencyItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobConcurrencyAbstract returns ReusableWorkflowCallJobConcurrencyTypeArray
	 *     ReusableWorkflowCallJobConcurrencyTypeArray returns ReusableWorkflowCallJobConcurrencyTypeArray
	 *
	 * Constraint:
	 *     (concurrency+=ReusableWorkflowCallJobConcurrencyItems concurrency+=ReusableWorkflowCallJobConcurrencyItems*)?
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobConcurrencyTypeArray(ISerializationContext context, ReusableWorkflowCallJobConcurrencyTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobConcurrencyAbstract returns ReusableWorkflowCallJobConcurrencyTypeBoolean
	 *     ReusableWorkflowCallJobConcurrencyTypeBoolean returns ReusableWorkflowCallJobConcurrencyTypeBoolean
	 *
	 * Constraint:
	 *     concurrency=EBooleanObject
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobConcurrencyTypeBoolean(ISerializationContext context, ReusableWorkflowCallJobConcurrencyTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobConcurrencyTypeBoolean_Concurrency()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobConcurrencyTypeBoolean_Concurrency()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobConcurrencyTypeBooleanAccess().getConcurrencyEBooleanObjectParserRuleCall_2_0(), semanticObject.getConcurrency());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobConcurrencyAbstract returns ReusableWorkflowCallJobConcurrencyTypeInteger
	 *     ReusableWorkflowCallJobConcurrencyTypeInteger returns ReusableWorkflowCallJobConcurrencyTypeInteger
	 *
	 * Constraint:
	 *     concurrency=EDoubleObject
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobConcurrencyTypeInteger(ISerializationContext context, ReusableWorkflowCallJobConcurrencyTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobConcurrencyTypeInteger_Concurrency()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobConcurrencyTypeInteger_Concurrency()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobConcurrencyTypeIntegerAccess().getConcurrencyEDoubleObjectParserRuleCall_2_0(), semanticObject.getConcurrency());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobConcurrencyAbstract returns ReusableWorkflowCallJobConcurrencyTypeNull
	 *     ReusableWorkflowCallJobConcurrencyTypeNull returns ReusableWorkflowCallJobConcurrencyTypeNull
	 *
	 * Constraint:
	 *     concurrency=NullValue
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobConcurrencyTypeNull(ISerializationContext context, ReusableWorkflowCallJobConcurrencyTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobConcurrencyTypeNull_Concurrency()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobConcurrencyTypeNull_Concurrency()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobConcurrencyTypeNullAccess().getConcurrencyNullValueParserRuleCall_2_0(), semanticObject.getConcurrency());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobConcurrencyAbstract returns ReusableWorkflowCallJobConcurrencyTypeNumber
	 *     ReusableWorkflowCallJobConcurrencyTypeNumber returns ReusableWorkflowCallJobConcurrencyTypeNumber
	 *
	 * Constraint:
	 *     concurrency=EDoubleObject
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobConcurrencyTypeNumber(ISerializationContext context, ReusableWorkflowCallJobConcurrencyTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobConcurrencyTypeNumber_Concurrency()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobConcurrencyTypeNumber_Concurrency()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobConcurrencyTypeNumberAccess().getConcurrencyEDoubleObjectParserRuleCall_2_0(), semanticObject.getConcurrency());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobConcurrencyAbstract returns ReusableWorkflowCallJobConcurrencyTypeObject
	 *     ReusableWorkflowCallJobConcurrencyTypeObject returns ReusableWorkflowCallJobConcurrencyTypeObject
	 *
	 * Constraint:
	 *     (concurrency+=ReusableWorkflowCallJobConcurrencyPropertiesAbstract concurrency+=ReusableWorkflowCallJobConcurrencyPropertiesAbstract*)?
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobConcurrencyTypeObject(ISerializationContext context, ReusableWorkflowCallJobConcurrencyTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobConcurrencyAbstract returns ReusableWorkflowCallJobConcurrencyTypeString
	 *     ReusableWorkflowCallJobConcurrencyTypeString returns ReusableWorkflowCallJobConcurrencyTypeString
	 *
	 * Constraint:
	 *     concurrency=EString
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobConcurrencyTypeString(ISerializationContext context, ReusableWorkflowCallJobConcurrencyTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobConcurrencyTypeString_Concurrency()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobConcurrencyTypeString_Concurrency()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobConcurrencyTypeStringAccess().getConcurrencyEStringParserRuleCall_2_0(), semanticObject.getConcurrency());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobPropertiesAbstract returns ReusableWorkflowCallJobConcurrency
	 *     ReusableWorkflowCallJobConcurrency returns ReusableWorkflowCallJobConcurrency
	 *
	 * Constraint:
	 *     concurrency=ReusableWorkflowCallJobConcurrencyAbstract
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobConcurrency(ISerializationContext context, ReusableWorkflowCallJobConcurrency semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobConcurrency_Concurrency()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobConcurrency_Concurrency()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobConcurrencyAccess().getConcurrencyReusableWorkflowCallJobConcurrencyAbstractParserRuleCall_0(), semanticObject.getConcurrency());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobIfAbstract returns ReusableWorkflowCallJobIfTypeBoolean
	 *     ReusableWorkflowCallJobIfTypeBoolean returns ReusableWorkflowCallJobIfTypeBoolean
	 *
	 * Constraint:
	 *     if_=EBooleanObject
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobIfTypeBoolean(ISerializationContext context, ReusableWorkflowCallJobIfTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobIfTypeBoolean_If_()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobIfTypeBoolean_If_()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobIfTypeBooleanAccess().getIf_EBooleanObjectParserRuleCall_2_0(), semanticObject.getIf_());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobIfAbstract returns ReusableWorkflowCallJobIfTypeNumber
	 *     ReusableWorkflowCallJobIfTypeNumber returns ReusableWorkflowCallJobIfTypeNumber
	 *
	 * Constraint:
	 *     if_=EDoubleObject
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobIfTypeNumber(ISerializationContext context, ReusableWorkflowCallJobIfTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobIfTypeNumber_If_()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobIfTypeNumber_If_()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobIfTypeNumberAccess().getIf_EDoubleObjectParserRuleCall_2_0(), semanticObject.getIf_());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobIfAbstract returns ReusableWorkflowCallJobIfTypeString
	 *     ReusableWorkflowCallJobIfTypeString returns ReusableWorkflowCallJobIfTypeString
	 *
	 * Constraint:
	 *     if_=EString
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobIfTypeString(ISerializationContext context, ReusableWorkflowCallJobIfTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobIfTypeString_If_()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobIfTypeString_If_()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobIfTypeStringAccess().getIf_EStringParserRuleCall_2_0(), semanticObject.getIf_());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobPropertiesAbstract returns ReusableWorkflowCallJobIf
	 *     ReusableWorkflowCallJobIf returns ReusableWorkflowCallJobIf
	 *
	 * Constraint:
	 *     if_=ReusableWorkflowCallJobIfAbstract
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobIf(ISerializationContext context, ReusableWorkflowCallJobIf semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobIf_If_()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobIf_If_()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobIfAccess().getIf_ReusableWorkflowCallJobIfAbstractParserRuleCall_0(), semanticObject.getIf_());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobPropertiesAbstract returns ReusableWorkflowCallJobName
	 *     ReusableWorkflowCallJobName returns ReusableWorkflowCallJobName
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobName(ISerializationContext context, ReusableWorkflowCallJobName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobName_Name()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobName_Name()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobNameAccess().getNameEStringParserRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobPropertiesAbstract returns ReusableWorkflowCallJobNeeds
	 *     ReusableWorkflowCallJobNeeds returns ReusableWorkflowCallJobNeeds
	 *
	 * Constraint:
	 *     needs=JobNeeds
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobNeeds(ISerializationContext context, ReusableWorkflowCallJobNeeds semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobNeeds_Needs()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobNeeds_Needs()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobNeedsAccess().getNeedsJobNeedsParserRuleCall_2_0(), semanticObject.getNeeds());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobPropertiesAbstract returns ReusableWorkflowCallJobPermissions
	 *     ReusableWorkflowCallJobPermissions returns ReusableWorkflowCallJobPermissions
	 *
	 * Constraint:
	 *     permissions=Permissions_45event
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobPermissions(ISerializationContext context, ReusableWorkflowCallJobPermissions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobPermissions_Permissions()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobPermissions_Permissions()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobPermissionsAccess().getPermissionsPermissions_45eventParserRuleCall_2_0(), semanticObject.getPermissions());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobSecretsPropertiesAbstract returns ReusableWorkflowCallJobSecretsAdditionalProperties
	 *     ReusableWorkflowCallJobSecretsAdditionalProperties returns ReusableWorkflowCallJobSecretsAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobSecretsAdditionalProperties(ISerializationContext context, ReusableWorkflowCallJobSecretsAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobSecretsAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobSecretsAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobSecretsAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobSecretsAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobSecretsAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getReusableWorkflowCallJobSecretsAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobSecretsItems returns ReusableWorkflowCallJobSecretsItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobSecretsItems(ISerializationContext context, ReusableWorkflowCallJobSecretsItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobSecretsItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobSecretsItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobSecretsItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobSecretsAbstract returns ReusableWorkflowCallJobSecretsTypeArray
	 *     ReusableWorkflowCallJobSecretsTypeArray returns ReusableWorkflowCallJobSecretsTypeArray
	 *
	 * Constraint:
	 *     (secrets+=ReusableWorkflowCallJobSecretsItems secrets+=ReusableWorkflowCallJobSecretsItems*)?
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobSecretsTypeArray(ISerializationContext context, ReusableWorkflowCallJobSecretsTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobSecretsAbstract returns ReusableWorkflowCallJobSecretsTypeBoolean
	 *     ReusableWorkflowCallJobSecretsTypeBoolean returns ReusableWorkflowCallJobSecretsTypeBoolean
	 *
	 * Constraint:
	 *     secrets=EBooleanObject
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobSecretsTypeBoolean(ISerializationContext context, ReusableWorkflowCallJobSecretsTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobSecretsTypeBoolean_Secrets()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobSecretsTypeBoolean_Secrets()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobSecretsTypeBooleanAccess().getSecretsEBooleanObjectParserRuleCall_2_0(), semanticObject.getSecrets());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobSecretsAbstract returns ReusableWorkflowCallJobSecretsTypeInteger
	 *     ReusableWorkflowCallJobSecretsTypeInteger returns ReusableWorkflowCallJobSecretsTypeInteger
	 *
	 * Constraint:
	 *     secrets=EDoubleObject
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobSecretsTypeInteger(ISerializationContext context, ReusableWorkflowCallJobSecretsTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobSecretsTypeInteger_Secrets()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobSecretsTypeInteger_Secrets()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobSecretsTypeIntegerAccess().getSecretsEDoubleObjectParserRuleCall_2_0(), semanticObject.getSecrets());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobSecretsAbstract returns ReusableWorkflowCallJobSecretsTypeNull
	 *     ReusableWorkflowCallJobSecretsTypeNull returns ReusableWorkflowCallJobSecretsTypeNull
	 *
	 * Constraint:
	 *     secrets=NullValue
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobSecretsTypeNull(ISerializationContext context, ReusableWorkflowCallJobSecretsTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobSecretsTypeNull_Secrets()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobSecretsTypeNull_Secrets()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobSecretsTypeNullAccess().getSecretsNullValueParserRuleCall_2_0(), semanticObject.getSecrets());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobSecretsAbstract returns ReusableWorkflowCallJobSecretsTypeNumber
	 *     ReusableWorkflowCallJobSecretsTypeNumber returns ReusableWorkflowCallJobSecretsTypeNumber
	 *
	 * Constraint:
	 *     secrets=EDoubleObject
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobSecretsTypeNumber(ISerializationContext context, ReusableWorkflowCallJobSecretsTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobSecretsTypeNumber_Secrets()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobSecretsTypeNumber_Secrets()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobSecretsTypeNumberAccess().getSecretsEDoubleObjectParserRuleCall_2_0(), semanticObject.getSecrets());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobSecretsAbstract returns ReusableWorkflowCallJobSecretsTypeObject
	 *     ReusableWorkflowCallJobSecretsTypeObject returns ReusableWorkflowCallJobSecretsTypeObject
	 *
	 * Constraint:
	 *     (secrets+=ReusableWorkflowCallJobSecretsPropertiesAbstract secrets+=ReusableWorkflowCallJobSecretsPropertiesAbstract*)?
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobSecretsTypeObject(ISerializationContext context, ReusableWorkflowCallJobSecretsTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobSecretsAbstract returns ReusableWorkflowCallJobSecretsTypeString
	 *     ReusableWorkflowCallJobSecretsTypeString returns ReusableWorkflowCallJobSecretsTypeString
	 *
	 * Constraint:
	 *     secrets=EString
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobSecretsTypeString(ISerializationContext context, ReusableWorkflowCallJobSecretsTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobSecretsTypeString_Secrets()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobSecretsTypeString_Secrets()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobSecretsTypeStringAccess().getSecretsEStringParserRuleCall_2_0(), semanticObject.getSecrets());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobPropertiesAbstract returns ReusableWorkflowCallJobSecrets
	 *     ReusableWorkflowCallJobSecrets returns ReusableWorkflowCallJobSecrets
	 *
	 * Constraint:
	 *     secrets=ReusableWorkflowCallJobSecretsAbstract
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobSecrets(ISerializationContext context, ReusableWorkflowCallJobSecrets semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobSecrets_Secrets()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobSecrets_Secrets()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobSecretsAccess().getSecretsReusableWorkflowCallJobSecretsAbstractParserRuleCall_0(), semanticObject.getSecrets());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyPropertiesAbstract returns ReusableWorkflowCallJobStrategyFail_45fast
	 *     ReusableWorkflowCallJobStrategyFail_45fast returns ReusableWorkflowCallJobStrategyFail_45fast
	 *
	 * Constraint:
	 *     fail_45fast=EBooleanObject
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyFail_45fast(ISerializationContext context, ReusableWorkflowCallJobStrategyFail_45fast semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyFail_45fast_Fail_45fast()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyFail_45fast_Fail_45fast()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobStrategyFail_45fastAccess().getFail_45fastEBooleanObjectParserRuleCall_2_0(), semanticObject.getFail_45fast());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesPropertiesAbstract returns ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAdditionalProperties
	 *     ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAdditionalProperties returns ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAdditionalProperties(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesItems returns ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesItems(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAbstract returns ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeArray
	 *     ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeArray returns ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeArray
	 *
	 * Constraint:
	 *     (
	 *         additionalProperties+=ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesItems 
	 *         additionalProperties+=ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesItems*
	 *     )?
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeArray(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAbstract returns ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeBoolean
	 *     ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeBoolean returns ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeBoolean
	 *
	 * Constraint:
	 *     additionalProperties=EBooleanObject
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeBoolean(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeBoolean_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeBoolean_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeBooleanAccess().getAdditionalPropertiesEBooleanObjectParserRuleCall_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAbstract returns ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeInteger
	 *     ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeInteger returns ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeInteger
	 *
	 * Constraint:
	 *     additionalProperties=EDoubleObject
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeInteger(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeInteger_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeInteger_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeIntegerAccess().getAdditionalPropertiesEDoubleObjectParserRuleCall_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAbstract returns ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNull
	 *     ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNull returns ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNull
	 *
	 * Constraint:
	 *     additionalProperties=NullValue
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNull(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNull_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNull_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNullAccess().getAdditionalPropertiesNullValueParserRuleCall_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAbstract returns ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNumber
	 *     ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNumber returns ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNumber
	 *
	 * Constraint:
	 *     additionalProperties=EDoubleObject
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNumber(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNumber_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNumber_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeNumberAccess().getAdditionalPropertiesEDoubleObjectParserRuleCall_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAbstract returns ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeObject
	 *     ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeObject returns ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeObject
	 *
	 * Constraint:
	 *     (
	 *         additionalProperties+=ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesPropertiesAbstract 
	 *         additionalProperties+=ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesPropertiesAbstract*
	 *     )?
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeObject(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAbstract returns ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeString
	 *     ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeString returns ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeString
	 *
	 * Constraint:
	 *     additionalProperties=EString
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeString(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeString_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeString_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesTypeStringAccess().getAdditionalPropertiesEStringParserRuleCall_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyMatrixPropertiesAbstract returns ReusableWorkflowCallJobStrategyMatrixAdditionalProperties
	 *     ReusableWorkflowCallJobStrategyMatrixAdditionalProperties returns ReusableWorkflowCallJobStrategyMatrixAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=ReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAbstract)
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrixAdditionalProperties(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrixAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAccess().getAdditionalPropertiesReusableWorkflowCallJobStrategyMatrixAdditionalPropertiesAbstractParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyMatrixItems returns ReusableWorkflowCallJobStrategyMatrixItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrixItems(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrixItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobStrategyMatrixItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyMatrixPatternProperties0ItemsPropertiesAbstract returns ReusableWorkflowCallJobStrategyMatrixPatternProperties0ItemsAdditionalProperties
	 *     ReusableWorkflowCallJobStrategyMatrixPatternProperties0ItemsAdditionalProperties returns ReusableWorkflowCallJobStrategyMatrixPatternProperties0ItemsAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=Configuration)
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrixPatternProperties0ItemsAdditionalProperties(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrixPatternProperties0ItemsAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixPatternProperties0ItemsAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixPatternProperties0ItemsAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixPatternProperties0ItemsAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixPatternProperties0ItemsAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobStrategyMatrixPatternProperties0ItemsAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getReusableWorkflowCallJobStrategyMatrixPatternProperties0ItemsAdditionalPropertiesAccess().getAdditionalPropertiesConfigurationParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyMatrixPatternProperties0Items returns ReusableWorkflowCallJobStrategyMatrixPatternProperties0Items
	 *
	 * Constraint:
	 *     (
	 *         items+=ReusableWorkflowCallJobStrategyMatrixPatternProperties0ItemsPropertiesAbstract 
	 *         items+=ReusableWorkflowCallJobStrategyMatrixPatternProperties0ItemsPropertiesAbstract*
	 *     )?
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrixPatternProperties0Items(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrixPatternProperties0Items semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyMatrixPropertiesAbstract returns ReusableWorkflowCallJobStrategyMatrixPatternProperties0
	 *     ReusableWorkflowCallJobStrategyMatrixPatternProperties0 returns ReusableWorkflowCallJobStrategyMatrixPatternProperties0
	 *
	 * Constraint:
	 *     (
	 *         key=EString 
	 *         patternProperties0+=ReusableWorkflowCallJobStrategyMatrixPatternProperties0Items 
	 *         patternProperties0+=ReusableWorkflowCallJobStrategyMatrixPatternProperties0Items*
	 *     )
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrixPatternProperties0(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrixPatternProperties0 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyMatrixAbstract returns ReusableWorkflowCallJobStrategyMatrixTypeArray
	 *     ReusableWorkflowCallJobStrategyMatrixTypeArray returns ReusableWorkflowCallJobStrategyMatrixTypeArray
	 *
	 * Constraint:
	 *     (matrix+=ReusableWorkflowCallJobStrategyMatrixItems matrix+=ReusableWorkflowCallJobStrategyMatrixItems*)?
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrixTypeArray(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrixTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyMatrixAbstract returns ReusableWorkflowCallJobStrategyMatrixTypeBoolean
	 *     ReusableWorkflowCallJobStrategyMatrixTypeBoolean returns ReusableWorkflowCallJobStrategyMatrixTypeBoolean
	 *
	 * Constraint:
	 *     matrix=EBooleanObject
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrixTypeBoolean(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrixTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixTypeBoolean_Matrix()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixTypeBoolean_Matrix()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobStrategyMatrixTypeBooleanAccess().getMatrixEBooleanObjectParserRuleCall_2_0(), semanticObject.getMatrix());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyMatrixAbstract returns ReusableWorkflowCallJobStrategyMatrixTypeInteger
	 *     ReusableWorkflowCallJobStrategyMatrixTypeInteger returns ReusableWorkflowCallJobStrategyMatrixTypeInteger
	 *
	 * Constraint:
	 *     matrix=EDoubleObject
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrixTypeInteger(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrixTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixTypeInteger_Matrix()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixTypeInteger_Matrix()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobStrategyMatrixTypeIntegerAccess().getMatrixEDoubleObjectParserRuleCall_2_0(), semanticObject.getMatrix());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyMatrixAbstract returns ReusableWorkflowCallJobStrategyMatrixTypeNull
	 *     ReusableWorkflowCallJobStrategyMatrixTypeNull returns ReusableWorkflowCallJobStrategyMatrixTypeNull
	 *
	 * Constraint:
	 *     matrix=NullValue
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrixTypeNull(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrixTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixTypeNull_Matrix()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixTypeNull_Matrix()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobStrategyMatrixTypeNullAccess().getMatrixNullValueParserRuleCall_2_0(), semanticObject.getMatrix());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyMatrixAbstract returns ReusableWorkflowCallJobStrategyMatrixTypeNumber
	 *     ReusableWorkflowCallJobStrategyMatrixTypeNumber returns ReusableWorkflowCallJobStrategyMatrixTypeNumber
	 *
	 * Constraint:
	 *     matrix=EDoubleObject
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrixTypeNumber(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrixTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixTypeNumber_Matrix()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixTypeNumber_Matrix()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobStrategyMatrixTypeNumberAccess().getMatrixEDoubleObjectParserRuleCall_2_0(), semanticObject.getMatrix());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyMatrixAbstract returns ReusableWorkflowCallJobStrategyMatrixTypeObject
	 *     ReusableWorkflowCallJobStrategyMatrixTypeObject returns ReusableWorkflowCallJobStrategyMatrixTypeObject
	 *
	 * Constraint:
	 *     (matrix+=ReusableWorkflowCallJobStrategyMatrixPropertiesAbstract matrix+=ReusableWorkflowCallJobStrategyMatrixPropertiesAbstract*)
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrixTypeObject(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrixTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyMatrixAbstract returns ReusableWorkflowCallJobStrategyMatrixTypeString
	 *     ReusableWorkflowCallJobStrategyMatrixTypeString returns ReusableWorkflowCallJobStrategyMatrixTypeString
	 *
	 * Constraint:
	 *     matrix=EString
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrixTypeString(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrixTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixTypeString_Matrix()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrixTypeString_Matrix()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobStrategyMatrixTypeStringAccess().getMatrixEStringParserRuleCall_2_0(), semanticObject.getMatrix());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyPropertiesAbstract returns ReusableWorkflowCallJobStrategyMatrix
	 *     ReusableWorkflowCallJobStrategyMatrix returns ReusableWorkflowCallJobStrategyMatrix
	 *
	 * Constraint:
	 *     matrix=ReusableWorkflowCallJobStrategyMatrixAbstract
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMatrix(ISerializationContext context, ReusableWorkflowCallJobStrategyMatrix semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrix_Matrix()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMatrix_Matrix()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobStrategyMatrixAccess().getMatrixReusableWorkflowCallJobStrategyMatrixAbstractParserRuleCall_0(), semanticObject.getMatrix());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobStrategyPropertiesAbstract returns ReusableWorkflowCallJobStrategyMax_45parallel
	 *     ReusableWorkflowCallJobStrategyMax_45parallel returns ReusableWorkflowCallJobStrategyMax_45parallel
	 *
	 * Constraint:
	 *     max_45parallel=EDoubleObject
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategyMax_45parallel(ISerializationContext context, ReusableWorkflowCallJobStrategyMax_45parallel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMax_45parallel_Max_45parallel()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobStrategyMax_45parallel_Max_45parallel()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobStrategyMax_45parallelAccess().getMax_45parallelEDoubleObjectParserRuleCall_2_0(), semanticObject.getMax_45parallel());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobPropertiesAbstract returns ReusableWorkflowCallJobStrategy
	 *     ReusableWorkflowCallJobStrategy returns ReusableWorkflowCallJobStrategy
	 *
	 * Constraint:
	 *     (strategy+=ReusableWorkflowCallJobStrategyPropertiesAbstract strategy+=ReusableWorkflowCallJobStrategyPropertiesAbstract*)?
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobStrategy(ISerializationContext context, ReusableWorkflowCallJobStrategy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobPropertiesAbstract returns ReusableWorkflowCallJobUses
	 *     ReusableWorkflowCallJobUses returns ReusableWorkflowCallJobUses
	 *
	 * Constraint:
	 *     uses=EString
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobUses(ISerializationContext context, ReusableWorkflowCallJobUses semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobUses_Uses()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobUses_Uses()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobUsesAccess().getUsesEStringParserRuleCall_2_0(), semanticObject.getUses());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJobPropertiesAbstract returns ReusableWorkflowCallJobWith
	 *     ReusableWorkflowCallJobWith returns ReusableWorkflowCallJobWith
	 *
	 * Constraint:
	 *     with=Env
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJobWith(ISerializationContext context, ReusableWorkflowCallJobWith semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobWith_With()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobWith_With()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobWithAccess().getWithEnvParserRuleCall_2_0(), semanticObject.getWith());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReusableWorkflowCallJob returns ReusableWorkflowCallJob
	 *
	 * Constraint:
	 *     (reusableWorkflowCallJob+=ReusableWorkflowCallJobPropertiesAbstract reusableWorkflowCallJob+=ReusableWorkflowCallJobPropertiesAbstract*)?
	 * </pre>
	 */
	protected void sequence_ReusableWorkflowCallJob(ISerializationContext context, ReusableWorkflowCallJob semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=EString
	 * </pre>
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueEStringParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
