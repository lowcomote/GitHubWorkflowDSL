/*
 * generated by Xtext 2.23.0
 */
package githubwf.githubwf.serializer;

import com.google.inject.Inject;
import githubwf.Configuration;
import githubwf.ConfigurationAdditionalProperties;
import githubwf.ConfigurationItems;
import githubwf.ConfigurationTypeArray;
import githubwf.ConfigurationTypeBoolean;
import githubwf.ConfigurationTypeInteger;
import githubwf.ConfigurationTypeNull;
import githubwf.ConfigurationTypeNumber;
import githubwf.ConfigurationTypeObject;
import githubwf.ConfigurationTypeString;
import githubwf.GithubwfPackage;
import githubwf.NormalJobStrategyMatrixAdditionalPropertiesOneOf0;
import githubwf.NormalJobStrategyMatrixAdditionalPropertiesOneOf0Items;
import githubwf.githubwf.services.NormalJobStrategyMatrixAdditionalPropertiesOneOf0GrammarAccess;
import java.util.Set;
import jsonMM.ArrayValue;
import jsonMM.BooleanValue;
import jsonMM.JsonDocument;
import jsonMM.JsonMMPackage;
import jsonMM.KeyValuePair;
import jsonMM.NullValue;
import jsonMM.NumberValue;
import jsonMM.ObjectValue;
import jsonMM.StringValue;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class NormalJobStrategyMatrixAdditionalPropertiesOneOf0SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private NormalJobStrategyMatrixAdditionalPropertiesOneOf0GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GithubwfPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GithubwfPackage.CONFIGURATION:
				sequence_Configuration(context, (Configuration) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_ADDITIONAL_PROPERTIES:
				sequence_ConfigurationAdditionalProperties(context, (ConfigurationAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_ITEMS:
				sequence_ConfigurationItems(context, (ConfigurationItems) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_TYPE_ARRAY:
				sequence_ConfigurationTypeArray(context, (ConfigurationTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_TYPE_BOOLEAN:
				sequence_ConfigurationTypeBoolean(context, (ConfigurationTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_TYPE_INTEGER:
				sequence_ConfigurationTypeInteger(context, (ConfigurationTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_TYPE_NULL:
				sequence_ConfigurationTypeNull(context, (ConfigurationTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_TYPE_NUMBER:
				sequence_ConfigurationTypeNumber(context, (ConfigurationTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_TYPE_OBJECT:
				sequence_ConfigurationTypeObject(context, (ConfigurationTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.CONFIGURATION_TYPE_STRING:
				sequence_ConfigurationTypeString(context, (ConfigurationTypeString) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES_ONE_OF0:
				sequence_NormalJobStrategyMatrixAdditionalPropertiesOneOf0(context, (NormalJobStrategyMatrixAdditionalPropertiesOneOf0) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STRATEGY_MATRIX_ADDITIONAL_PROPERTIES_ONE_OF0_ITEMS:
				sequence_NormalJobStrategyMatrixAdditionalPropertiesOneOf0Items(context, (NormalJobStrategyMatrixAdditionalPropertiesOneOf0Items) semanticObject); 
				return; 
			}
		else if (epackage == JsonMMPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JsonMMPackage.ARRAY_VALUE:
				sequence_ArrayValue(context, (ArrayValue) semanticObject); 
				return; 
			case JsonMMPackage.BOOLEAN_VALUE:
				sequence_BooleanValue(context, (BooleanValue) semanticObject); 
				return; 
			case JsonMMPackage.JSON_DOCUMENT:
				sequence_JsonDocument(context, (JsonDocument) semanticObject); 
				return; 
			case JsonMMPackage.KEY_VALUE_PAIR:
				sequence_KeyValuePair(context, (KeyValuePair) semanticObject); 
				return; 
			case JsonMMPackage.NULL_VALUE:
				sequence_NullValue(context, (NullValue) semanticObject); 
				return; 
			case JsonMMPackage.NUMBER_VALUE:
				sequence_NumberValue(context, (NumberValue) semanticObject); 
				return; 
			case JsonMMPackage.OBJECT_VALUE:
				sequence_ObjectValue(context, (ObjectValue) semanticObject); 
				return; 
			case JsonMMPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Value returns ArrayValue
	 *     ArrayValue returns ArrayValue
	 *
	 * Constraint:
	 *     (value+=Value value+=Value*)?
	 */
	protected void sequence_ArrayValue(ISerializationContext context, ArrayValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns BooleanValue
	 *     BooleanValue returns BooleanValue
	 *
	 * Constraint:
	 *     value=EBoolean
	 */
	protected void sequence_BooleanValue(ISerializationContext context, BooleanValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanValueAccess().getValueEBooleanParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationPropertiesAbstract returns ConfigurationAdditionalProperties
	 *     ConfigurationAdditionalProperties returns ConfigurationAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_ConfigurationAdditionalProperties(ISerializationContext context, ConfigurationAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getConfigurationAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationItems returns ConfigurationItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_ConfigurationItems(ISerializationContext context, ConfigurationItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationAbstract returns ConfigurationTypeArray
	 *     ConfigurationTypeArray returns ConfigurationTypeArray
	 *
	 * Constraint:
	 *     (configuration+=ConfigurationItems configuration+=ConfigurationItems*)?
	 */
	protected void sequence_ConfigurationTypeArray(ISerializationContext context, ConfigurationTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationAbstract returns ConfigurationTypeBoolean
	 *     ConfigurationTypeBoolean returns ConfigurationTypeBoolean
	 *
	 * Constraint:
	 *     configuration=EBooleanObject
	 */
	protected void sequence_ConfigurationTypeBoolean(ISerializationContext context, ConfigurationTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeBoolean_Configuration()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeBoolean_Configuration()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationTypeBooleanAccess().getConfigurationEBooleanObjectParserRuleCall_0(), semanticObject.getConfiguration());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationAbstract returns ConfigurationTypeInteger
	 *     ConfigurationTypeInteger returns ConfigurationTypeInteger
	 *
	 * Constraint:
	 *     configuration=EDoubleObject
	 */
	protected void sequence_ConfigurationTypeInteger(ISerializationContext context, ConfigurationTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeInteger_Configuration()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeInteger_Configuration()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationTypeIntegerAccess().getConfigurationEDoubleObjectParserRuleCall_0(), semanticObject.getConfiguration());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationAbstract returns ConfigurationTypeNull
	 *     ConfigurationTypeNull returns ConfigurationTypeNull
	 *
	 * Constraint:
	 *     configuration=NullValue
	 */
	protected void sequence_ConfigurationTypeNull(ISerializationContext context, ConfigurationTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeNull_Configuration()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeNull_Configuration()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationTypeNullAccess().getConfigurationNullValueParserRuleCall_0(), semanticObject.getConfiguration());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationAbstract returns ConfigurationTypeNumber
	 *     ConfigurationTypeNumber returns ConfigurationTypeNumber
	 *
	 * Constraint:
	 *     configuration=EDoubleObject
	 */
	protected void sequence_ConfigurationTypeNumber(ISerializationContext context, ConfigurationTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeNumber_Configuration()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeNumber_Configuration()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationTypeNumberAccess().getConfigurationEDoubleObjectParserRuleCall_0(), semanticObject.getConfiguration());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationAbstract returns ConfigurationTypeObject
	 *     ConfigurationTypeObject returns ConfigurationTypeObject
	 *
	 * Constraint:
	 *     (configuration+=ConfigurationPropertiesAbstract configuration+=ConfigurationPropertiesAbstract*)?
	 */
	protected void sequence_ConfigurationTypeObject(ISerializationContext context, ConfigurationTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConfigurationAbstract returns ConfigurationTypeString
	 *     ConfigurationTypeString returns ConfigurationTypeString
	 *
	 * Constraint:
	 *     configuration=EString
	 */
	protected void sequence_ConfigurationTypeString(ISerializationContext context, ConfigurationTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeString_Configuration()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfigurationTypeString_Configuration()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationTypeStringAccess().getConfigurationEStringParserRuleCall_0(), semanticObject.getConfiguration());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Configuration returns Configuration
	 *
	 * Constraint:
	 *     configuration=ConfigurationAbstract
	 */
	protected void sequence_Configuration(ISerializationContext context, Configuration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConfiguration_Configuration()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConfiguration_Configuration()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationAccess().getConfigurationConfigurationAbstractParserRuleCall_0(), semanticObject.getConfiguration());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JsonDocument returns JsonDocument
	 *
	 * Constraint:
	 *     value=Value
	 */
	protected void sequence_JsonDocument(ISerializationContext context, JsonDocument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonDocumentAccess().getValueValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeyValuePair returns KeyValuePair
	 *
	 * Constraint:
	 *     (key=EString value=Value)
	 */
	protected void sequence_KeyValuePair(ISerializationContext context, KeyValuePair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeyValuePairAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getKeyValuePairAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixAdditionalPropertiesOneOf0Items returns NormalJobStrategyMatrixAdditionalPropertiesOneOf0Items
	 *
	 * Constraint:
	 *     items=Configuration
	 */
	protected void sequence_NormalJobStrategyMatrixAdditionalPropertiesOneOf0Items(ISerializationContext context, NormalJobStrategyMatrixAdditionalPropertiesOneOf0Items semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalPropertiesOneOf0Items_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStrategyMatrixAdditionalPropertiesOneOf0Items_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStrategyMatrixAdditionalPropertiesOneOf0ItemsAccess().getItemsConfigurationParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStrategyMatrixAdditionalPropertiesOneOf0 returns NormalJobStrategyMatrixAdditionalPropertiesOneOf0
	 *
	 * Constraint:
	 *     (
	 *         additionalProperties+=NormalJobStrategyMatrixAdditionalPropertiesOneOf0Items 
	 *         additionalProperties+=NormalJobStrategyMatrixAdditionalPropertiesOneOf0Items*
	 *     )
	 */
	protected void sequence_NormalJobStrategyMatrixAdditionalPropertiesOneOf0(ISerializationContext context, NormalJobStrategyMatrixAdditionalPropertiesOneOf0 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NullValue
	 *     NullValue returns NullValue
	 *
	 * Constraint:
	 *     value=NullEnum
	 */
	protected void sequence_NullValue(ISerializationContext context, NullValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNullValueAccess().getValueNullEnumEnumRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NumberValue
	 *     NumberValue returns NumberValue
	 *
	 * Constraint:
	 *     value=EDouble
	 */
	protected void sequence_NumberValue(ISerializationContext context, NumberValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberValueAccess().getValueEDoubleParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns ObjectValue
	 *     ObjectValue returns ObjectValue
	 *
	 * Constraint:
	 *     (keyvaluepair+=KeyValuePair keyvaluepair+=KeyValuePair*)?
	 */
	protected void sequence_ObjectValue(ISerializationContext context, ObjectValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=EString
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueEStringParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
