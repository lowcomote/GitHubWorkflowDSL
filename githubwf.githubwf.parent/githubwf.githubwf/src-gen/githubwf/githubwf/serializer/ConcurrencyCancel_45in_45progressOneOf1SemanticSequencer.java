/*
 * generated by Xtext 2.23.0
 */
package githubwf.githubwf.serializer;

import com.google.inject.Inject;
import githubwf.ConcurrencyCancel_45in_45progressOneOf1;
import githubwf.ExpressionSyntax;
import githubwf.GithubwfPackage;
import githubwf.githubwf.services.ConcurrencyCancel_45in_45progressOneOf1GrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ConcurrencyCancel_45in_45progressOneOf1SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ConcurrencyCancel_45in_45progressOneOf1GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GithubwfPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GithubwfPackage.CONCURRENCY_CANCEL_45IN_45PROGRESS_ONE_OF1:
				sequence_ConcurrencyCancel_45in_45progressOneOf1(context, (ConcurrencyCancel_45in_45progressOneOf1) semanticObject); 
				return; 
			case GithubwfPackage.EXPRESSION_SYNTAX:
				sequence_ExpressionSyntax(context, (ExpressionSyntax) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ConcurrencyCancel_45in_45progressOneOf1 returns ConcurrencyCancel_45in_45progressOneOf1
	 *
	 * Constraint:
	 *     cancel_45in_45progress=ExpressionSyntax
	 */
	protected void sequence_ConcurrencyCancel_45in_45progressOneOf1(ISerializationContext context, ConcurrencyCancel_45in_45progressOneOf1 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyCancel_45in_45progressOneOf1_Cancel_45in_45progress()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyCancel_45in_45progressOneOf1_Cancel_45in_45progress()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConcurrencyCancel_45in_45progressOneOf1Access().getCancel_45in_45progressExpressionSyntaxParserRuleCall_2_0(), semanticObject.getCancel_45in_45progress());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpressionSyntax returns ExpressionSyntax
	 *
	 * Constraint:
	 *     expressionSyntax=EString
	 */
	protected void sequence_ExpressionSyntax(ISerializationContext context, ExpressionSyntax semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getExpressionSyntax_ExpressionSyntax()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getExpressionSyntax_ExpressionSyntax()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionSyntaxAccess().getExpressionSyntaxEStringParserRuleCall_0(), semanticObject.getExpressionSyntax());
		feeder.finish();
	}
	
	
}
