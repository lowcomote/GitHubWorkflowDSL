/*
 * generated by Xtext 2.23.0
 */
package githubwf.githubwf.serializer;

import com.google.inject.Inject;
import githubwf.Concurrency;
import githubwf.ConcurrencyCancel_45in_45progress;
import githubwf.ConcurrencyCancel_45in_45progressAdditionalProperties;
import githubwf.ConcurrencyCancel_45in_45progressItems;
import githubwf.ConcurrencyCancel_45in_45progressTypeArray;
import githubwf.ConcurrencyCancel_45in_45progressTypeBoolean;
import githubwf.ConcurrencyCancel_45in_45progressTypeInteger;
import githubwf.ConcurrencyCancel_45in_45progressTypeNull;
import githubwf.ConcurrencyCancel_45in_45progressTypeNumber;
import githubwf.ConcurrencyCancel_45in_45progressTypeObject;
import githubwf.ConcurrencyCancel_45in_45progressTypeString;
import githubwf.ConcurrencyGroup;
import githubwf.GithubwfPackage;
import githubwf.ReusableWorkflowCallJobConcurrencyOneOf1;
import githubwf.githubwf.services.ReusableWorkflowCallJobConcurrencyOneOf1GrammarAccess;
import java.util.Set;
import jsonMM.ArrayValue;
import jsonMM.BooleanValue;
import jsonMM.JsonDocument;
import jsonMM.JsonMMPackage;
import jsonMM.KeyValuePair;
import jsonMM.NullValue;
import jsonMM.NumberValue;
import jsonMM.ObjectValue;
import jsonMM.StringValue;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ReusableWorkflowCallJobConcurrencyOneOf1SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ReusableWorkflowCallJobConcurrencyOneOf1GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GithubwfPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GithubwfPackage.CONCURRENCY:
				sequence_Concurrency(context, (Concurrency) semanticObject); 
				return; 
			case GithubwfPackage.CONCURRENCY_CANCEL_45IN_45PROGRESS:
				sequence_ConcurrencyCancel_45in_45progress(context, (ConcurrencyCancel_45in_45progress) semanticObject); 
				return; 
			case GithubwfPackage.CONCURRENCY_CANCEL_45IN_45PROGRESS_ADDITIONAL_PROPERTIES:
				sequence_ConcurrencyCancel_45in_45progressAdditionalProperties(context, (ConcurrencyCancel_45in_45progressAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.CONCURRENCY_CANCEL_45IN_45PROGRESS_ITEMS:
				sequence_ConcurrencyCancel_45in_45progressItems(context, (ConcurrencyCancel_45in_45progressItems) semanticObject); 
				return; 
			case GithubwfPackage.CONCURRENCY_CANCEL_45IN_45PROGRESS_TYPE_ARRAY:
				sequence_ConcurrencyCancel_45in_45progressTypeArray(context, (ConcurrencyCancel_45in_45progressTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.CONCURRENCY_CANCEL_45IN_45PROGRESS_TYPE_BOOLEAN:
				sequence_ConcurrencyCancel_45in_45progressTypeBoolean(context, (ConcurrencyCancel_45in_45progressTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.CONCURRENCY_CANCEL_45IN_45PROGRESS_TYPE_INTEGER:
				sequence_ConcurrencyCancel_45in_45progressTypeInteger(context, (ConcurrencyCancel_45in_45progressTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.CONCURRENCY_CANCEL_45IN_45PROGRESS_TYPE_NULL:
				sequence_ConcurrencyCancel_45in_45progressTypeNull(context, (ConcurrencyCancel_45in_45progressTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.CONCURRENCY_CANCEL_45IN_45PROGRESS_TYPE_NUMBER:
				sequence_ConcurrencyCancel_45in_45progressTypeNumber(context, (ConcurrencyCancel_45in_45progressTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.CONCURRENCY_CANCEL_45IN_45PROGRESS_TYPE_OBJECT:
				sequence_ConcurrencyCancel_45in_45progressTypeObject(context, (ConcurrencyCancel_45in_45progressTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.CONCURRENCY_CANCEL_45IN_45PROGRESS_TYPE_STRING:
				sequence_ConcurrencyCancel_45in_45progressTypeString(context, (ConcurrencyCancel_45in_45progressTypeString) semanticObject); 
				return; 
			case GithubwfPackage.CONCURRENCY_GROUP:
				sequence_ConcurrencyGroup(context, (ConcurrencyGroup) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_CONCURRENCY_ONE_OF1:
				sequence_ReusableWorkflowCallJobConcurrencyOneOf1(context, (ReusableWorkflowCallJobConcurrencyOneOf1) semanticObject); 
				return; 
			}
		else if (epackage == JsonMMPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JsonMMPackage.ARRAY_VALUE:
				sequence_ArrayValue(context, (ArrayValue) semanticObject); 
				return; 
			case JsonMMPackage.BOOLEAN_VALUE:
				sequence_BooleanValue(context, (BooleanValue) semanticObject); 
				return; 
			case JsonMMPackage.JSON_DOCUMENT:
				sequence_JsonDocument(context, (JsonDocument) semanticObject); 
				return; 
			case JsonMMPackage.KEY_VALUE_PAIR:
				sequence_KeyValuePair(context, (KeyValuePair) semanticObject); 
				return; 
			case JsonMMPackage.NULL_VALUE:
				sequence_NullValue(context, (NullValue) semanticObject); 
				return; 
			case JsonMMPackage.NUMBER_VALUE:
				sequence_NumberValue(context, (NumberValue) semanticObject); 
				return; 
			case JsonMMPackage.OBJECT_VALUE:
				sequence_ObjectValue(context, (ObjectValue) semanticObject); 
				return; 
			case JsonMMPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Value returns ArrayValue
	 *     ArrayValue returns ArrayValue
	 *
	 * Constraint:
	 *     (value+=Value value+=Value*)?
	 */
	protected void sequence_ArrayValue(ISerializationContext context, ArrayValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns BooleanValue
	 *     BooleanValue returns BooleanValue
	 *
	 * Constraint:
	 *     value=EBoolean
	 */
	protected void sequence_BooleanValue(ISerializationContext context, BooleanValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanValueAccess().getValueEBooleanParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConcurrencyCancel_45in_45progressPropertiesAbstract returns ConcurrencyCancel_45in_45progressAdditionalProperties
	 *     ConcurrencyCancel_45in_45progressAdditionalProperties returns ConcurrencyCancel_45in_45progressAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_ConcurrencyCancel_45in_45progressAdditionalProperties(ISerializationContext context, ConcurrencyCancel_45in_45progressAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyCancel_45in_45progressAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyCancel_45in_45progressAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyCancel_45in_45progressAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyCancel_45in_45progressAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConcurrencyCancel_45in_45progressAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getConcurrencyCancel_45in_45progressAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConcurrencyCancel_45in_45progressItems returns ConcurrencyCancel_45in_45progressItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_ConcurrencyCancel_45in_45progressItems(ISerializationContext context, ConcurrencyCancel_45in_45progressItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyCancel_45in_45progressItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyCancel_45in_45progressItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConcurrencyCancel_45in_45progressItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConcurrencyCancel_45in_45progressAbstract returns ConcurrencyCancel_45in_45progressTypeArray
	 *     ConcurrencyCancel_45in_45progressTypeArray returns ConcurrencyCancel_45in_45progressTypeArray
	 *
	 * Constraint:
	 *     (cancel_45in_45progress+=ConcurrencyCancel_45in_45progressItems cancel_45in_45progress+=ConcurrencyCancel_45in_45progressItems*)?
	 */
	protected void sequence_ConcurrencyCancel_45in_45progressTypeArray(ISerializationContext context, ConcurrencyCancel_45in_45progressTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcurrencyCancel_45in_45progressAbstract returns ConcurrencyCancel_45in_45progressTypeBoolean
	 *     ConcurrencyCancel_45in_45progressTypeBoolean returns ConcurrencyCancel_45in_45progressTypeBoolean
	 *
	 * Constraint:
	 *     cancel_45in_45progress=EBooleanObject
	 */
	protected void sequence_ConcurrencyCancel_45in_45progressTypeBoolean(ISerializationContext context, ConcurrencyCancel_45in_45progressTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyCancel_45in_45progressTypeBoolean_Cancel_45in_45progress()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyCancel_45in_45progressTypeBoolean_Cancel_45in_45progress()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConcurrencyCancel_45in_45progressTypeBooleanAccess().getCancel_45in_45progressEBooleanObjectParserRuleCall_2_0(), semanticObject.getCancel_45in_45progress());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConcurrencyCancel_45in_45progressAbstract returns ConcurrencyCancel_45in_45progressTypeInteger
	 *     ConcurrencyCancel_45in_45progressTypeInteger returns ConcurrencyCancel_45in_45progressTypeInteger
	 *
	 * Constraint:
	 *     cancel_45in_45progress=EDoubleObject
	 */
	protected void sequence_ConcurrencyCancel_45in_45progressTypeInteger(ISerializationContext context, ConcurrencyCancel_45in_45progressTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyCancel_45in_45progressTypeInteger_Cancel_45in_45progress()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyCancel_45in_45progressTypeInteger_Cancel_45in_45progress()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConcurrencyCancel_45in_45progressTypeIntegerAccess().getCancel_45in_45progressEDoubleObjectParserRuleCall_2_0(), semanticObject.getCancel_45in_45progress());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConcurrencyCancel_45in_45progressAbstract returns ConcurrencyCancel_45in_45progressTypeNull
	 *     ConcurrencyCancel_45in_45progressTypeNull returns ConcurrencyCancel_45in_45progressTypeNull
	 *
	 * Constraint:
	 *     cancel_45in_45progress=NullValue
	 */
	protected void sequence_ConcurrencyCancel_45in_45progressTypeNull(ISerializationContext context, ConcurrencyCancel_45in_45progressTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyCancel_45in_45progressTypeNull_Cancel_45in_45progress()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyCancel_45in_45progressTypeNull_Cancel_45in_45progress()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConcurrencyCancel_45in_45progressTypeNullAccess().getCancel_45in_45progressNullValueParserRuleCall_2_0(), semanticObject.getCancel_45in_45progress());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConcurrencyCancel_45in_45progressAbstract returns ConcurrencyCancel_45in_45progressTypeNumber
	 *     ConcurrencyCancel_45in_45progressTypeNumber returns ConcurrencyCancel_45in_45progressTypeNumber
	 *
	 * Constraint:
	 *     cancel_45in_45progress=EDoubleObject
	 */
	protected void sequence_ConcurrencyCancel_45in_45progressTypeNumber(ISerializationContext context, ConcurrencyCancel_45in_45progressTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyCancel_45in_45progressTypeNumber_Cancel_45in_45progress()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyCancel_45in_45progressTypeNumber_Cancel_45in_45progress()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConcurrencyCancel_45in_45progressTypeNumberAccess().getCancel_45in_45progressEDoubleObjectParserRuleCall_2_0(), semanticObject.getCancel_45in_45progress());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConcurrencyCancel_45in_45progressAbstract returns ConcurrencyCancel_45in_45progressTypeObject
	 *     ConcurrencyCancel_45in_45progressTypeObject returns ConcurrencyCancel_45in_45progressTypeObject
	 *
	 * Constraint:
	 *     (
	 *         cancel_45in_45progress+=ConcurrencyCancel_45in_45progressPropertiesAbstract 
	 *         cancel_45in_45progress+=ConcurrencyCancel_45in_45progressPropertiesAbstract*
	 *     )?
	 */
	protected void sequence_ConcurrencyCancel_45in_45progressTypeObject(ISerializationContext context, ConcurrencyCancel_45in_45progressTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConcurrencyCancel_45in_45progressAbstract returns ConcurrencyCancel_45in_45progressTypeString
	 *     ConcurrencyCancel_45in_45progressTypeString returns ConcurrencyCancel_45in_45progressTypeString
	 *
	 * Constraint:
	 *     cancel_45in_45progress=EString
	 */
	protected void sequence_ConcurrencyCancel_45in_45progressTypeString(ISerializationContext context, ConcurrencyCancel_45in_45progressTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyCancel_45in_45progressTypeString_Cancel_45in_45progress()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyCancel_45in_45progressTypeString_Cancel_45in_45progress()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConcurrencyCancel_45in_45progressTypeStringAccess().getCancel_45in_45progressEStringParserRuleCall_2_0(), semanticObject.getCancel_45in_45progress());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConcurrencyPropertiesAbstract returns ConcurrencyCancel_45in_45progress
	 *     ConcurrencyCancel_45in_45progress returns ConcurrencyCancel_45in_45progress
	 *
	 * Constraint:
	 *     cancel_45in_45progress=ConcurrencyCancel_45in_45progressAbstract
	 */
	protected void sequence_ConcurrencyCancel_45in_45progress(ISerializationContext context, ConcurrencyCancel_45in_45progress semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyCancel_45in_45progress_Cancel_45in_45progress()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyCancel_45in_45progress_Cancel_45in_45progress()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConcurrencyCancel_45in_45progressAccess().getCancel_45in_45progressConcurrencyCancel_45in_45progressAbstractParserRuleCall_0(), semanticObject.getCancel_45in_45progress());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConcurrencyPropertiesAbstract returns ConcurrencyGroup
	 *     ConcurrencyGroup returns ConcurrencyGroup
	 *
	 * Constraint:
	 *     group=EString
	 */
	protected void sequence_ConcurrencyGroup(ISerializationContext context, ConcurrencyGroup semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyGroup_Group()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getConcurrencyGroup_Group()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConcurrencyGroupAccess().getGroupEStringParserRuleCall_2_0(), semanticObject.getGroup());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Concurrency returns Concurrency
	 *
	 * Constraint:
	 *     (concurrency+=ConcurrencyPropertiesAbstract concurrency+=ConcurrencyPropertiesAbstract*)?
	 */
	protected void sequence_Concurrency(ISerializationContext context, Concurrency semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JsonDocument returns JsonDocument
	 *
	 * Constraint:
	 *     value=Value
	 */
	protected void sequence_JsonDocument(ISerializationContext context, JsonDocument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonDocumentAccess().getValueValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeyValuePair returns KeyValuePair
	 *
	 * Constraint:
	 *     (key=EString value=Value)
	 */
	protected void sequence_KeyValuePair(ISerializationContext context, KeyValuePair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeyValuePairAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getKeyValuePairAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NullValue
	 *     NullValue returns NullValue
	 *
	 * Constraint:
	 *     value=NullEnum
	 */
	protected void sequence_NullValue(ISerializationContext context, NullValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNullValueAccess().getValueNullEnumEnumRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NumberValue
	 *     NumberValue returns NumberValue
	 *
	 * Constraint:
	 *     value=EDouble
	 */
	protected void sequence_NumberValue(ISerializationContext context, NumberValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberValueAccess().getValueEDoubleParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns ObjectValue
	 *     ObjectValue returns ObjectValue
	 *
	 * Constraint:
	 *     (keyvaluepair+=KeyValuePair keyvaluepair+=KeyValuePair*)?
	 */
	protected void sequence_ObjectValue(ISerializationContext context, ObjectValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReusableWorkflowCallJobConcurrencyOneOf1 returns ReusableWorkflowCallJobConcurrencyOneOf1
	 *
	 * Constraint:
	 *     concurrency=Concurrency
	 */
	protected void sequence_ReusableWorkflowCallJobConcurrencyOneOf1(ISerializationContext context, ReusableWorkflowCallJobConcurrencyOneOf1 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobConcurrencyOneOf1_Concurrency()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobConcurrencyOneOf1_Concurrency()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobConcurrencyOneOf1Access().getConcurrencyConcurrencyParserRuleCall_2_0(), semanticObject.getConcurrency());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=EString
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueEStringParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
