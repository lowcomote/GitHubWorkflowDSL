/*
 * generated by Xtext 2.23.0
 */
package githubwf.githubwf.serializer;

import com.google.inject.Inject;
import githubwf.GithubwfPackage;
import githubwf.PermissionsOneOf1;
import githubwf.Permissions_45event;
import githubwf.Permissions_45eventActions;
import githubwf.Permissions_45eventChecks;
import githubwf.Permissions_45eventContents;
import githubwf.Permissions_45eventDeployments;
import githubwf.Permissions_45eventDiscussions;
import githubwf.Permissions_45eventId_45token;
import githubwf.Permissions_45eventIssues;
import githubwf.Permissions_45eventPackages;
import githubwf.Permissions_45eventPages;
import githubwf.Permissions_45eventPull_45requests;
import githubwf.Permissions_45eventRepository_45projects;
import githubwf.Permissions_45eventSecurity_45events;
import githubwf.Permissions_45eventStatuses;
import githubwf.Permissions_45level;
import githubwf.githubwf.services.PermissionsOneOf1GrammarAccess;
import java.util.Set;
import jsonMM.ArrayValue;
import jsonMM.BooleanValue;
import jsonMM.JsonDocument;
import jsonMM.JsonMMPackage;
import jsonMM.KeyValuePair;
import jsonMM.NullValue;
import jsonMM.NumberValue;
import jsonMM.ObjectValue;
import jsonMM.StringValue;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class PermissionsOneOf1SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PermissionsOneOf1GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GithubwfPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GithubwfPackage.PERMISSIONS_ONE_OF1:
				sequence_PermissionsOneOf1(context, (PermissionsOneOf1) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT:
				sequence_Permissions_45event(context, (Permissions_45event) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_ACTIONS:
				sequence_Permissions_45eventActions(context, (Permissions_45eventActions) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_CHECKS:
				sequence_Permissions_45eventChecks(context, (Permissions_45eventChecks) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_CONTENTS:
				sequence_Permissions_45eventContents(context, (Permissions_45eventContents) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_DEPLOYMENTS:
				sequence_Permissions_45eventDeployments(context, (Permissions_45eventDeployments) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_DISCUSSIONS:
				sequence_Permissions_45eventDiscussions(context, (Permissions_45eventDiscussions) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_ID_45TOKEN:
				sequence_Permissions_45eventId_45token(context, (Permissions_45eventId_45token) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_ISSUES:
				sequence_Permissions_45eventIssues(context, (Permissions_45eventIssues) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_PACKAGES:
				sequence_Permissions_45eventPackages(context, (Permissions_45eventPackages) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_PAGES:
				sequence_Permissions_45eventPages(context, (Permissions_45eventPages) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_PULL_45REQUESTS:
				sequence_Permissions_45eventPull_45requests(context, (Permissions_45eventPull_45requests) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_REPOSITORY_45PROJECTS:
				sequence_Permissions_45eventRepository_45projects(context, (Permissions_45eventRepository_45projects) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_SECURITY_45EVENTS:
				sequence_Permissions_45eventSecurity_45events(context, (Permissions_45eventSecurity_45events) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45EVENT_STATUSES:
				sequence_Permissions_45eventStatuses(context, (Permissions_45eventStatuses) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_45LEVEL:
				sequence_Permissions_45level(context, (Permissions_45level) semanticObject); 
				return; 
			}
		else if (epackage == JsonMMPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JsonMMPackage.ARRAY_VALUE:
				sequence_ArrayValue(context, (ArrayValue) semanticObject); 
				return; 
			case JsonMMPackage.BOOLEAN_VALUE:
				sequence_BooleanValue(context, (BooleanValue) semanticObject); 
				return; 
			case JsonMMPackage.JSON_DOCUMENT:
				sequence_JsonDocument(context, (JsonDocument) semanticObject); 
				return; 
			case JsonMMPackage.KEY_VALUE_PAIR:
				sequence_KeyValuePair(context, (KeyValuePair) semanticObject); 
				return; 
			case JsonMMPackage.NULL_VALUE:
				sequence_NullValue(context, (NullValue) semanticObject); 
				return; 
			case JsonMMPackage.NUMBER_VALUE:
				sequence_NumberValue(context, (NumberValue) semanticObject); 
				return; 
			case JsonMMPackage.OBJECT_VALUE:
				sequence_ObjectValue(context, (ObjectValue) semanticObject); 
				return; 
			case JsonMMPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Value returns ArrayValue
	 *     ArrayValue returns ArrayValue
	 *
	 * Constraint:
	 *     (value+=Value value+=Value*)?
	 */
	protected void sequence_ArrayValue(ISerializationContext context, ArrayValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns BooleanValue
	 *     BooleanValue returns BooleanValue
	 *
	 * Constraint:
	 *     value=EBoolean
	 */
	protected void sequence_BooleanValue(ISerializationContext context, BooleanValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanValueAccess().getValueEBooleanParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JsonDocument returns JsonDocument
	 *
	 * Constraint:
	 *     value=Value
	 */
	protected void sequence_JsonDocument(ISerializationContext context, JsonDocument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonDocumentAccess().getValueValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeyValuePair returns KeyValuePair
	 *
	 * Constraint:
	 *     (key=EString value=Value)
	 */
	protected void sequence_KeyValuePair(ISerializationContext context, KeyValuePair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeyValuePairAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getKeyValuePairAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NullValue
	 *     NullValue returns NullValue
	 *
	 * Constraint:
	 *     value=NullEnum
	 */
	protected void sequence_NullValue(ISerializationContext context, NullValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNullValueAccess().getValueNullEnumEnumRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NumberValue
	 *     NumberValue returns NumberValue
	 *
	 * Constraint:
	 *     value=EDouble
	 */
	protected void sequence_NumberValue(ISerializationContext context, NumberValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberValueAccess().getValueEDoubleParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns ObjectValue
	 *     ObjectValue returns ObjectValue
	 *
	 * Constraint:
	 *     (keyvaluepair+=KeyValuePair keyvaluepair+=KeyValuePair*)?
	 */
	protected void sequence_ObjectValue(ISerializationContext context, ObjectValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PermissionsOneOf1 returns PermissionsOneOf1
	 *
	 * Constraint:
	 *     permissions=Permissions_45event
	 */
	protected void sequence_PermissionsOneOf1(ISerializationContext context, PermissionsOneOf1 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsOneOf1_Permissions()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsOneOf1_Permissions()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissionsOneOf1Access().getPermissionsPermissions_45eventParserRuleCall_0(), semanticObject.getPermissions());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventActions
	 *     Permissions_45eventActions returns Permissions_45eventActions
	 *
	 * Constraint:
	 *     actions=Permissions_45level
	 */
	protected void sequence_Permissions_45eventActions(ISerializationContext context, Permissions_45eventActions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventActions_Actions()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventActions_Actions()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventActionsAccess().getActionsPermissions_45levelParserRuleCall_2_0(), semanticObject.getActions());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventChecks
	 *     Permissions_45eventChecks returns Permissions_45eventChecks
	 *
	 * Constraint:
	 *     checks=Permissions_45level
	 */
	protected void sequence_Permissions_45eventChecks(ISerializationContext context, Permissions_45eventChecks semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventChecks_Checks()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventChecks_Checks()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventChecksAccess().getChecksPermissions_45levelParserRuleCall_2_0(), semanticObject.getChecks());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventContents
	 *     Permissions_45eventContents returns Permissions_45eventContents
	 *
	 * Constraint:
	 *     contents=Permissions_45level
	 */
	protected void sequence_Permissions_45eventContents(ISerializationContext context, Permissions_45eventContents semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventContents_Contents()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventContents_Contents()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventContentsAccess().getContentsPermissions_45levelParserRuleCall_2_0(), semanticObject.getContents());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventDeployments
	 *     Permissions_45eventDeployments returns Permissions_45eventDeployments
	 *
	 * Constraint:
	 *     deployments=Permissions_45level
	 */
	protected void sequence_Permissions_45eventDeployments(ISerializationContext context, Permissions_45eventDeployments semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventDeployments_Deployments()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventDeployments_Deployments()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventDeploymentsAccess().getDeploymentsPermissions_45levelParserRuleCall_2_0(), semanticObject.getDeployments());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventDiscussions
	 *     Permissions_45eventDiscussions returns Permissions_45eventDiscussions
	 *
	 * Constraint:
	 *     discussions=Permissions_45level
	 */
	protected void sequence_Permissions_45eventDiscussions(ISerializationContext context, Permissions_45eventDiscussions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventDiscussions_Discussions()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventDiscussions_Discussions()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventDiscussionsAccess().getDiscussionsPermissions_45levelParserRuleCall_2_0(), semanticObject.getDiscussions());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventId_45token
	 *     Permissions_45eventId_45token returns Permissions_45eventId_45token
	 *
	 * Constraint:
	 *     id_45token=Permissions_45level
	 */
	protected void sequence_Permissions_45eventId_45token(ISerializationContext context, Permissions_45eventId_45token semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventId_45token_Id_45token()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventId_45token_Id_45token()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventId_45tokenAccess().getId_45tokenPermissions_45levelParserRuleCall_2_0(), semanticObject.getId_45token());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventIssues
	 *     Permissions_45eventIssues returns Permissions_45eventIssues
	 *
	 * Constraint:
	 *     issues=Permissions_45level
	 */
	protected void sequence_Permissions_45eventIssues(ISerializationContext context, Permissions_45eventIssues semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventIssues_Issues()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventIssues_Issues()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventIssuesAccess().getIssuesPermissions_45levelParserRuleCall_2_0(), semanticObject.getIssues());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventPackages
	 *     Permissions_45eventPackages returns Permissions_45eventPackages
	 *
	 * Constraint:
	 *     packages=Permissions_45level
	 */
	protected void sequence_Permissions_45eventPackages(ISerializationContext context, Permissions_45eventPackages semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventPackages_Packages()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventPackages_Packages()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventPackagesAccess().getPackagesPermissions_45levelParserRuleCall_2_0(), semanticObject.getPackages());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventPages
	 *     Permissions_45eventPages returns Permissions_45eventPages
	 *
	 * Constraint:
	 *     pages=Permissions_45level
	 */
	protected void sequence_Permissions_45eventPages(ISerializationContext context, Permissions_45eventPages semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventPages_Pages()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventPages_Pages()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventPagesAccess().getPagesPermissions_45levelParserRuleCall_2_0(), semanticObject.getPages());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventPull_45requests
	 *     Permissions_45eventPull_45requests returns Permissions_45eventPull_45requests
	 *
	 * Constraint:
	 *     pull_45requests=Permissions_45level
	 */
	protected void sequence_Permissions_45eventPull_45requests(ISerializationContext context, Permissions_45eventPull_45requests semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventPull_45requests_Pull_45requests()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventPull_45requests_Pull_45requests()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventPull_45requestsAccess().getPull_45requestsPermissions_45levelParserRuleCall_2_0(), semanticObject.getPull_45requests());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventRepository_45projects
	 *     Permissions_45eventRepository_45projects returns Permissions_45eventRepository_45projects
	 *
	 * Constraint:
	 *     repository_45projects=Permissions_45level
	 */
	protected void sequence_Permissions_45eventRepository_45projects(ISerializationContext context, Permissions_45eventRepository_45projects semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventRepository_45projects_Repository_45projects()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventRepository_45projects_Repository_45projects()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventRepository_45projectsAccess().getRepository_45projectsPermissions_45levelParserRuleCall_2_0(), semanticObject.getRepository_45projects());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventSecurity_45events
	 *     Permissions_45eventSecurity_45events returns Permissions_45eventSecurity_45events
	 *
	 * Constraint:
	 *     security_45events=Permissions_45level
	 */
	protected void sequence_Permissions_45eventSecurity_45events(ISerializationContext context, Permissions_45eventSecurity_45events semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventSecurity_45events_Security_45events()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventSecurity_45events_Security_45events()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventSecurity_45eventsAccess().getSecurity_45eventsPermissions_45levelParserRuleCall_2_0(), semanticObject.getSecurity_45events());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Permissions_45eventPropertiesAbstract returns Permissions_45eventStatuses
	 *     Permissions_45eventStatuses returns Permissions_45eventStatuses
	 *
	 * Constraint:
	 *     statuses=Permissions_45level
	 */
	protected void sequence_Permissions_45eventStatuses(ISerializationContext context, Permissions_45eventStatuses semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventStatuses_Statuses()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45eventStatuses_Statuses()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45eventStatusesAccess().getStatusesPermissions_45levelParserRuleCall_2_0(), semanticObject.getStatuses());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Permissions_45event returns Permissions_45event
	 *
	 * Constraint:
	 *     (permissions_45event+=Permissions_45eventPropertiesAbstract permissions_45event+=Permissions_45eventPropertiesAbstract*)?
	 */
	protected void sequence_Permissions_45event(ISerializationContext context, Permissions_45event semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Permissions_45level returns Permissions_45level
	 *
	 * Constraint:
	 *     permissions_45level=JsonDocument
	 */
	protected void sequence_Permissions_45level(ISerializationContext context, Permissions_45level semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45level_Permissions_45level()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_45level_Permissions_45level()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissions_45levelAccess().getPermissions_45levelJsonDocumentParserRuleCall_0(), semanticObject.getPermissions_45level());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=EString
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueEStringParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
