/*
 * generated by Xtext 2.29.0
 */
package githubwf.githubwf.serializer;

import com.google.inject.Inject;
import githubwf.Defaults;
import githubwf.DefaultsRun;
import githubwf.DefaultsRunShell;
import githubwf.DefaultsRunWorking_45directory;
import githubwf.Env;
import githubwf.EnvAdditionalProperties;
import githubwf.EnvItems;
import githubwf.EnvTypeArray;
import githubwf.EnvTypeBoolean;
import githubwf.EnvTypeInteger;
import githubwf.EnvTypeNull;
import githubwf.EnvTypeNumber;
import githubwf.EnvTypeObject;
import githubwf.EnvTypeString;
import githubwf.GithubwfPackage;
import githubwf.GithubwfRoot;
import githubwf.GithubwfRootConcurrency;
import githubwf.GithubwfRootConcurrencyAdditionalProperties;
import githubwf.GithubwfRootConcurrencyItems;
import githubwf.GithubwfRootConcurrencyTypeArray;
import githubwf.GithubwfRootConcurrencyTypeBoolean;
import githubwf.GithubwfRootConcurrencyTypeInteger;
import githubwf.GithubwfRootConcurrencyTypeNull;
import githubwf.GithubwfRootConcurrencyTypeNumber;
import githubwf.GithubwfRootConcurrencyTypeObject;
import githubwf.GithubwfRootConcurrencyTypeString;
import githubwf.GithubwfRootDefaults;
import githubwf.GithubwfRootEnv;
import githubwf.GithubwfRootJobs;
import githubwf.GithubwfRootJobsPatternProperties0;
import githubwf.GithubwfRootJobsPatternProperties0AdditionalProperties;
import githubwf.GithubwfRootJobsPatternProperties0Items;
import githubwf.GithubwfRootJobsPatternProperties0TypeArray;
import githubwf.GithubwfRootJobsPatternProperties0TypeBoolean;
import githubwf.GithubwfRootJobsPatternProperties0TypeInteger;
import githubwf.GithubwfRootJobsPatternProperties0TypeNull;
import githubwf.GithubwfRootJobsPatternProperties0TypeNumber;
import githubwf.GithubwfRootJobsPatternProperties0TypeObject;
import githubwf.GithubwfRootJobsPatternProperties0TypeString;
import githubwf.GithubwfRootName;
import githubwf.GithubwfRootOn;
import githubwf.GithubwfRootOnAdditionalProperties;
import githubwf.GithubwfRootOnItems;
import githubwf.GithubwfRootOnTypeArray;
import githubwf.GithubwfRootOnTypeBoolean;
import githubwf.GithubwfRootOnTypeInteger;
import githubwf.GithubwfRootOnTypeNull;
import githubwf.GithubwfRootOnTypeNumber;
import githubwf.GithubwfRootOnTypeObject;
import githubwf.GithubwfRootOnTypeString;
import githubwf.GithubwfRootPermissions;
import githubwf.GithubwfRootRun_45name;
import githubwf.Permissions;
import githubwf.PermissionsAdditionalProperties;
import githubwf.PermissionsItems;
import githubwf.PermissionsTypeArray;
import githubwf.PermissionsTypeBoolean;
import githubwf.PermissionsTypeInteger;
import githubwf.PermissionsTypeNull;
import githubwf.PermissionsTypeNumber;
import githubwf.PermissionsTypeObject;
import githubwf.PermissionsTypeString;
import githubwf.Shell;
import githubwf.ShellAdditionalProperties;
import githubwf.ShellItems;
import githubwf.ShellTypeArray;
import githubwf.ShellTypeBoolean;
import githubwf.ShellTypeInteger;
import githubwf.ShellTypeNull;
import githubwf.ShellTypeNumber;
import githubwf.ShellTypeObject;
import githubwf.ShellTypeString;
import githubwf.Working_45directory;
import githubwf.githubwf.services.GithubwfGrammarAccess;
import java.util.Set;
import jsonMM.ArrayValue;
import jsonMM.BooleanValue;
import jsonMM.JsonDocument;
import jsonMM.JsonMMPackage;
import jsonMM.KeyValuePair;
import jsonMM.NullValue;
import jsonMM.NumberValue;
import jsonMM.ObjectValue;
import jsonMM.StringValue;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GithubwfSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GithubwfGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GithubwfPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GithubwfPackage.DEFAULTS:
				sequence_Defaults(context, (Defaults) semanticObject); 
				return; 
			case GithubwfPackage.DEFAULTS_RUN:
				sequence_DefaultsRun(context, (DefaultsRun) semanticObject); 
				return; 
			case GithubwfPackage.DEFAULTS_RUN_SHELL:
				sequence_DefaultsRunShell(context, (DefaultsRunShell) semanticObject); 
				return; 
			case GithubwfPackage.DEFAULTS_RUN_WORKING_45DIRECTORY:
				sequence_DefaultsRunWorking_45directory(context, (DefaultsRunWorking_45directory) semanticObject); 
				return; 
			case GithubwfPackage.ENV:
				sequence_Env(context, (Env) semanticObject); 
				return; 
			case GithubwfPackage.ENV_ADDITIONAL_PROPERTIES:
				sequence_EnvAdditionalProperties(context, (EnvAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.ENV_ITEMS:
				sequence_EnvItems(context, (EnvItems) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_ARRAY:
				sequence_EnvTypeArray(context, (EnvTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_BOOLEAN:
				sequence_EnvTypeBoolean(context, (EnvTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_INTEGER:
				sequence_EnvTypeInteger(context, (EnvTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_NULL:
				sequence_EnvTypeNull(context, (EnvTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_NUMBER:
				sequence_EnvTypeNumber(context, (EnvTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_OBJECT:
				sequence_EnvTypeObject(context, (EnvTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_STRING:
				sequence_EnvTypeString(context, (EnvTypeString) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT:
				sequence_GithubwfRoot(context, (GithubwfRoot) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_CONCURRENCY:
				sequence_GithubwfRootConcurrency(context, (GithubwfRootConcurrency) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_CONCURRENCY_ADDITIONAL_PROPERTIES:
				sequence_GithubwfRootConcurrencyAdditionalProperties(context, (GithubwfRootConcurrencyAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_CONCURRENCY_ITEMS:
				sequence_GithubwfRootConcurrencyItems(context, (GithubwfRootConcurrencyItems) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_CONCURRENCY_TYPE_ARRAY:
				sequence_GithubwfRootConcurrencyTypeArray(context, (GithubwfRootConcurrencyTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_CONCURRENCY_TYPE_BOOLEAN:
				sequence_GithubwfRootConcurrencyTypeBoolean(context, (GithubwfRootConcurrencyTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_CONCURRENCY_TYPE_INTEGER:
				sequence_GithubwfRootConcurrencyTypeInteger(context, (GithubwfRootConcurrencyTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_CONCURRENCY_TYPE_NULL:
				sequence_GithubwfRootConcurrencyTypeNull(context, (GithubwfRootConcurrencyTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_CONCURRENCY_TYPE_NUMBER:
				sequence_GithubwfRootConcurrencyTypeNumber(context, (GithubwfRootConcurrencyTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_CONCURRENCY_TYPE_OBJECT:
				sequence_GithubwfRootConcurrencyTypeObject(context, (GithubwfRootConcurrencyTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_CONCURRENCY_TYPE_STRING:
				sequence_GithubwfRootConcurrencyTypeString(context, (GithubwfRootConcurrencyTypeString) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_DEFAULTS:
				sequence_GithubwfRootDefaults(context, (GithubwfRootDefaults) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_ENV:
				sequence_GithubwfRootEnv(context, (GithubwfRootEnv) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_JOBS:
				sequence_GithubwfRootJobs(context, (GithubwfRootJobs) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_JOBS_PATTERN_PROPERTIES0:
				sequence_GithubwfRootJobsPatternProperties0(context, (GithubwfRootJobsPatternProperties0) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_JOBS_PATTERN_PROPERTIES0_ADDITIONAL_PROPERTIES:
				sequence_GithubwfRootJobsPatternProperties0AdditionalProperties(context, (GithubwfRootJobsPatternProperties0AdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_JOBS_PATTERN_PROPERTIES0_ITEMS:
				sequence_GithubwfRootJobsPatternProperties0Items(context, (GithubwfRootJobsPatternProperties0Items) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_JOBS_PATTERN_PROPERTIES0_TYPE_ARRAY:
				sequence_GithubwfRootJobsPatternProperties0TypeArray(context, (GithubwfRootJobsPatternProperties0TypeArray) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_JOBS_PATTERN_PROPERTIES0_TYPE_BOOLEAN:
				sequence_GithubwfRootJobsPatternProperties0TypeBoolean(context, (GithubwfRootJobsPatternProperties0TypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_JOBS_PATTERN_PROPERTIES0_TYPE_INTEGER:
				sequence_GithubwfRootJobsPatternProperties0TypeInteger(context, (GithubwfRootJobsPatternProperties0TypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_JOBS_PATTERN_PROPERTIES0_TYPE_NULL:
				sequence_GithubwfRootJobsPatternProperties0TypeNull(context, (GithubwfRootJobsPatternProperties0TypeNull) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_JOBS_PATTERN_PROPERTIES0_TYPE_NUMBER:
				sequence_GithubwfRootJobsPatternProperties0TypeNumber(context, (GithubwfRootJobsPatternProperties0TypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_JOBS_PATTERN_PROPERTIES0_TYPE_OBJECT:
				sequence_GithubwfRootJobsPatternProperties0TypeObject(context, (GithubwfRootJobsPatternProperties0TypeObject) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_JOBS_PATTERN_PROPERTIES0_TYPE_STRING:
				sequence_GithubwfRootJobsPatternProperties0TypeString(context, (GithubwfRootJobsPatternProperties0TypeString) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_NAME:
				sequence_GithubwfRootName(context, (GithubwfRootName) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_ON:
				sequence_GithubwfRootOn(context, (GithubwfRootOn) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_ON_ADDITIONAL_PROPERTIES:
				sequence_GithubwfRootOnAdditionalProperties(context, (GithubwfRootOnAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_ON_ITEMS:
				sequence_GithubwfRootOnItems(context, (GithubwfRootOnItems) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_ON_TYPE_ARRAY:
				sequence_GithubwfRootOnTypeArray(context, (GithubwfRootOnTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_ON_TYPE_BOOLEAN:
				sequence_GithubwfRootOnTypeBoolean(context, (GithubwfRootOnTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_ON_TYPE_INTEGER:
				sequence_GithubwfRootOnTypeInteger(context, (GithubwfRootOnTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_ON_TYPE_NULL:
				sequence_GithubwfRootOnTypeNull(context, (GithubwfRootOnTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_ON_TYPE_NUMBER:
				sequence_GithubwfRootOnTypeNumber(context, (GithubwfRootOnTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_ON_TYPE_OBJECT:
				sequence_GithubwfRootOnTypeObject(context, (GithubwfRootOnTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_ON_TYPE_STRING:
				sequence_GithubwfRootOnTypeString(context, (GithubwfRootOnTypeString) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_PERMISSIONS:
				sequence_GithubwfRootPermissions(context, (GithubwfRootPermissions) semanticObject); 
				return; 
			case GithubwfPackage.GITHUBWF_ROOT_RUN_45NAME:
				sequence_GithubwfRootRun_45name(context, (GithubwfRootRun_45name) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS:
				sequence_Permissions(context, (Permissions) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_ADDITIONAL_PROPERTIES:
				sequence_PermissionsAdditionalProperties(context, (PermissionsAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_ITEMS:
				sequence_PermissionsItems(context, (PermissionsItems) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_TYPE_ARRAY:
				sequence_PermissionsTypeArray(context, (PermissionsTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_TYPE_BOOLEAN:
				sequence_PermissionsTypeBoolean(context, (PermissionsTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_TYPE_INTEGER:
				sequence_PermissionsTypeInteger(context, (PermissionsTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_TYPE_NULL:
				sequence_PermissionsTypeNull(context, (PermissionsTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_TYPE_NUMBER:
				sequence_PermissionsTypeNumber(context, (PermissionsTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_TYPE_OBJECT:
				sequence_PermissionsTypeObject(context, (PermissionsTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.PERMISSIONS_TYPE_STRING:
				sequence_PermissionsTypeString(context, (PermissionsTypeString) semanticObject); 
				return; 
			case GithubwfPackage.SHELL:
				sequence_Shell(context, (Shell) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_ADDITIONAL_PROPERTIES:
				sequence_ShellAdditionalProperties(context, (ShellAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_ITEMS:
				sequence_ShellItems(context, (ShellItems) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_TYPE_ARRAY:
				sequence_ShellTypeArray(context, (ShellTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_TYPE_BOOLEAN:
				sequence_ShellTypeBoolean(context, (ShellTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_TYPE_INTEGER:
				sequence_ShellTypeInteger(context, (ShellTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_TYPE_NULL:
				sequence_ShellTypeNull(context, (ShellTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_TYPE_NUMBER:
				sequence_ShellTypeNumber(context, (ShellTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_TYPE_OBJECT:
				sequence_ShellTypeObject(context, (ShellTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_TYPE_STRING:
				sequence_ShellTypeString(context, (ShellTypeString) semanticObject); 
				return; 
			case GithubwfPackage.WORKING_45DIRECTORY:
				sequence_Working_45directory(context, (Working_45directory) semanticObject); 
				return; 
			}
		else if (epackage == JsonMMPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JsonMMPackage.ARRAY_VALUE:
				sequence_ArrayValue(context, (ArrayValue) semanticObject); 
				return; 
			case JsonMMPackage.BOOLEAN_VALUE:
				sequence_BooleanValue(context, (BooleanValue) semanticObject); 
				return; 
			case JsonMMPackage.JSON_DOCUMENT:
				sequence_JsonDocument(context, (JsonDocument) semanticObject); 
				return; 
			case JsonMMPackage.KEY_VALUE_PAIR:
				sequence_KeyValuePair(context, (KeyValuePair) semanticObject); 
				return; 
			case JsonMMPackage.NULL_VALUE:
				sequence_NullValue(context, (NullValue) semanticObject); 
				return; 
			case JsonMMPackage.NUMBER_VALUE:
				sequence_NumberValue(context, (NumberValue) semanticObject); 
				return; 
			case JsonMMPackage.OBJECT_VALUE:
				sequence_ObjectValue(context, (ObjectValue) semanticObject); 
				return; 
			case JsonMMPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns ArrayValue
	 *     ArrayValue returns ArrayValue
	 *
	 * Constraint:
	 *     (value+=Value value+=Value*)?
	 * </pre>
	 */
	protected void sequence_ArrayValue(ISerializationContext context, ArrayValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns BooleanValue
	 *     BooleanValue returns BooleanValue
	 *
	 * Constraint:
	 *     value=EBoolean
	 * </pre>
	 */
	protected void sequence_BooleanValue(ISerializationContext context, BooleanValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanValueAccess().getValueEBooleanParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DefaultsRunPropertiesAbstract returns DefaultsRunShell
	 *     DefaultsRunShell returns DefaultsRunShell
	 *
	 * Constraint:
	 *     shell=Shell
	 * </pre>
	 */
	protected void sequence_DefaultsRunShell(ISerializationContext context, DefaultsRunShell semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getDefaultsRunShell_Shell()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getDefaultsRunShell_Shell()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefaultsRunShellAccess().getShellShellParserRuleCall_2_0(), semanticObject.getShell());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DefaultsRunPropertiesAbstract returns DefaultsRunWorking_45directory
	 *     DefaultsRunWorking_45directory returns DefaultsRunWorking_45directory
	 *
	 * Constraint:
	 *     working_45directory=Working_45directory
	 * </pre>
	 */
	protected void sequence_DefaultsRunWorking_45directory(ISerializationContext context, DefaultsRunWorking_45directory semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getDefaultsRunWorking_45directory_Working_45directory()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getDefaultsRunWorking_45directory_Working_45directory()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefaultsRunWorking_45directoryAccess().getWorking_45directoryWorking_45directoryParserRuleCall_2_0(), semanticObject.getWorking_45directory());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DefaultsPropertiesAbstract returns DefaultsRun
	 *     DefaultsRun returns DefaultsRun
	 *
	 * Constraint:
	 *     (run+=DefaultsRunPropertiesAbstract run+=DefaultsRunPropertiesAbstract*)
	 * </pre>
	 */
	protected void sequence_DefaultsRun(ISerializationContext context, DefaultsRun semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Defaults returns Defaults
	 *
	 * Constraint:
	 *     (defaults+=DefaultsPropertiesAbstract defaults+=DefaultsPropertiesAbstract*)
	 * </pre>
	 */
	protected void sequence_Defaults(ISerializationContext context, Defaults semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnvPropertiesAbstract returns EnvAdditionalProperties
	 *     EnvAdditionalProperties returns EnvAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 * </pre>
	 */
	protected void sequence_EnvAdditionalProperties(ISerializationContext context, EnvAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getEnvAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnvItems returns EnvItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 * </pre>
	 */
	protected void sequence_EnvItems(ISerializationContext context, EnvItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnvAbstract returns EnvTypeArray
	 *     EnvTypeArray returns EnvTypeArray
	 *
	 * Constraint:
	 *     (env+=EnvItems env+=EnvItems*)?
	 * </pre>
	 */
	protected void sequence_EnvTypeArray(ISerializationContext context, EnvTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnvAbstract returns EnvTypeBoolean
	 *     EnvTypeBoolean returns EnvTypeBoolean
	 *
	 * Constraint:
	 *     env=EBooleanObject
	 * </pre>
	 */
	protected void sequence_EnvTypeBoolean(ISerializationContext context, EnvTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeBoolean_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeBoolean_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeBooleanAccess().getEnvEBooleanObjectParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnvAbstract returns EnvTypeInteger
	 *     EnvTypeInteger returns EnvTypeInteger
	 *
	 * Constraint:
	 *     env=EDoubleObject
	 * </pre>
	 */
	protected void sequence_EnvTypeInteger(ISerializationContext context, EnvTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeInteger_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeInteger_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeIntegerAccess().getEnvEDoubleObjectParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnvAbstract returns EnvTypeNull
	 *     EnvTypeNull returns EnvTypeNull
	 *
	 * Constraint:
	 *     env=NullValue
	 * </pre>
	 */
	protected void sequence_EnvTypeNull(ISerializationContext context, EnvTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNull_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNull_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeNullAccess().getEnvNullValueParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnvAbstract returns EnvTypeNumber
	 *     EnvTypeNumber returns EnvTypeNumber
	 *
	 * Constraint:
	 *     env=EDoubleObject
	 * </pre>
	 */
	protected void sequence_EnvTypeNumber(ISerializationContext context, EnvTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNumber_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNumber_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeNumberAccess().getEnvEDoubleObjectParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnvAbstract returns EnvTypeObject
	 *     EnvTypeObject returns EnvTypeObject
	 *
	 * Constraint:
	 *     (env+=EnvPropertiesAbstract env+=EnvPropertiesAbstract*)?
	 * </pre>
	 */
	protected void sequence_EnvTypeObject(ISerializationContext context, EnvTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnvAbstract returns EnvTypeString
	 *     EnvTypeString returns EnvTypeString
	 *
	 * Constraint:
	 *     env=EString
	 * </pre>
	 */
	protected void sequence_EnvTypeString(ISerializationContext context, EnvTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeString_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeString_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeStringAccess().getEnvEStringParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Env returns Env
	 *
	 * Constraint:
	 *     env=EnvAbstract
	 * </pre>
	 */
	protected void sequence_Env(ISerializationContext context, Env semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnv_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnv_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvAccess().getEnvEnvAbstractParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootConcurrencyPropertiesAbstract returns GithubwfRootConcurrencyAdditionalProperties
	 *     GithubwfRootConcurrencyAdditionalProperties returns GithubwfRootConcurrencyAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 * </pre>
	 */
	protected void sequence_GithubwfRootConcurrencyAdditionalProperties(ISerializationContext context, GithubwfRootConcurrencyAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootConcurrencyAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootConcurrencyAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootConcurrencyAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootConcurrencyAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootConcurrencyAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getGithubwfRootConcurrencyAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootConcurrencyItems returns GithubwfRootConcurrencyItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 * </pre>
	 */
	protected void sequence_GithubwfRootConcurrencyItems(ISerializationContext context, GithubwfRootConcurrencyItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootConcurrencyItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootConcurrencyItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootConcurrencyItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootConcurrencyAbstract returns GithubwfRootConcurrencyTypeArray
	 *     GithubwfRootConcurrencyTypeArray returns GithubwfRootConcurrencyTypeArray
	 *
	 * Constraint:
	 *     (concurrency+=GithubwfRootConcurrencyItems concurrency+=GithubwfRootConcurrencyItems*)?
	 * </pre>
	 */
	protected void sequence_GithubwfRootConcurrencyTypeArray(ISerializationContext context, GithubwfRootConcurrencyTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootConcurrencyAbstract returns GithubwfRootConcurrencyTypeBoolean
	 *     GithubwfRootConcurrencyTypeBoolean returns GithubwfRootConcurrencyTypeBoolean
	 *
	 * Constraint:
	 *     concurrency=EBooleanObject
	 * </pre>
	 */
	protected void sequence_GithubwfRootConcurrencyTypeBoolean(ISerializationContext context, GithubwfRootConcurrencyTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootConcurrencyTypeBoolean_Concurrency()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootConcurrencyTypeBoolean_Concurrency()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootConcurrencyTypeBooleanAccess().getConcurrencyEBooleanObjectParserRuleCall_2_0(), semanticObject.getConcurrency());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootConcurrencyAbstract returns GithubwfRootConcurrencyTypeInteger
	 *     GithubwfRootConcurrencyTypeInteger returns GithubwfRootConcurrencyTypeInteger
	 *
	 * Constraint:
	 *     concurrency=EDoubleObject
	 * </pre>
	 */
	protected void sequence_GithubwfRootConcurrencyTypeInteger(ISerializationContext context, GithubwfRootConcurrencyTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootConcurrencyTypeInteger_Concurrency()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootConcurrencyTypeInteger_Concurrency()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootConcurrencyTypeIntegerAccess().getConcurrencyEDoubleObjectParserRuleCall_2_0(), semanticObject.getConcurrency());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootConcurrencyAbstract returns GithubwfRootConcurrencyTypeNull
	 *     GithubwfRootConcurrencyTypeNull returns GithubwfRootConcurrencyTypeNull
	 *
	 * Constraint:
	 *     concurrency=NullValue
	 * </pre>
	 */
	protected void sequence_GithubwfRootConcurrencyTypeNull(ISerializationContext context, GithubwfRootConcurrencyTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootConcurrencyTypeNull_Concurrency()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootConcurrencyTypeNull_Concurrency()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootConcurrencyTypeNullAccess().getConcurrencyNullValueParserRuleCall_2_0(), semanticObject.getConcurrency());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootConcurrencyAbstract returns GithubwfRootConcurrencyTypeNumber
	 *     GithubwfRootConcurrencyTypeNumber returns GithubwfRootConcurrencyTypeNumber
	 *
	 * Constraint:
	 *     concurrency=EDoubleObject
	 * </pre>
	 */
	protected void sequence_GithubwfRootConcurrencyTypeNumber(ISerializationContext context, GithubwfRootConcurrencyTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootConcurrencyTypeNumber_Concurrency()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootConcurrencyTypeNumber_Concurrency()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootConcurrencyTypeNumberAccess().getConcurrencyEDoubleObjectParserRuleCall_2_0(), semanticObject.getConcurrency());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootConcurrencyAbstract returns GithubwfRootConcurrencyTypeObject
	 *     GithubwfRootConcurrencyTypeObject returns GithubwfRootConcurrencyTypeObject
	 *
	 * Constraint:
	 *     (concurrency+=GithubwfRootConcurrencyPropertiesAbstract concurrency+=GithubwfRootConcurrencyPropertiesAbstract*)?
	 * </pre>
	 */
	protected void sequence_GithubwfRootConcurrencyTypeObject(ISerializationContext context, GithubwfRootConcurrencyTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootConcurrencyAbstract returns GithubwfRootConcurrencyTypeString
	 *     GithubwfRootConcurrencyTypeString returns GithubwfRootConcurrencyTypeString
	 *
	 * Constraint:
	 *     concurrency=EString
	 * </pre>
	 */
	protected void sequence_GithubwfRootConcurrencyTypeString(ISerializationContext context, GithubwfRootConcurrencyTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootConcurrencyTypeString_Concurrency()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootConcurrencyTypeString_Concurrency()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootConcurrencyTypeStringAccess().getConcurrencyEStringParserRuleCall_2_0(), semanticObject.getConcurrency());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootPropertiesAbstract returns GithubwfRootConcurrency
	 *     GithubwfRootConcurrency returns GithubwfRootConcurrency
	 *
	 * Constraint:
	 *     concurrency=GithubwfRootConcurrencyAbstract
	 * </pre>
	 */
	protected void sequence_GithubwfRootConcurrency(ISerializationContext context, GithubwfRootConcurrency semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootConcurrency_Concurrency()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootConcurrency_Concurrency()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootConcurrencyAccess().getConcurrencyGithubwfRootConcurrencyAbstractParserRuleCall_0(), semanticObject.getConcurrency());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootPropertiesAbstract returns GithubwfRootDefaults
	 *     GithubwfRootDefaults returns GithubwfRootDefaults
	 *
	 * Constraint:
	 *     defaults=Defaults
	 * </pre>
	 */
	protected void sequence_GithubwfRootDefaults(ISerializationContext context, GithubwfRootDefaults semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootDefaults_Defaults()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootDefaults_Defaults()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootDefaultsAccess().getDefaultsDefaultsParserRuleCall_2_0(), semanticObject.getDefaults());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootPropertiesAbstract returns GithubwfRootEnv
	 *     GithubwfRootEnv returns GithubwfRootEnv
	 *
	 * Constraint:
	 *     env=Env
	 * </pre>
	 */
	protected void sequence_GithubwfRootEnv(ISerializationContext context, GithubwfRootEnv semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootEnv_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootEnv_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootEnvAccess().getEnvEnvParserRuleCall_2_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootJobsPatternProperties0PropertiesAbstract returns GithubwfRootJobsPatternProperties0AdditionalProperties
	 *     GithubwfRootJobsPatternProperties0AdditionalProperties returns GithubwfRootJobsPatternProperties0AdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 * </pre>
	 */
	protected void sequence_GithubwfRootJobsPatternProperties0AdditionalProperties(ISerializationContext context, GithubwfRootJobsPatternProperties0AdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0AdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0AdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0AdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0AdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootJobsPatternProperties0AdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getGithubwfRootJobsPatternProperties0AdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootJobsPatternProperties0Items returns GithubwfRootJobsPatternProperties0Items
	 *
	 * Constraint:
	 *     items=JsonDocument
	 * </pre>
	 */
	protected void sequence_GithubwfRootJobsPatternProperties0Items(ISerializationContext context, GithubwfRootJobsPatternProperties0Items semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0Items_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0Items_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootJobsPatternProperties0ItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootJobsPatternProperties0Abstract returns GithubwfRootJobsPatternProperties0TypeArray
	 *     GithubwfRootJobsPatternProperties0TypeArray returns GithubwfRootJobsPatternProperties0TypeArray
	 *
	 * Constraint:
	 *     (patternProperties0+=GithubwfRootJobsPatternProperties0Items patternProperties0+=GithubwfRootJobsPatternProperties0Items*)?
	 * </pre>
	 */
	protected void sequence_GithubwfRootJobsPatternProperties0TypeArray(ISerializationContext context, GithubwfRootJobsPatternProperties0TypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootJobsPatternProperties0Abstract returns GithubwfRootJobsPatternProperties0TypeBoolean
	 *     GithubwfRootJobsPatternProperties0TypeBoolean returns GithubwfRootJobsPatternProperties0TypeBoolean
	 *
	 * Constraint:
	 *     patternProperties0=EBooleanObject
	 * </pre>
	 */
	protected void sequence_GithubwfRootJobsPatternProperties0TypeBoolean(ISerializationContext context, GithubwfRootJobsPatternProperties0TypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0TypeBoolean_PatternProperties0()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0TypeBoolean_PatternProperties0()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootJobsPatternProperties0TypeBooleanAccess().getPatternProperties0EBooleanObjectParserRuleCall_0(), semanticObject.getPatternProperties0());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootJobsPatternProperties0Abstract returns GithubwfRootJobsPatternProperties0TypeInteger
	 *     GithubwfRootJobsPatternProperties0TypeInteger returns GithubwfRootJobsPatternProperties0TypeInteger
	 *
	 * Constraint:
	 *     patternProperties0=EDoubleObject
	 * </pre>
	 */
	protected void sequence_GithubwfRootJobsPatternProperties0TypeInteger(ISerializationContext context, GithubwfRootJobsPatternProperties0TypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0TypeInteger_PatternProperties0()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0TypeInteger_PatternProperties0()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootJobsPatternProperties0TypeIntegerAccess().getPatternProperties0EDoubleObjectParserRuleCall_0(), semanticObject.getPatternProperties0());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootJobsPatternProperties0Abstract returns GithubwfRootJobsPatternProperties0TypeNull
	 *     GithubwfRootJobsPatternProperties0TypeNull returns GithubwfRootJobsPatternProperties0TypeNull
	 *
	 * Constraint:
	 *     patternProperties0=NullValue
	 * </pre>
	 */
	protected void sequence_GithubwfRootJobsPatternProperties0TypeNull(ISerializationContext context, GithubwfRootJobsPatternProperties0TypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0TypeNull_PatternProperties0()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0TypeNull_PatternProperties0()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootJobsPatternProperties0TypeNullAccess().getPatternProperties0NullValueParserRuleCall_0(), semanticObject.getPatternProperties0());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootJobsPatternProperties0Abstract returns GithubwfRootJobsPatternProperties0TypeNumber
	 *     GithubwfRootJobsPatternProperties0TypeNumber returns GithubwfRootJobsPatternProperties0TypeNumber
	 *
	 * Constraint:
	 *     patternProperties0=EDoubleObject
	 * </pre>
	 */
	protected void sequence_GithubwfRootJobsPatternProperties0TypeNumber(ISerializationContext context, GithubwfRootJobsPatternProperties0TypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0TypeNumber_PatternProperties0()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0TypeNumber_PatternProperties0()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootJobsPatternProperties0TypeNumberAccess().getPatternProperties0EDoubleObjectParserRuleCall_0(), semanticObject.getPatternProperties0());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootJobsPatternProperties0Abstract returns GithubwfRootJobsPatternProperties0TypeObject
	 *     GithubwfRootJobsPatternProperties0TypeObject returns GithubwfRootJobsPatternProperties0TypeObject
	 *
	 * Constraint:
	 *     (
	 *         patternProperties0+=GithubwfRootJobsPatternProperties0PropertiesAbstract 
	 *         patternProperties0+=GithubwfRootJobsPatternProperties0PropertiesAbstract*
	 *     )?
	 * </pre>
	 */
	protected void sequence_GithubwfRootJobsPatternProperties0TypeObject(ISerializationContext context, GithubwfRootJobsPatternProperties0TypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootJobsPatternProperties0Abstract returns GithubwfRootJobsPatternProperties0TypeString
	 *     GithubwfRootJobsPatternProperties0TypeString returns GithubwfRootJobsPatternProperties0TypeString
	 *
	 * Constraint:
	 *     patternProperties0=EString
	 * </pre>
	 */
	protected void sequence_GithubwfRootJobsPatternProperties0TypeString(ISerializationContext context, GithubwfRootJobsPatternProperties0TypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0TypeString_PatternProperties0()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0TypeString_PatternProperties0()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootJobsPatternProperties0TypeStringAccess().getPatternProperties0EStringParserRuleCall_0(), semanticObject.getPatternProperties0());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootJobsPropertiesAbstract returns GithubwfRootJobsPatternProperties0
	 *     GithubwfRootJobsPatternProperties0 returns GithubwfRootJobsPatternProperties0
	 *
	 * Constraint:
	 *     (key=EString patternProperties0=GithubwfRootJobsPatternProperties0Abstract)
	 * </pre>
	 */
	protected void sequence_GithubwfRootJobsPatternProperties0(ISerializationContext context, GithubwfRootJobsPatternProperties0 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0_PatternProperties0()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootJobsPatternProperties0_PatternProperties0()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootJobsPatternProperties0Access().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getGithubwfRootJobsPatternProperties0Access().getPatternProperties0GithubwfRootJobsPatternProperties0AbstractParserRuleCall_2_0(), semanticObject.getPatternProperties0());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootPropertiesAbstract returns GithubwfRootJobs
	 *     GithubwfRootJobs returns GithubwfRootJobs
	 *
	 * Constraint:
	 *     (jobs+=GithubwfRootJobsPropertiesAbstract jobs+=GithubwfRootJobsPropertiesAbstract*)
	 * </pre>
	 */
	protected void sequence_GithubwfRootJobs(ISerializationContext context, GithubwfRootJobs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootPropertiesAbstract returns GithubwfRootName
	 *     GithubwfRootName returns GithubwfRootName
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_GithubwfRootName(ISerializationContext context, GithubwfRootName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootName_Name()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootName_Name()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootNameAccess().getNameEStringParserRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootOnPropertiesAbstract returns GithubwfRootOnAdditionalProperties
	 *     GithubwfRootOnAdditionalProperties returns GithubwfRootOnAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 * </pre>
	 */
	protected void sequence_GithubwfRootOnAdditionalProperties(ISerializationContext context, GithubwfRootOnAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootOnAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootOnAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootOnAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootOnAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootOnAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getGithubwfRootOnAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootOnItems returns GithubwfRootOnItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 * </pre>
	 */
	protected void sequence_GithubwfRootOnItems(ISerializationContext context, GithubwfRootOnItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootOnItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootOnItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootOnItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootOnAbstract returns GithubwfRootOnTypeArray
	 *     GithubwfRootOnTypeArray returns GithubwfRootOnTypeArray
	 *
	 * Constraint:
	 *     (on+=GithubwfRootOnItems on+=GithubwfRootOnItems*)?
	 * </pre>
	 */
	protected void sequence_GithubwfRootOnTypeArray(ISerializationContext context, GithubwfRootOnTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootOnAbstract returns GithubwfRootOnTypeBoolean
	 *     GithubwfRootOnTypeBoolean returns GithubwfRootOnTypeBoolean
	 *
	 * Constraint:
	 *     on=EBooleanObject
	 * </pre>
	 */
	protected void sequence_GithubwfRootOnTypeBoolean(ISerializationContext context, GithubwfRootOnTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootOnTypeBoolean_On()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootOnTypeBoolean_On()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootOnTypeBooleanAccess().getOnEBooleanObjectParserRuleCall_2_0(), semanticObject.getOn());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootOnAbstract returns GithubwfRootOnTypeInteger
	 *     GithubwfRootOnTypeInteger returns GithubwfRootOnTypeInteger
	 *
	 * Constraint:
	 *     on=EDoubleObject
	 * </pre>
	 */
	protected void sequence_GithubwfRootOnTypeInteger(ISerializationContext context, GithubwfRootOnTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootOnTypeInteger_On()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootOnTypeInteger_On()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootOnTypeIntegerAccess().getOnEDoubleObjectParserRuleCall_2_0(), semanticObject.getOn());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootOnAbstract returns GithubwfRootOnTypeNull
	 *     GithubwfRootOnTypeNull returns GithubwfRootOnTypeNull
	 *
	 * Constraint:
	 *     on=NullValue
	 * </pre>
	 */
	protected void sequence_GithubwfRootOnTypeNull(ISerializationContext context, GithubwfRootOnTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootOnTypeNull_On()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootOnTypeNull_On()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootOnTypeNullAccess().getOnNullValueParserRuleCall_2_0(), semanticObject.getOn());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootOnAbstract returns GithubwfRootOnTypeNumber
	 *     GithubwfRootOnTypeNumber returns GithubwfRootOnTypeNumber
	 *
	 * Constraint:
	 *     on=EDoubleObject
	 * </pre>
	 */
	protected void sequence_GithubwfRootOnTypeNumber(ISerializationContext context, GithubwfRootOnTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootOnTypeNumber_On()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootOnTypeNumber_On()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootOnTypeNumberAccess().getOnEDoubleObjectParserRuleCall_2_0(), semanticObject.getOn());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootOnAbstract returns GithubwfRootOnTypeObject
	 *     GithubwfRootOnTypeObject returns GithubwfRootOnTypeObject
	 *
	 * Constraint:
	 *     (on+=GithubwfRootOnPropertiesAbstract on+=GithubwfRootOnPropertiesAbstract*)?
	 * </pre>
	 */
	protected void sequence_GithubwfRootOnTypeObject(ISerializationContext context, GithubwfRootOnTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootOnAbstract returns GithubwfRootOnTypeString
	 *     GithubwfRootOnTypeString returns GithubwfRootOnTypeString
	 *
	 * Constraint:
	 *     on=EString
	 * </pre>
	 */
	protected void sequence_GithubwfRootOnTypeString(ISerializationContext context, GithubwfRootOnTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootOnTypeString_On()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootOnTypeString_On()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootOnTypeStringAccess().getOnEStringParserRuleCall_2_0(), semanticObject.getOn());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootPropertiesAbstract returns GithubwfRootOn
	 *     GithubwfRootOn returns GithubwfRootOn
	 *
	 * Constraint:
	 *     on=GithubwfRootOnAbstract
	 * </pre>
	 */
	protected void sequence_GithubwfRootOn(ISerializationContext context, GithubwfRootOn semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootOn_On()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootOn_On()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootOnAccess().getOnGithubwfRootOnAbstractParserRuleCall_0(), semanticObject.getOn());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootPropertiesAbstract returns GithubwfRootPermissions
	 *     GithubwfRootPermissions returns GithubwfRootPermissions
	 *
	 * Constraint:
	 *     permissions=Permissions
	 * </pre>
	 */
	protected void sequence_GithubwfRootPermissions(ISerializationContext context, GithubwfRootPermissions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootPermissions_Permissions()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootPermissions_Permissions()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootPermissionsAccess().getPermissionsPermissionsParserRuleCall_2_0(), semanticObject.getPermissions());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRootPropertiesAbstract returns GithubwfRootRun_45name
	 *     GithubwfRootRun_45name returns GithubwfRootRun_45name
	 *
	 * Constraint:
	 *     run_45name=EString
	 * </pre>
	 */
	protected void sequence_GithubwfRootRun_45name(ISerializationContext context, GithubwfRootRun_45name semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootRun_45name_Run_45name()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getGithubwfRootRun_45name_Run_45name()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGithubwfRootRun_45nameAccess().getRun_45nameEStringParserRuleCall_2_0(), semanticObject.getRun_45name());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GithubwfRoot returns GithubwfRoot
	 *
	 * Constraint:
	 *     (githubwfRoot+=GithubwfRootPropertiesAbstract githubwfRoot+=GithubwfRootPropertiesAbstract*)?
	 * </pre>
	 */
	protected void sequence_GithubwfRoot(ISerializationContext context, GithubwfRoot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JsonDocument returns JsonDocument
	 *
	 * Constraint:
	 *     value=Value
	 * </pre>
	 */
	protected void sequence_JsonDocument(ISerializationContext context, JsonDocument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonDocumentAccess().getValueValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     KeyValuePair returns KeyValuePair
	 *
	 * Constraint:
	 *     (key=EString value=Value)
	 * </pre>
	 */
	protected void sequence_KeyValuePair(ISerializationContext context, KeyValuePair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeyValuePairAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getKeyValuePairAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns NullValue
	 *     NullValue returns NullValue
	 *
	 * Constraint:
	 *     value=NullEnum
	 * </pre>
	 */
	protected void sequence_NullValue(ISerializationContext context, NullValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNullValueAccess().getValueNullEnumEnumRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns NumberValue
	 *     NumberValue returns NumberValue
	 *
	 * Constraint:
	 *     value=EDouble
	 * </pre>
	 */
	protected void sequence_NumberValue(ISerializationContext context, NumberValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberValueAccess().getValueEDoubleParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns ObjectValue
	 *     ObjectValue returns ObjectValue
	 *
	 * Constraint:
	 *     (keyvaluepair+=KeyValuePair keyvaluepair+=KeyValuePair*)?
	 * </pre>
	 */
	protected void sequence_ObjectValue(ISerializationContext context, ObjectValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PermissionsPropertiesAbstract returns PermissionsAdditionalProperties
	 *     PermissionsAdditionalProperties returns PermissionsAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 * </pre>
	 */
	protected void sequence_PermissionsAdditionalProperties(ISerializationContext context, PermissionsAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissionsAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getPermissionsAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PermissionsItems returns PermissionsItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 * </pre>
	 */
	protected void sequence_PermissionsItems(ISerializationContext context, PermissionsItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissionsItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PermissionsAbstract returns PermissionsTypeArray
	 *     PermissionsTypeArray returns PermissionsTypeArray
	 *
	 * Constraint:
	 *     (permissions+=PermissionsItems permissions+=PermissionsItems*)?
	 * </pre>
	 */
	protected void sequence_PermissionsTypeArray(ISerializationContext context, PermissionsTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PermissionsAbstract returns PermissionsTypeBoolean
	 *     PermissionsTypeBoolean returns PermissionsTypeBoolean
	 *
	 * Constraint:
	 *     permissions=EBooleanObject
	 * </pre>
	 */
	protected void sequence_PermissionsTypeBoolean(ISerializationContext context, PermissionsTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsTypeBoolean_Permissions()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsTypeBoolean_Permissions()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissionsTypeBooleanAccess().getPermissionsEBooleanObjectParserRuleCall_0(), semanticObject.getPermissions());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PermissionsAbstract returns PermissionsTypeInteger
	 *     PermissionsTypeInteger returns PermissionsTypeInteger
	 *
	 * Constraint:
	 *     permissions=EDoubleObject
	 * </pre>
	 */
	protected void sequence_PermissionsTypeInteger(ISerializationContext context, PermissionsTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsTypeInteger_Permissions()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsTypeInteger_Permissions()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissionsTypeIntegerAccess().getPermissionsEDoubleObjectParserRuleCall_0(), semanticObject.getPermissions());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PermissionsAbstract returns PermissionsTypeNull
	 *     PermissionsTypeNull returns PermissionsTypeNull
	 *
	 * Constraint:
	 *     permissions=NullValue
	 * </pre>
	 */
	protected void sequence_PermissionsTypeNull(ISerializationContext context, PermissionsTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsTypeNull_Permissions()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsTypeNull_Permissions()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissionsTypeNullAccess().getPermissionsNullValueParserRuleCall_0(), semanticObject.getPermissions());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PermissionsAbstract returns PermissionsTypeNumber
	 *     PermissionsTypeNumber returns PermissionsTypeNumber
	 *
	 * Constraint:
	 *     permissions=EDoubleObject
	 * </pre>
	 */
	protected void sequence_PermissionsTypeNumber(ISerializationContext context, PermissionsTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsTypeNumber_Permissions()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsTypeNumber_Permissions()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissionsTypeNumberAccess().getPermissionsEDoubleObjectParserRuleCall_0(), semanticObject.getPermissions());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PermissionsAbstract returns PermissionsTypeObject
	 *     PermissionsTypeObject returns PermissionsTypeObject
	 *
	 * Constraint:
	 *     (permissions+=PermissionsPropertiesAbstract permissions+=PermissionsPropertiesAbstract*)?
	 * </pre>
	 */
	protected void sequence_PermissionsTypeObject(ISerializationContext context, PermissionsTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PermissionsAbstract returns PermissionsTypeString
	 *     PermissionsTypeString returns PermissionsTypeString
	 *
	 * Constraint:
	 *     permissions=EString
	 * </pre>
	 */
	protected void sequence_PermissionsTypeString(ISerializationContext context, PermissionsTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsTypeString_Permissions()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissionsTypeString_Permissions()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissionsTypeStringAccess().getPermissionsEStringParserRuleCall_0(), semanticObject.getPermissions());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Permissions returns Permissions
	 *
	 * Constraint:
	 *     permissions=PermissionsAbstract
	 * </pre>
	 */
	protected void sequence_Permissions(ISerializationContext context, Permissions semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_Permissions()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getPermissions_Permissions()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPermissionsAccess().getPermissionsPermissionsAbstractParserRuleCall_0(), semanticObject.getPermissions());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ShellPropertiesAbstract returns ShellAdditionalProperties
	 *     ShellAdditionalProperties returns ShellAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 * </pre>
	 */
	protected void sequence_ShellAdditionalProperties(ISerializationContext context, ShellAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getShellAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ShellItems returns ShellItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 * </pre>
	 */
	protected void sequence_ShellItems(ISerializationContext context, ShellItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ShellAbstract returns ShellTypeArray
	 *     ShellTypeArray returns ShellTypeArray
	 *
	 * Constraint:
	 *     (shell+=ShellItems shell+=ShellItems*)?
	 * </pre>
	 */
	protected void sequence_ShellTypeArray(ISerializationContext context, ShellTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ShellAbstract returns ShellTypeBoolean
	 *     ShellTypeBoolean returns ShellTypeBoolean
	 *
	 * Constraint:
	 *     shell=EBooleanObject
	 * </pre>
	 */
	protected void sequence_ShellTypeBoolean(ISerializationContext context, ShellTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeBoolean_Shell()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeBoolean_Shell()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellTypeBooleanAccess().getShellEBooleanObjectParserRuleCall_0(), semanticObject.getShell());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ShellAbstract returns ShellTypeInteger
	 *     ShellTypeInteger returns ShellTypeInteger
	 *
	 * Constraint:
	 *     shell=EDoubleObject
	 * </pre>
	 */
	protected void sequence_ShellTypeInteger(ISerializationContext context, ShellTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeInteger_Shell()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeInteger_Shell()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellTypeIntegerAccess().getShellEDoubleObjectParserRuleCall_0(), semanticObject.getShell());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ShellAbstract returns ShellTypeNull
	 *     ShellTypeNull returns ShellTypeNull
	 *
	 * Constraint:
	 *     shell=NullValue
	 * </pre>
	 */
	protected void sequence_ShellTypeNull(ISerializationContext context, ShellTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeNull_Shell()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeNull_Shell()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellTypeNullAccess().getShellNullValueParserRuleCall_0(), semanticObject.getShell());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ShellAbstract returns ShellTypeNumber
	 *     ShellTypeNumber returns ShellTypeNumber
	 *
	 * Constraint:
	 *     shell=EDoubleObject
	 * </pre>
	 */
	protected void sequence_ShellTypeNumber(ISerializationContext context, ShellTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeNumber_Shell()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeNumber_Shell()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellTypeNumberAccess().getShellEDoubleObjectParserRuleCall_0(), semanticObject.getShell());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ShellAbstract returns ShellTypeObject
	 *     ShellTypeObject returns ShellTypeObject
	 *
	 * Constraint:
	 *     (shell+=ShellPropertiesAbstract shell+=ShellPropertiesAbstract*)?
	 * </pre>
	 */
	protected void sequence_ShellTypeObject(ISerializationContext context, ShellTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ShellAbstract returns ShellTypeString
	 *     ShellTypeString returns ShellTypeString
	 *
	 * Constraint:
	 *     shell=EString
	 * </pre>
	 */
	protected void sequence_ShellTypeString(ISerializationContext context, ShellTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeString_Shell()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeString_Shell()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellTypeStringAccess().getShellEStringParserRuleCall_0(), semanticObject.getShell());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Shell returns Shell
	 *
	 * Constraint:
	 *     shell=ShellAbstract
	 * </pre>
	 */
	protected void sequence_Shell(ISerializationContext context, Shell semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShell_Shell()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShell_Shell()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellAccess().getShellShellAbstractParserRuleCall_0(), semanticObject.getShell());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=EString
	 * </pre>
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueEStringParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Working_45directory returns Working_45directory
	 *
	 * Constraint:
	 *     working_45directory=EString
	 * </pre>
	 */
	protected void sequence_Working_45directory(ISerializationContext context, Working_45directory semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getWorking_45directory_Working_45directory()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getWorking_45directory_Working_45directory()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWorking_45directoryAccess().getWorking_45directoryEStringParserRuleCall_0(), semanticObject.getWorking_45directory());
		feeder.finish();
	}
	
	
}
