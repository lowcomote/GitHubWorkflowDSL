/*
 * generated by Xtext 2.23.0
 */
package githubwf.githubwf.serializer;

import com.google.inject.Inject;
import githubwf.Env;
import githubwf.EnvAdditionalProperties;
import githubwf.EnvItems;
import githubwf.EnvTypeArray;
import githubwf.EnvTypeBoolean;
import githubwf.EnvTypeInteger;
import githubwf.EnvTypeNull;
import githubwf.EnvTypeNumber;
import githubwf.EnvTypeObject;
import githubwf.EnvTypeString;
import githubwf.GithubwfPackage;
import githubwf.ReusableWorkflowCallJobSecretsOneOf0;
import githubwf.githubwf.services.ReusableWorkflowCallJobSecretsOneOf0GrammarAccess;
import java.util.Set;
import jsonMM.ArrayValue;
import jsonMM.BooleanValue;
import jsonMM.JsonDocument;
import jsonMM.JsonMMPackage;
import jsonMM.KeyValuePair;
import jsonMM.NullValue;
import jsonMM.NumberValue;
import jsonMM.ObjectValue;
import jsonMM.StringValue;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ReusableWorkflowCallJobSecretsOneOf0SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ReusableWorkflowCallJobSecretsOneOf0GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GithubwfPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GithubwfPackage.ENV:
				sequence_Env(context, (Env) semanticObject); 
				return; 
			case GithubwfPackage.ENV_ADDITIONAL_PROPERTIES:
				sequence_EnvAdditionalProperties(context, (EnvAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.ENV_ITEMS:
				sequence_EnvItems(context, (EnvItems) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_ARRAY:
				sequence_EnvTypeArray(context, (EnvTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_BOOLEAN:
				sequence_EnvTypeBoolean(context, (EnvTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_INTEGER:
				sequence_EnvTypeInteger(context, (EnvTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_NULL:
				sequence_EnvTypeNull(context, (EnvTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_NUMBER:
				sequence_EnvTypeNumber(context, (EnvTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_OBJECT:
				sequence_EnvTypeObject(context, (EnvTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_STRING:
				sequence_EnvTypeString(context, (EnvTypeString) semanticObject); 
				return; 
			case GithubwfPackage.REUSABLE_WORKFLOW_CALL_JOB_SECRETS_ONE_OF0:
				sequence_ReusableWorkflowCallJobSecretsOneOf0(context, (ReusableWorkflowCallJobSecretsOneOf0) semanticObject); 
				return; 
			}
		else if (epackage == JsonMMPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JsonMMPackage.ARRAY_VALUE:
				sequence_ArrayValue(context, (ArrayValue) semanticObject); 
				return; 
			case JsonMMPackage.BOOLEAN_VALUE:
				sequence_BooleanValue(context, (BooleanValue) semanticObject); 
				return; 
			case JsonMMPackage.JSON_DOCUMENT:
				sequence_JsonDocument(context, (JsonDocument) semanticObject); 
				return; 
			case JsonMMPackage.KEY_VALUE_PAIR:
				sequence_KeyValuePair(context, (KeyValuePair) semanticObject); 
				return; 
			case JsonMMPackage.NULL_VALUE:
				sequence_NullValue(context, (NullValue) semanticObject); 
				return; 
			case JsonMMPackage.NUMBER_VALUE:
				sequence_NumberValue(context, (NumberValue) semanticObject); 
				return; 
			case JsonMMPackage.OBJECT_VALUE:
				sequence_ObjectValue(context, (ObjectValue) semanticObject); 
				return; 
			case JsonMMPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Value returns ArrayValue
	 *     ArrayValue returns ArrayValue
	 *
	 * Constraint:
	 *     (value+=Value value+=Value*)?
	 */
	protected void sequence_ArrayValue(ISerializationContext context, ArrayValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns BooleanValue
	 *     BooleanValue returns BooleanValue
	 *
	 * Constraint:
	 *     value=EBoolean
	 */
	protected void sequence_BooleanValue(ISerializationContext context, BooleanValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanValueAccess().getValueEBooleanParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvPropertiesAbstract returns EnvAdditionalProperties
	 *     EnvAdditionalProperties returns EnvAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_EnvAdditionalProperties(ISerializationContext context, EnvAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getEnvAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvItems returns EnvItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_EnvItems(ISerializationContext context, EnvItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeArray
	 *     EnvTypeArray returns EnvTypeArray
	 *
	 * Constraint:
	 *     (env+=EnvItems env+=EnvItems*)?
	 */
	protected void sequence_EnvTypeArray(ISerializationContext context, EnvTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeBoolean
	 *     EnvTypeBoolean returns EnvTypeBoolean
	 *
	 * Constraint:
	 *     env=EBooleanObject
	 */
	protected void sequence_EnvTypeBoolean(ISerializationContext context, EnvTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeBoolean_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeBoolean_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeBooleanAccess().getEnvEBooleanObjectParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeInteger
	 *     EnvTypeInteger returns EnvTypeInteger
	 *
	 * Constraint:
	 *     env=EDoubleObject
	 */
	protected void sequence_EnvTypeInteger(ISerializationContext context, EnvTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeInteger_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeInteger_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeIntegerAccess().getEnvEDoubleObjectParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeNull
	 *     EnvTypeNull returns EnvTypeNull
	 *
	 * Constraint:
	 *     env=NullValue
	 */
	protected void sequence_EnvTypeNull(ISerializationContext context, EnvTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNull_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNull_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeNullAccess().getEnvNullValueParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeNumber
	 *     EnvTypeNumber returns EnvTypeNumber
	 *
	 * Constraint:
	 *     env=EDoubleObject
	 */
	protected void sequence_EnvTypeNumber(ISerializationContext context, EnvTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNumber_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNumber_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeNumberAccess().getEnvEDoubleObjectParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeObject
	 *     EnvTypeObject returns EnvTypeObject
	 *
	 * Constraint:
	 *     (env+=EnvPropertiesAbstract env+=EnvPropertiesAbstract*)?
	 */
	protected void sequence_EnvTypeObject(ISerializationContext context, EnvTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeString
	 *     EnvTypeString returns EnvTypeString
	 *
	 * Constraint:
	 *     env=EString
	 */
	protected void sequence_EnvTypeString(ISerializationContext context, EnvTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeString_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeString_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeStringAccess().getEnvEStringParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Env returns Env
	 *
	 * Constraint:
	 *     env=EnvAbstract
	 */
	protected void sequence_Env(ISerializationContext context, Env semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnv_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnv_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvAccess().getEnvEnvAbstractParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JsonDocument returns JsonDocument
	 *
	 * Constraint:
	 *     value=Value
	 */
	protected void sequence_JsonDocument(ISerializationContext context, JsonDocument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonDocumentAccess().getValueValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeyValuePair returns KeyValuePair
	 *
	 * Constraint:
	 *     (key=EString value=Value)
	 */
	protected void sequence_KeyValuePair(ISerializationContext context, KeyValuePair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeyValuePairAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getKeyValuePairAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NullValue
	 *     NullValue returns NullValue
	 *
	 * Constraint:
	 *     value=NullEnum
	 */
	protected void sequence_NullValue(ISerializationContext context, NullValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNullValueAccess().getValueNullEnumEnumRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NumberValue
	 *     NumberValue returns NumberValue
	 *
	 * Constraint:
	 *     value=EDouble
	 */
	protected void sequence_NumberValue(ISerializationContext context, NumberValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberValueAccess().getValueEDoubleParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns ObjectValue
	 *     ObjectValue returns ObjectValue
	 *
	 * Constraint:
	 *     (keyvaluepair+=KeyValuePair keyvaluepair+=KeyValuePair*)?
	 */
	protected void sequence_ObjectValue(ISerializationContext context, ObjectValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReusableWorkflowCallJobSecretsOneOf0 returns ReusableWorkflowCallJobSecretsOneOf0
	 *
	 * Constraint:
	 *     secrets=Env
	 */
	protected void sequence_ReusableWorkflowCallJobSecretsOneOf0(ISerializationContext context, ReusableWorkflowCallJobSecretsOneOf0 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobSecretsOneOf0_Secrets()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getReusableWorkflowCallJobSecretsOneOf0_Secrets()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReusableWorkflowCallJobSecretsOneOf0Access().getSecretsEnvParserRuleCall_2_0(), semanticObject.getSecrets());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=EString
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueEStringParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
