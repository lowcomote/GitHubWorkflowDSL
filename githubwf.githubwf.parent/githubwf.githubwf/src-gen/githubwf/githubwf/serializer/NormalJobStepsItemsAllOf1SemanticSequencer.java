/*
 * generated by Xtext 2.23.0
 */
package githubwf.githubwf.serializer;

import com.google.inject.Inject;
import githubwf.Env;
import githubwf.EnvAdditionalProperties;
import githubwf.EnvItems;
import githubwf.EnvTypeArray;
import githubwf.EnvTypeBoolean;
import githubwf.EnvTypeInteger;
import githubwf.EnvTypeNull;
import githubwf.EnvTypeNumber;
import githubwf.EnvTypeObject;
import githubwf.EnvTypeString;
import githubwf.GithubwfPackage;
import githubwf.NormalJobStepsItemsAllOf1;
import githubwf.NormalJobStepsItemsAllOf1Continue_45on_45error;
import githubwf.NormalJobStepsItemsAllOf1Continue_45on_45errorAdditionalProperties;
import githubwf.NormalJobStepsItemsAllOf1Continue_45on_45errorItems;
import githubwf.NormalJobStepsItemsAllOf1Continue_45on_45errorTypeArray;
import githubwf.NormalJobStepsItemsAllOf1Continue_45on_45errorTypeBoolean;
import githubwf.NormalJobStepsItemsAllOf1Continue_45on_45errorTypeInteger;
import githubwf.NormalJobStepsItemsAllOf1Continue_45on_45errorTypeNull;
import githubwf.NormalJobStepsItemsAllOf1Continue_45on_45errorTypeNumber;
import githubwf.NormalJobStepsItemsAllOf1Continue_45on_45errorTypeObject;
import githubwf.NormalJobStepsItemsAllOf1Continue_45on_45errorTypeString;
import githubwf.NormalJobStepsItemsAllOf1Env;
import githubwf.NormalJobStepsItemsAllOf1Id;
import githubwf.NormalJobStepsItemsAllOf1If;
import githubwf.NormalJobStepsItemsAllOf1IfTypeBoolean;
import githubwf.NormalJobStepsItemsAllOf1IfTypeNumber;
import githubwf.NormalJobStepsItemsAllOf1IfTypeString;
import githubwf.NormalJobStepsItemsAllOf1Name;
import githubwf.NormalJobStepsItemsAllOf1Run;
import githubwf.NormalJobStepsItemsAllOf1Shell;
import githubwf.NormalJobStepsItemsAllOf1Timeout_45minutes;
import githubwf.NormalJobStepsItemsAllOf1Uses;
import githubwf.NormalJobStepsItemsAllOf1With;
import githubwf.NormalJobStepsItemsAllOf1Working_45directory;
import githubwf.Shell;
import githubwf.ShellAdditionalProperties;
import githubwf.ShellItems;
import githubwf.ShellTypeArray;
import githubwf.ShellTypeBoolean;
import githubwf.ShellTypeInteger;
import githubwf.ShellTypeNull;
import githubwf.ShellTypeNumber;
import githubwf.ShellTypeObject;
import githubwf.ShellTypeString;
import githubwf.Working_45directory;
import githubwf.githubwf.services.NormalJobStepsItemsAllOf1GrammarAccess;
import java.util.Set;
import jsonMM.ArrayValue;
import jsonMM.BooleanValue;
import jsonMM.JsonDocument;
import jsonMM.JsonMMPackage;
import jsonMM.KeyValuePair;
import jsonMM.NullValue;
import jsonMM.NumberValue;
import jsonMM.ObjectValue;
import jsonMM.StringValue;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class NormalJobStepsItemsAllOf1SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private NormalJobStepsItemsAllOf1GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GithubwfPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GithubwfPackage.ENV:
				sequence_Env(context, (Env) semanticObject); 
				return; 
			case GithubwfPackage.ENV_ADDITIONAL_PROPERTIES:
				sequence_EnvAdditionalProperties(context, (EnvAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.ENV_ITEMS:
				sequence_EnvItems(context, (EnvItems) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_ARRAY:
				sequence_EnvTypeArray(context, (EnvTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_BOOLEAN:
				sequence_EnvTypeBoolean(context, (EnvTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_INTEGER:
				sequence_EnvTypeInteger(context, (EnvTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_NULL:
				sequence_EnvTypeNull(context, (EnvTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_NUMBER:
				sequence_EnvTypeNumber(context, (EnvTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_OBJECT:
				sequence_EnvTypeObject(context, (EnvTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.ENV_TYPE_STRING:
				sequence_EnvTypeString(context, (EnvTypeString) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1:
				sequence_NormalJobStepsItemsAllOf1(context, (NormalJobStepsItemsAllOf1) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_CONTINUE_45ON_45ERROR:
				sequence_NormalJobStepsItemsAllOf1Continue_45on_45error(context, (NormalJobStepsItemsAllOf1Continue_45on_45error) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_CONTINUE_45ON_45ERROR_ADDITIONAL_PROPERTIES:
				sequence_NormalJobStepsItemsAllOf1Continue_45on_45errorAdditionalProperties(context, (NormalJobStepsItemsAllOf1Continue_45on_45errorAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_CONTINUE_45ON_45ERROR_ITEMS:
				sequence_NormalJobStepsItemsAllOf1Continue_45on_45errorItems(context, (NormalJobStepsItemsAllOf1Continue_45on_45errorItems) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_CONTINUE_45ON_45ERROR_TYPE_ARRAY:
				sequence_NormalJobStepsItemsAllOf1Continue_45on_45errorTypeArray(context, (NormalJobStepsItemsAllOf1Continue_45on_45errorTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_CONTINUE_45ON_45ERROR_TYPE_BOOLEAN:
				sequence_NormalJobStepsItemsAllOf1Continue_45on_45errorTypeBoolean(context, (NormalJobStepsItemsAllOf1Continue_45on_45errorTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_CONTINUE_45ON_45ERROR_TYPE_INTEGER:
				sequence_NormalJobStepsItemsAllOf1Continue_45on_45errorTypeInteger(context, (NormalJobStepsItemsAllOf1Continue_45on_45errorTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_CONTINUE_45ON_45ERROR_TYPE_NULL:
				sequence_NormalJobStepsItemsAllOf1Continue_45on_45errorTypeNull(context, (NormalJobStepsItemsAllOf1Continue_45on_45errorTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_CONTINUE_45ON_45ERROR_TYPE_NUMBER:
				sequence_NormalJobStepsItemsAllOf1Continue_45on_45errorTypeNumber(context, (NormalJobStepsItemsAllOf1Continue_45on_45errorTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_CONTINUE_45ON_45ERROR_TYPE_OBJECT:
				sequence_NormalJobStepsItemsAllOf1Continue_45on_45errorTypeObject(context, (NormalJobStepsItemsAllOf1Continue_45on_45errorTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_CONTINUE_45ON_45ERROR_TYPE_STRING:
				sequence_NormalJobStepsItemsAllOf1Continue_45on_45errorTypeString(context, (NormalJobStepsItemsAllOf1Continue_45on_45errorTypeString) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_ENV:
				sequence_NormalJobStepsItemsAllOf1Env(context, (NormalJobStepsItemsAllOf1Env) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_ID:
				sequence_NormalJobStepsItemsAllOf1Id(context, (NormalJobStepsItemsAllOf1Id) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_IF:
				sequence_NormalJobStepsItemsAllOf1If(context, (NormalJobStepsItemsAllOf1If) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_IF_TYPE_BOOLEAN:
				sequence_NormalJobStepsItemsAllOf1IfTypeBoolean(context, (NormalJobStepsItemsAllOf1IfTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_IF_TYPE_NUMBER:
				sequence_NormalJobStepsItemsAllOf1IfTypeNumber(context, (NormalJobStepsItemsAllOf1IfTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_IF_TYPE_STRING:
				sequence_NormalJobStepsItemsAllOf1IfTypeString(context, (NormalJobStepsItemsAllOf1IfTypeString) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_NAME:
				sequence_NormalJobStepsItemsAllOf1Name(context, (NormalJobStepsItemsAllOf1Name) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_RUN:
				sequence_NormalJobStepsItemsAllOf1Run(context, (NormalJobStepsItemsAllOf1Run) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_SHELL:
				sequence_NormalJobStepsItemsAllOf1Shell(context, (NormalJobStepsItemsAllOf1Shell) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_TIMEOUT_45MINUTES:
				sequence_NormalJobStepsItemsAllOf1Timeout_45minutes(context, (NormalJobStepsItemsAllOf1Timeout_45minutes) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_USES:
				sequence_NormalJobStepsItemsAllOf1Uses(context, (NormalJobStepsItemsAllOf1Uses) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_WITH:
				sequence_NormalJobStepsItemsAllOf1With(context, (NormalJobStepsItemsAllOf1With) semanticObject); 
				return; 
			case GithubwfPackage.NORMAL_JOB_STEPS_ITEMS_ALL_OF1_WORKING_45DIRECTORY:
				sequence_NormalJobStepsItemsAllOf1Working_45directory(context, (NormalJobStepsItemsAllOf1Working_45directory) semanticObject); 
				return; 
			case GithubwfPackage.SHELL:
				sequence_Shell(context, (Shell) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_ADDITIONAL_PROPERTIES:
				sequence_ShellAdditionalProperties(context, (ShellAdditionalProperties) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_ITEMS:
				sequence_ShellItems(context, (ShellItems) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_TYPE_ARRAY:
				sequence_ShellTypeArray(context, (ShellTypeArray) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_TYPE_BOOLEAN:
				sequence_ShellTypeBoolean(context, (ShellTypeBoolean) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_TYPE_INTEGER:
				sequence_ShellTypeInteger(context, (ShellTypeInteger) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_TYPE_NULL:
				sequence_ShellTypeNull(context, (ShellTypeNull) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_TYPE_NUMBER:
				sequence_ShellTypeNumber(context, (ShellTypeNumber) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_TYPE_OBJECT:
				sequence_ShellTypeObject(context, (ShellTypeObject) semanticObject); 
				return; 
			case GithubwfPackage.SHELL_TYPE_STRING:
				sequence_ShellTypeString(context, (ShellTypeString) semanticObject); 
				return; 
			case GithubwfPackage.WORKING_45DIRECTORY:
				sequence_Working_45directory(context, (Working_45directory) semanticObject); 
				return; 
			}
		else if (epackage == JsonMMPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JsonMMPackage.ARRAY_VALUE:
				sequence_ArrayValue(context, (ArrayValue) semanticObject); 
				return; 
			case JsonMMPackage.BOOLEAN_VALUE:
				sequence_BooleanValue(context, (BooleanValue) semanticObject); 
				return; 
			case JsonMMPackage.JSON_DOCUMENT:
				sequence_JsonDocument(context, (JsonDocument) semanticObject); 
				return; 
			case JsonMMPackage.KEY_VALUE_PAIR:
				sequence_KeyValuePair(context, (KeyValuePair) semanticObject); 
				return; 
			case JsonMMPackage.NULL_VALUE:
				sequence_NullValue(context, (NullValue) semanticObject); 
				return; 
			case JsonMMPackage.NUMBER_VALUE:
				sequence_NumberValue(context, (NumberValue) semanticObject); 
				return; 
			case JsonMMPackage.OBJECT_VALUE:
				sequence_ObjectValue(context, (ObjectValue) semanticObject); 
				return; 
			case JsonMMPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Value returns ArrayValue
	 *     ArrayValue returns ArrayValue
	 *
	 * Constraint:
	 *     (value+=Value value+=Value*)?
	 */
	protected void sequence_ArrayValue(ISerializationContext context, ArrayValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns BooleanValue
	 *     BooleanValue returns BooleanValue
	 *
	 * Constraint:
	 *     value=EBoolean
	 */
	protected void sequence_BooleanValue(ISerializationContext context, BooleanValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.BOOLEAN_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanValueAccess().getValueEBooleanParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvPropertiesAbstract returns EnvAdditionalProperties
	 *     EnvAdditionalProperties returns EnvAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_EnvAdditionalProperties(ISerializationContext context, EnvAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getEnvAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvItems returns EnvItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_EnvItems(ISerializationContext context, EnvItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeArray
	 *     EnvTypeArray returns EnvTypeArray
	 *
	 * Constraint:
	 *     (env+=EnvItems env+=EnvItems*)?
	 */
	protected void sequence_EnvTypeArray(ISerializationContext context, EnvTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeBoolean
	 *     EnvTypeBoolean returns EnvTypeBoolean
	 *
	 * Constraint:
	 *     env=EBooleanObject
	 */
	protected void sequence_EnvTypeBoolean(ISerializationContext context, EnvTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeBoolean_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeBoolean_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeBooleanAccess().getEnvEBooleanObjectParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeInteger
	 *     EnvTypeInteger returns EnvTypeInteger
	 *
	 * Constraint:
	 *     env=EDoubleObject
	 */
	protected void sequence_EnvTypeInteger(ISerializationContext context, EnvTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeInteger_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeInteger_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeIntegerAccess().getEnvEDoubleObjectParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeNull
	 *     EnvTypeNull returns EnvTypeNull
	 *
	 * Constraint:
	 *     env=NullValue
	 */
	protected void sequence_EnvTypeNull(ISerializationContext context, EnvTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNull_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNull_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeNullAccess().getEnvNullValueParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeNumber
	 *     EnvTypeNumber returns EnvTypeNumber
	 *
	 * Constraint:
	 *     env=EDoubleObject
	 */
	protected void sequence_EnvTypeNumber(ISerializationContext context, EnvTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNumber_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeNumber_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeNumberAccess().getEnvEDoubleObjectParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeObject
	 *     EnvTypeObject returns EnvTypeObject
	 *
	 * Constraint:
	 *     (env+=EnvPropertiesAbstract env+=EnvPropertiesAbstract*)?
	 */
	protected void sequence_EnvTypeObject(ISerializationContext context, EnvTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnvAbstract returns EnvTypeString
	 *     EnvTypeString returns EnvTypeString
	 *
	 * Constraint:
	 *     env=EString
	 */
	protected void sequence_EnvTypeString(ISerializationContext context, EnvTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeString_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnvTypeString_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvTypeStringAccess().getEnvEStringParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Env returns Env
	 *
	 * Constraint:
	 *     env=EnvAbstract
	 */
	protected void sequence_Env(ISerializationContext context, Env semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getEnv_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getEnv_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnvAccess().getEnvEnvAbstractParserRuleCall_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JsonDocument returns JsonDocument
	 *
	 * Constraint:
	 *     value=Value
	 */
	protected void sequence_JsonDocument(ISerializationContext context, JsonDocument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.JSON_DOCUMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJsonDocumentAccess().getValueValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     KeyValuePair returns KeyValuePair
	 *
	 * Constraint:
	 *     (key=EString value=Value)
	 */
	protected void sequence_KeyValuePair(ISerializationContext context, KeyValuePair semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__KEY));
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.KEY_VALUE_PAIR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeyValuePairAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getKeyValuePairAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1Continue_45on_45errorPropertiesAbstract returns NormalJobStepsItemsAllOf1Continue_45on_45errorAdditionalProperties
	 *     NormalJobStepsItemsAllOf1Continue_45on_45errorAdditionalProperties returns NormalJobStepsItemsAllOf1Continue_45on_45errorAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_NormalJobStepsItemsAllOf1Continue_45on_45errorAdditionalProperties(ISerializationContext context, NormalJobStepsItemsAllOf1Continue_45on_45errorAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Continue_45on_45errorAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Continue_45on_45errorAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Continue_45on_45errorAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Continue_45on_45errorAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1Continue_45on_45errorAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1Continue_45on_45errorAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1Continue_45on_45errorItems returns NormalJobStepsItemsAllOf1Continue_45on_45errorItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_NormalJobStepsItemsAllOf1Continue_45on_45errorItems(ISerializationContext context, NormalJobStepsItemsAllOf1Continue_45on_45errorItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Continue_45on_45errorItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Continue_45on_45errorItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1Continue_45on_45errorItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1Continue_45on_45errorAbstract returns NormalJobStepsItemsAllOf1Continue_45on_45errorTypeArray
	 *     NormalJobStepsItemsAllOf1Continue_45on_45errorTypeArray returns NormalJobStepsItemsAllOf1Continue_45on_45errorTypeArray
	 *
	 * Constraint:
	 *     (
	 *         continue_45on_45error+=NormalJobStepsItemsAllOf1Continue_45on_45errorItems 
	 *         continue_45on_45error+=NormalJobStepsItemsAllOf1Continue_45on_45errorItems*
	 *     )?
	 */
	protected void sequence_NormalJobStepsItemsAllOf1Continue_45on_45errorTypeArray(ISerializationContext context, NormalJobStepsItemsAllOf1Continue_45on_45errorTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1Continue_45on_45errorAbstract returns NormalJobStepsItemsAllOf1Continue_45on_45errorTypeBoolean
	 *     NormalJobStepsItemsAllOf1Continue_45on_45errorTypeBoolean returns NormalJobStepsItemsAllOf1Continue_45on_45errorTypeBoolean
	 *
	 * Constraint:
	 *     continue_45on_45error=EBooleanObject
	 */
	protected void sequence_NormalJobStepsItemsAllOf1Continue_45on_45errorTypeBoolean(ISerializationContext context, NormalJobStepsItemsAllOf1Continue_45on_45errorTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Continue_45on_45errorTypeBoolean_Continue_45on_45error()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Continue_45on_45errorTypeBoolean_Continue_45on_45error()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1Continue_45on_45errorTypeBooleanAccess().getContinue_45on_45errorEBooleanObjectParserRuleCall_2_0(), semanticObject.getContinue_45on_45error());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1Continue_45on_45errorAbstract returns NormalJobStepsItemsAllOf1Continue_45on_45errorTypeInteger
	 *     NormalJobStepsItemsAllOf1Continue_45on_45errorTypeInteger returns NormalJobStepsItemsAllOf1Continue_45on_45errorTypeInteger
	 *
	 * Constraint:
	 *     continue_45on_45error=EDoubleObject
	 */
	protected void sequence_NormalJobStepsItemsAllOf1Continue_45on_45errorTypeInteger(ISerializationContext context, NormalJobStepsItemsAllOf1Continue_45on_45errorTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Continue_45on_45errorTypeInteger_Continue_45on_45error()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Continue_45on_45errorTypeInteger_Continue_45on_45error()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1Continue_45on_45errorTypeIntegerAccess().getContinue_45on_45errorEDoubleObjectParserRuleCall_2_0(), semanticObject.getContinue_45on_45error());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1Continue_45on_45errorAbstract returns NormalJobStepsItemsAllOf1Continue_45on_45errorTypeNull
	 *     NormalJobStepsItemsAllOf1Continue_45on_45errorTypeNull returns NormalJobStepsItemsAllOf1Continue_45on_45errorTypeNull
	 *
	 * Constraint:
	 *     continue_45on_45error=NullValue
	 */
	protected void sequence_NormalJobStepsItemsAllOf1Continue_45on_45errorTypeNull(ISerializationContext context, NormalJobStepsItemsAllOf1Continue_45on_45errorTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Continue_45on_45errorTypeNull_Continue_45on_45error()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Continue_45on_45errorTypeNull_Continue_45on_45error()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1Continue_45on_45errorTypeNullAccess().getContinue_45on_45errorNullValueParserRuleCall_2_0(), semanticObject.getContinue_45on_45error());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1Continue_45on_45errorAbstract returns NormalJobStepsItemsAllOf1Continue_45on_45errorTypeNumber
	 *     NormalJobStepsItemsAllOf1Continue_45on_45errorTypeNumber returns NormalJobStepsItemsAllOf1Continue_45on_45errorTypeNumber
	 *
	 * Constraint:
	 *     continue_45on_45error=EDoubleObject
	 */
	protected void sequence_NormalJobStepsItemsAllOf1Continue_45on_45errorTypeNumber(ISerializationContext context, NormalJobStepsItemsAllOf1Continue_45on_45errorTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Continue_45on_45errorTypeNumber_Continue_45on_45error()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Continue_45on_45errorTypeNumber_Continue_45on_45error()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1Continue_45on_45errorTypeNumberAccess().getContinue_45on_45errorEDoubleObjectParserRuleCall_2_0(), semanticObject.getContinue_45on_45error());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1Continue_45on_45errorAbstract returns NormalJobStepsItemsAllOf1Continue_45on_45errorTypeObject
	 *     NormalJobStepsItemsAllOf1Continue_45on_45errorTypeObject returns NormalJobStepsItemsAllOf1Continue_45on_45errorTypeObject
	 *
	 * Constraint:
	 *     (
	 *         continue_45on_45error+=NormalJobStepsItemsAllOf1Continue_45on_45errorPropertiesAbstract 
	 *         continue_45on_45error+=NormalJobStepsItemsAllOf1Continue_45on_45errorPropertiesAbstract*
	 *     )?
	 */
	protected void sequence_NormalJobStepsItemsAllOf1Continue_45on_45errorTypeObject(ISerializationContext context, NormalJobStepsItemsAllOf1Continue_45on_45errorTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1Continue_45on_45errorAbstract returns NormalJobStepsItemsAllOf1Continue_45on_45errorTypeString
	 *     NormalJobStepsItemsAllOf1Continue_45on_45errorTypeString returns NormalJobStepsItemsAllOf1Continue_45on_45errorTypeString
	 *
	 * Constraint:
	 *     continue_45on_45error=EString
	 */
	protected void sequence_NormalJobStepsItemsAllOf1Continue_45on_45errorTypeString(ISerializationContext context, NormalJobStepsItemsAllOf1Continue_45on_45errorTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Continue_45on_45errorTypeString_Continue_45on_45error()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Continue_45on_45errorTypeString_Continue_45on_45error()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1Continue_45on_45errorTypeStringAccess().getContinue_45on_45errorEStringParserRuleCall_2_0(), semanticObject.getContinue_45on_45error());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1PropertiesAbstract returns NormalJobStepsItemsAllOf1Continue_45on_45error
	 *     NormalJobStepsItemsAllOf1Continue_45on_45error returns NormalJobStepsItemsAllOf1Continue_45on_45error
	 *
	 * Constraint:
	 *     continue_45on_45error=NormalJobStepsItemsAllOf1Continue_45on_45errorAbstract
	 */
	protected void sequence_NormalJobStepsItemsAllOf1Continue_45on_45error(ISerializationContext context, NormalJobStepsItemsAllOf1Continue_45on_45error semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Continue_45on_45error_Continue_45on_45error()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Continue_45on_45error_Continue_45on_45error()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1Continue_45on_45errorAccess().getContinue_45on_45errorNormalJobStepsItemsAllOf1Continue_45on_45errorAbstractParserRuleCall_0(), semanticObject.getContinue_45on_45error());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1PropertiesAbstract returns NormalJobStepsItemsAllOf1Env
	 *     NormalJobStepsItemsAllOf1Env returns NormalJobStepsItemsAllOf1Env
	 *
	 * Constraint:
	 *     env=Env
	 */
	protected void sequence_NormalJobStepsItemsAllOf1Env(ISerializationContext context, NormalJobStepsItemsAllOf1Env semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Env_Env()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Env_Env()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1EnvAccess().getEnvEnvParserRuleCall_2_0(), semanticObject.getEnv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1PropertiesAbstract returns NormalJobStepsItemsAllOf1Id
	 *     NormalJobStepsItemsAllOf1Id returns NormalJobStepsItemsAllOf1Id
	 *
	 * Constraint:
	 *     id=EString
	 */
	protected void sequence_NormalJobStepsItemsAllOf1Id(ISerializationContext context, NormalJobStepsItemsAllOf1Id semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Id_Id()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Id_Id()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1IdAccess().getIdEStringParserRuleCall_2_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1IfAbstract returns NormalJobStepsItemsAllOf1IfTypeBoolean
	 *     NormalJobStepsItemsAllOf1IfTypeBoolean returns NormalJobStepsItemsAllOf1IfTypeBoolean
	 *
	 * Constraint:
	 *     if_=EBooleanObject
	 */
	protected void sequence_NormalJobStepsItemsAllOf1IfTypeBoolean(ISerializationContext context, NormalJobStepsItemsAllOf1IfTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1IfTypeBoolean_If_()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1IfTypeBoolean_If_()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1IfTypeBooleanAccess().getIf_EBooleanObjectParserRuleCall_2_0(), semanticObject.getIf_());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1IfAbstract returns NormalJobStepsItemsAllOf1IfTypeNumber
	 *     NormalJobStepsItemsAllOf1IfTypeNumber returns NormalJobStepsItemsAllOf1IfTypeNumber
	 *
	 * Constraint:
	 *     if_=EDoubleObject
	 */
	protected void sequence_NormalJobStepsItemsAllOf1IfTypeNumber(ISerializationContext context, NormalJobStepsItemsAllOf1IfTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1IfTypeNumber_If_()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1IfTypeNumber_If_()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1IfTypeNumberAccess().getIf_EDoubleObjectParserRuleCall_2_0(), semanticObject.getIf_());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1IfAbstract returns NormalJobStepsItemsAllOf1IfTypeString
	 *     NormalJobStepsItemsAllOf1IfTypeString returns NormalJobStepsItemsAllOf1IfTypeString
	 *
	 * Constraint:
	 *     if_=EString
	 */
	protected void sequence_NormalJobStepsItemsAllOf1IfTypeString(ISerializationContext context, NormalJobStepsItemsAllOf1IfTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1IfTypeString_If_()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1IfTypeString_If_()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1IfTypeStringAccess().getIf_EStringParserRuleCall_2_0(), semanticObject.getIf_());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1PropertiesAbstract returns NormalJobStepsItemsAllOf1If
	 *     NormalJobStepsItemsAllOf1If returns NormalJobStepsItemsAllOf1If
	 *
	 * Constraint:
	 *     if_=NormalJobStepsItemsAllOf1IfAbstract
	 */
	protected void sequence_NormalJobStepsItemsAllOf1If(ISerializationContext context, NormalJobStepsItemsAllOf1If semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1If_If_()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1If_If_()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1IfAccess().getIf_NormalJobStepsItemsAllOf1IfAbstractParserRuleCall_0(), semanticObject.getIf_());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1PropertiesAbstract returns NormalJobStepsItemsAllOf1Name
	 *     NormalJobStepsItemsAllOf1Name returns NormalJobStepsItemsAllOf1Name
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_NormalJobStepsItemsAllOf1Name(ISerializationContext context, NormalJobStepsItemsAllOf1Name semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Name_Name()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Name_Name()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1NameAccess().getNameEStringParserRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1PropertiesAbstract returns NormalJobStepsItemsAllOf1Run
	 *     NormalJobStepsItemsAllOf1Run returns NormalJobStepsItemsAllOf1Run
	 *
	 * Constraint:
	 *     run=EString
	 */
	protected void sequence_NormalJobStepsItemsAllOf1Run(ISerializationContext context, NormalJobStepsItemsAllOf1Run semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Run_Run()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Run_Run()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1RunAccess().getRunEStringParserRuleCall_2_0(), semanticObject.getRun());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1PropertiesAbstract returns NormalJobStepsItemsAllOf1Shell
	 *     NormalJobStepsItemsAllOf1Shell returns NormalJobStepsItemsAllOf1Shell
	 *
	 * Constraint:
	 *     shell=Shell
	 */
	protected void sequence_NormalJobStepsItemsAllOf1Shell(ISerializationContext context, NormalJobStepsItemsAllOf1Shell semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Shell_Shell()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Shell_Shell()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1ShellAccess().getShellShellParserRuleCall_2_0(), semanticObject.getShell());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1PropertiesAbstract returns NormalJobStepsItemsAllOf1Timeout_45minutes
	 *     NormalJobStepsItemsAllOf1Timeout_45minutes returns NormalJobStepsItemsAllOf1Timeout_45minutes
	 *
	 * Constraint:
	 *     timeout_45minutes=EDoubleObject
	 */
	protected void sequence_NormalJobStepsItemsAllOf1Timeout_45minutes(ISerializationContext context, NormalJobStepsItemsAllOf1Timeout_45minutes semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Timeout_45minutes_Timeout_45minutes()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Timeout_45minutes_Timeout_45minutes()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1Timeout_45minutesAccess().getTimeout_45minutesEDoubleObjectParserRuleCall_2_0(), semanticObject.getTimeout_45minutes());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1PropertiesAbstract returns NormalJobStepsItemsAllOf1Uses
	 *     NormalJobStepsItemsAllOf1Uses returns NormalJobStepsItemsAllOf1Uses
	 *
	 * Constraint:
	 *     uses=EString
	 */
	protected void sequence_NormalJobStepsItemsAllOf1Uses(ISerializationContext context, NormalJobStepsItemsAllOf1Uses semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Uses_Uses()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Uses_Uses()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1UsesAccess().getUsesEStringParserRuleCall_2_0(), semanticObject.getUses());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1PropertiesAbstract returns NormalJobStepsItemsAllOf1With
	 *     NormalJobStepsItemsAllOf1With returns NormalJobStepsItemsAllOf1With
	 *
	 * Constraint:
	 *     with=Env
	 */
	protected void sequence_NormalJobStepsItemsAllOf1With(ISerializationContext context, NormalJobStepsItemsAllOf1With semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1With_With()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1With_With()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1WithAccess().getWithEnvParserRuleCall_2_0(), semanticObject.getWith());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1PropertiesAbstract returns NormalJobStepsItemsAllOf1Working_45directory
	 *     NormalJobStepsItemsAllOf1Working_45directory returns NormalJobStepsItemsAllOf1Working_45directory
	 *
	 * Constraint:
	 *     working_45directory=Working_45directory
	 */
	protected void sequence_NormalJobStepsItemsAllOf1Working_45directory(ISerializationContext context, NormalJobStepsItemsAllOf1Working_45directory semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Working_45directory_Working_45directory()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getNormalJobStepsItemsAllOf1Working_45directory_Working_45directory()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalJobStepsItemsAllOf1Working_45directoryAccess().getWorking_45directoryWorking_45directoryParserRuleCall_2_0(), semanticObject.getWorking_45directory());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJobStepsItemsAllOf1 returns NormalJobStepsItemsAllOf1
	 *
	 * Constraint:
	 *     (items+=NormalJobStepsItemsAllOf1PropertiesAbstract items+=NormalJobStepsItemsAllOf1PropertiesAbstract*)?
	 */
	protected void sequence_NormalJobStepsItemsAllOf1(ISerializationContext context, NormalJobStepsItemsAllOf1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NullValue
	 *     NullValue returns NullValue
	 *
	 * Constraint:
	 *     value=NullEnum
	 */
	protected void sequence_NullValue(ISerializationContext context, NullValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NULL_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNullValueAccess().getValueNullEnumEnumRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NumberValue
	 *     NumberValue returns NumberValue
	 *
	 * Constraint:
	 *     value=EDouble
	 */
	protected void sequence_NumberValue(ISerializationContext context, NumberValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.NUMBER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberValueAccess().getValueEDoubleParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns ObjectValue
	 *     ObjectValue returns ObjectValue
	 *
	 * Constraint:
	 *     (keyvaluepair+=KeyValuePair keyvaluepair+=KeyValuePair*)?
	 */
	protected void sequence_ObjectValue(ISerializationContext context, ObjectValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShellPropertiesAbstract returns ShellAdditionalProperties
	 *     ShellAdditionalProperties returns ShellAdditionalProperties
	 *
	 * Constraint:
	 *     (key=EString additionalProperties=JsonDocument)
	 */
	protected void sequence_ShellAdditionalProperties(ISerializationContext context, ShellAdditionalProperties semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellAdditionalProperties_Key()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellAdditionalProperties_Key()));
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellAdditionalProperties_AdditionalProperties()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellAdditionalProperties_AdditionalProperties()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellAdditionalPropertiesAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getShellAdditionalPropertiesAccess().getAdditionalPropertiesJsonDocumentParserRuleCall_2_0(), semanticObject.getAdditionalProperties());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ShellItems returns ShellItems
	 *
	 * Constraint:
	 *     items=JsonDocument
	 */
	protected void sequence_ShellItems(ISerializationContext context, ShellItems semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellItems_Items()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellItems_Items()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellItemsAccess().getItemsJsonDocumentParserRuleCall_0(), semanticObject.getItems());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ShellAbstract returns ShellTypeArray
	 *     ShellTypeArray returns ShellTypeArray
	 *
	 * Constraint:
	 *     (shell+=ShellItems shell+=ShellItems*)?
	 */
	protected void sequence_ShellTypeArray(ISerializationContext context, ShellTypeArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShellAbstract returns ShellTypeBoolean
	 *     ShellTypeBoolean returns ShellTypeBoolean
	 *
	 * Constraint:
	 *     shell=EBooleanObject
	 */
	protected void sequence_ShellTypeBoolean(ISerializationContext context, ShellTypeBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeBoolean_Shell()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeBoolean_Shell()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellTypeBooleanAccess().getShellEBooleanObjectParserRuleCall_0(), semanticObject.getShell());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ShellAbstract returns ShellTypeInteger
	 *     ShellTypeInteger returns ShellTypeInteger
	 *
	 * Constraint:
	 *     shell=EDoubleObject
	 */
	protected void sequence_ShellTypeInteger(ISerializationContext context, ShellTypeInteger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeInteger_Shell()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeInteger_Shell()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellTypeIntegerAccess().getShellEDoubleObjectParserRuleCall_0(), semanticObject.getShell());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ShellAbstract returns ShellTypeNull
	 *     ShellTypeNull returns ShellTypeNull
	 *
	 * Constraint:
	 *     shell=NullValue
	 */
	protected void sequence_ShellTypeNull(ISerializationContext context, ShellTypeNull semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeNull_Shell()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeNull_Shell()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellTypeNullAccess().getShellNullValueParserRuleCall_0(), semanticObject.getShell());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ShellAbstract returns ShellTypeNumber
	 *     ShellTypeNumber returns ShellTypeNumber
	 *
	 * Constraint:
	 *     shell=EDoubleObject
	 */
	protected void sequence_ShellTypeNumber(ISerializationContext context, ShellTypeNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeNumber_Shell()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeNumber_Shell()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellTypeNumberAccess().getShellEDoubleObjectParserRuleCall_0(), semanticObject.getShell());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ShellAbstract returns ShellTypeObject
	 *     ShellTypeObject returns ShellTypeObject
	 *
	 * Constraint:
	 *     (shell+=ShellPropertiesAbstract shell+=ShellPropertiesAbstract*)?
	 */
	protected void sequence_ShellTypeObject(ISerializationContext context, ShellTypeObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShellAbstract returns ShellTypeString
	 *     ShellTypeString returns ShellTypeString
	 *
	 * Constraint:
	 *     shell=EString
	 */
	protected void sequence_ShellTypeString(ISerializationContext context, ShellTypeString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeString_Shell()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShellTypeString_Shell()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellTypeStringAccess().getShellEStringParserRuleCall_0(), semanticObject.getShell());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Shell returns Shell
	 *
	 * Constraint:
	 *     shell=ShellAbstract
	 */
	protected void sequence_Shell(ISerializationContext context, Shell semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getShell_Shell()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getShell_Shell()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShellAccess().getShellShellAbstractParserRuleCall_0(), semanticObject.getShell());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=EString
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JsonMMPackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueEStringParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Working_45directory returns Working_45directory
	 *
	 * Constraint:
	 *     working_45directory=EString
	 */
	protected void sequence_Working_45directory(ISerializationContext context, Working_45directory semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GithubwfPackage.eINSTANCE.getWorking_45directory_Working_45directory()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GithubwfPackage.eINSTANCE.getWorking_45directory_Working_45directory()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWorking_45directoryAccess().getWorking_45directoryEStringParserRuleCall_0(), semanticObject.getWorking_45directory());
		feeder.finish();
	}
	
	
}
